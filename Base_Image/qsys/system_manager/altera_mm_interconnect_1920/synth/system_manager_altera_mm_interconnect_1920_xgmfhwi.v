// system_manager_altera_mm_interconnect_1920_xgmfhwi.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module system_manager_altera_mm_interconnect_1920_xgmfhwi (
		input  wire [8:0]  system_manager_if_mem_if_address,                  //                    system_manager_if_mem_if.address
		output wire        system_manager_if_mem_if_waitrequest,              //                                            .waitrequest
		input  wire        system_manager_if_mem_if_read,                     //                                            .read
		output wire [15:0] system_manager_if_mem_if_readdata,                 //                                            .readdata
		input  wire        system_manager_if_mem_if_write,                    //                                            .write
		input  wire [15:0] system_manager_if_mem_if_writedata,                //                                            .writedata
		output wire [8:0]  flash_mem_buf_s2_address,                          //                            flash_mem_buf_s2.address
		output wire        flash_mem_buf_s2_write,                            //                                            .write
		input  wire [15:0] flash_mem_buf_s2_readdata,                         //                                            .readdata
		output wire [15:0] flash_mem_buf_s2_writedata,                        //                                            .writedata
		output wire [1:0]  flash_mem_buf_s2_byteenable,                       //                                            .byteenable
		output wire        flash_mem_buf_s2_chipselect,                       //                                            .chipselect
		output wire        flash_mem_buf_s2_clken,                            //                                            .clken
		input  wire        system_manager_if_rst_reset_bridge_in_reset_reset, // system_manager_if_rst_reset_bridge_in_reset.reset
		input  wire        config_clk_src_clk_clk                             //                          config_clk_src_clk.clk
	);

	wire         system_manager_if_mem_if_translator_avalon_universal_master_0_waitrequest;   // flash_mem_buf_s2_translator:uav_waitrequest -> system_manager_if_mem_if_translator:uav_waitrequest
	wire  [15:0] system_manager_if_mem_if_translator_avalon_universal_master_0_readdata;      // flash_mem_buf_s2_translator:uav_readdata -> system_manager_if_mem_if_translator:uav_readdata
	wire         system_manager_if_mem_if_translator_avalon_universal_master_0_debugaccess;   // system_manager_if_mem_if_translator:uav_debugaccess -> flash_mem_buf_s2_translator:uav_debugaccess
	wire   [9:0] system_manager_if_mem_if_translator_avalon_universal_master_0_address;       // system_manager_if_mem_if_translator:uav_address -> flash_mem_buf_s2_translator:uav_address
	wire         system_manager_if_mem_if_translator_avalon_universal_master_0_read;          // system_manager_if_mem_if_translator:uav_read -> flash_mem_buf_s2_translator:uav_read
	wire   [1:0] system_manager_if_mem_if_translator_avalon_universal_master_0_byteenable;    // system_manager_if_mem_if_translator:uav_byteenable -> flash_mem_buf_s2_translator:uav_byteenable
	wire         system_manager_if_mem_if_translator_avalon_universal_master_0_readdatavalid; // flash_mem_buf_s2_translator:uav_readdatavalid -> system_manager_if_mem_if_translator:uav_readdatavalid
	wire         system_manager_if_mem_if_translator_avalon_universal_master_0_lock;          // system_manager_if_mem_if_translator:uav_lock -> flash_mem_buf_s2_translator:uav_lock
	wire         system_manager_if_mem_if_translator_avalon_universal_master_0_write;         // system_manager_if_mem_if_translator:uav_write -> flash_mem_buf_s2_translator:uav_write
	wire  [15:0] system_manager_if_mem_if_translator_avalon_universal_master_0_writedata;     // system_manager_if_mem_if_translator:uav_writedata -> flash_mem_buf_s2_translator:uav_writedata
	wire   [1:0] system_manager_if_mem_if_translator_avalon_universal_master_0_burstcount;    // system_manager_if_mem_if_translator:uav_burstcount -> flash_mem_buf_s2_translator:uav_burstcount

	system_manager_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (9),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (10),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) system_manager_if_mem_if_translator (
		.clk                    (config_clk_src_clk_clk),                                                      //   input,   width = 1,                       clk.clk
		.reset                  (system_manager_if_rst_reset_bridge_in_reset_reset),                           //   input,   width = 1,                     reset.reset
		.uav_address            (system_manager_if_mem_if_translator_avalon_universal_master_0_address),       //  output,  width = 10, avalon_universal_master_0.address
		.uav_burstcount         (system_manager_if_mem_if_translator_avalon_universal_master_0_burstcount),    //  output,   width = 2,                          .burstcount
		.uav_read               (system_manager_if_mem_if_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (system_manager_if_mem_if_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (system_manager_if_mem_if_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (system_manager_if_mem_if_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (system_manager_if_mem_if_translator_avalon_universal_master_0_byteenable),    //  output,   width = 2,                          .byteenable
		.uav_readdata           (system_manager_if_mem_if_translator_avalon_universal_master_0_readdata),      //   input,  width = 16,                          .readdata
		.uav_writedata          (system_manager_if_mem_if_translator_avalon_universal_master_0_writedata),     //  output,  width = 16,                          .writedata
		.uav_lock               (system_manager_if_mem_if_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (system_manager_if_mem_if_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (system_manager_if_mem_if_address),                                            //   input,   width = 9,      avalon_anti_master_0.address
		.av_waitrequest         (system_manager_if_mem_if_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_read                (system_manager_if_mem_if_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (system_manager_if_mem_if_readdata),                                           //  output,  width = 16,                          .readdata
		.av_write               (system_manager_if_mem_if_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (system_manager_if_mem_if_writedata),                                          //   input,  width = 16,                          .writedata
		.av_burstcount          (1'b1),                                                                        // (terminated),                                        
		.av_byteenable          (2'b11),                                                                       // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                        // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                        // (terminated),                                        
		.av_chipselect          (1'b0),                                                                        // (terminated),                                        
		.av_readdatavalid       (),                                                                            // (terminated),                                        
		.av_lock                (1'b0),                                                                        // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                        // (terminated),                                        
		.uav_clken              (),                                                                            // (terminated),                                        
		.av_clken               (1'b1),                                                                        // (terminated),                                        
		.uav_response           (2'b00),                                                                       // (terminated),                                        
		.av_response            (),                                                                            // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                        // (terminated),                                        
		.av_writeresponsevalid  ()                                                                             // (terminated),                                        
	);

	system_manager_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (10),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) flash_mem_buf_s2_translator (
		.clk                    (config_clk_src_clk_clk),                                                      //   input,   width = 1,                      clk.clk
		.reset                  (system_manager_if_rst_reset_bridge_in_reset_reset),                           //   input,   width = 1,                    reset.reset
		.uav_address            (system_manager_if_mem_if_translator_avalon_universal_master_0_address),       //   input,  width = 10, avalon_universal_slave_0.address
		.uav_burstcount         (system_manager_if_mem_if_translator_avalon_universal_master_0_burstcount),    //   input,   width = 2,                         .burstcount
		.uav_read               (system_manager_if_mem_if_translator_avalon_universal_master_0_read),          //   input,   width = 1,                         .read
		.uav_write              (system_manager_if_mem_if_translator_avalon_universal_master_0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (system_manager_if_mem_if_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (system_manager_if_mem_if_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (system_manager_if_mem_if_translator_avalon_universal_master_0_byteenable),    //   input,   width = 2,                         .byteenable
		.uav_readdata           (system_manager_if_mem_if_translator_avalon_universal_master_0_readdata),      //  output,  width = 16,                         .readdata
		.uav_writedata          (system_manager_if_mem_if_translator_avalon_universal_master_0_writedata),     //   input,  width = 16,                         .writedata
		.uav_lock               (system_manager_if_mem_if_translator_avalon_universal_master_0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (system_manager_if_mem_if_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (flash_mem_buf_s2_address),                                                    //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (flash_mem_buf_s2_write),                                                      //  output,   width = 1,                         .write
		.av_readdata            (flash_mem_buf_s2_readdata),                                                   //   input,  width = 16,                         .readdata
		.av_writedata           (flash_mem_buf_s2_writedata),                                                  //  output,  width = 16,                         .writedata
		.av_byteenable          (flash_mem_buf_s2_byteenable),                                                 //  output,   width = 2,                         .byteenable
		.av_chipselect          (flash_mem_buf_s2_chipselect),                                                 //  output,   width = 1,                         .chipselect
		.av_clken               (flash_mem_buf_s2_clken),                                                      //  output,   width = 1,                         .clken
		.av_read                (),                                                                            // (terminated),                                       
		.av_begintransfer       (),                                                                            // (terminated),                                       
		.av_beginbursttransfer  (),                                                                            // (terminated),                                       
		.av_burstcount          (),                                                                            // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                        // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                        // (terminated),                                       
		.av_writebyteenable     (),                                                                            // (terminated),                                       
		.av_lock                (),                                                                            // (terminated),                                       
		.uav_clken              (1'b0),                                                                        // (terminated),                                       
		.av_debugaccess         (),                                                                            // (terminated),                                       
		.av_outputenable        (),                                                                            // (terminated),                                       
		.uav_response           (),                                                                            // (terminated),                                       
		.av_response            (2'b00),                                                                       // (terminated),                                       
		.uav_writeresponsevalid (),                                                                            // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                         // (terminated),                                       
	);

endmodule
