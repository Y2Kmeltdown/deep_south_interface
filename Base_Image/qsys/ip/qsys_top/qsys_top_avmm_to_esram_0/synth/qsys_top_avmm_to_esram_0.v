// qsys_top_avmm_to_esram_0.v

// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module qsys_top_avmm_to_esram_0 #(
		parameter c_ADDR_BITS = 16,
		parameter c_WORD_SIZE = 32
	) (
		input  wire [(((c_ADDR_BITS-1)-0)+1)-1:0] av_address,      //         av.address
		input  wire                               av_read,         //           .read
		output wire                               av_waitrequest,  //           .waitrequest
		input  wire                               av_write,        //           .write
		output wire [(((c_WORD_SIZE-1)-0)+1)-1:0] av_readdata,     //           .readdata
		input  wire [(((c_WORD_SIZE-1)-0)+1)-1:0] av_writedata,    //           .writedata
		output wire [(((c_WORD_SIZE-1)-0)+1)-1:0] data,            //  ram_input.s2c0_da_0
		output wire [(((c_ADDR_BITS-1)-0)+1)-1:0] rdaddress,       //           .s2c0_adrb_0
		output wire                               rden_n,          //           .s2c0_meb_n_0
		output wire                               sd_n,            //           .s2c0_sd_n_0
		output wire [(((c_ADDR_BITS-1)-0)+1)-1:0] wraddress,       //           .s2c0_adra_0
		output wire                               wren_n,          //           .s2c0_mea_n_0
		output wire                               refclk_out,      //           .clock
		input  wire [(((c_WORD_SIZE-1)-0)+1)-1:0] q,               // ram_output.s2c0_qb_0
		input  wire                               esram_clk_i,     //           .esram2f_clk
		input  wire                               iopll_lock2core, //           .iopll_lock2core
		output wire                               iopll_lock,      // iopll_lock.writeresponsevalid_n
		input  wire                               refclk,          //     refclk.clk
		output wire                               esram_clk,       //  esram_clk.clk
		output wire                               esram_rst        //  esram_rst.reset
	);

	av_esram #(
		.c_ADDR_BITS (c_ADDR_BITS),
		.c_WORD_SIZE (c_WORD_SIZE)
	) avmm_to_esram_0 (
		.av_address      (av_address),      //   input,  width = (((c_ADDR_BITS-1)-0)+1),         av.address
		.av_read         (av_read),         //   input,                        width = 1,           .read
		.av_waitrequest  (av_waitrequest),  //  output,                        width = 1,           .waitrequest
		.av_write        (av_write),        //   input,                        width = 1,           .write
		.av_readdata     (av_readdata),     //  output,  width = (((c_WORD_SIZE-1)-0)+1),           .readdata
		.av_writedata    (av_writedata),    //   input,  width = (((c_WORD_SIZE-1)-0)+1),           .writedata
		.data            (data),            //  output,  width = (((c_WORD_SIZE-1)-0)+1),  ram_input.s2c0_da_0
		.rdaddress       (rdaddress),       //  output,  width = (((c_ADDR_BITS-1)-0)+1),           .s2c0_adrb_0
		.rden_n          (rden_n),          //  output,                        width = 1,           .s2c0_meb_n_0
		.sd_n            (sd_n),            //  output,                        width = 1,           .s2c0_sd_n_0
		.wraddress       (wraddress),       //  output,  width = (((c_ADDR_BITS-1)-0)+1),           .s2c0_adra_0
		.wren_n          (wren_n),          //  output,                        width = 1,           .s2c0_mea_n_0
		.refclk_out      (refclk_out),      //  output,                        width = 1,           .clock
		.q               (q),               //   input,  width = (((c_WORD_SIZE-1)-0)+1), ram_output.s2c0_qb_0
		.esram_clk_i     (esram_clk_i),     //   input,                        width = 1,           .esram2f_clk
		.iopll_lock2core (iopll_lock2core), //   input,                        width = 1,           .iopll_lock2core
		.iopll_lock      (iopll_lock),      //  output,                        width = 1, iopll_lock.writeresponsevalid_n
		.refclk          (refclk),          //   input,                        width = 1,     refclk.clk
		.esram_clk       (esram_clk),       //  output,                        width = 1,  esram_clk.clk
		.esram_rst       (esram_rst)        //  output,                        width = 1,  esram_rst.reset
	);

endmodule
