// qsys_top_altera_mm_interconnect_1920_c3p7ley.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_1920_c3p7ley (
		input  wire [17:0] qsys_top_mm_ccb_1_m0_address,                                      //                                        qsys_top_mm_ccb_1_m0.address
		output wire        qsys_top_mm_ccb_1_m0_waitrequest,                                  //                                                            .waitrequest
		input  wire [0:0]  qsys_top_mm_ccb_1_m0_burstcount,                                   //                                                            .burstcount
		input  wire [3:0]  qsys_top_mm_ccb_1_m0_byteenable,                                   //                                                            .byteenable
		input  wire        qsys_top_mm_ccb_1_m0_read,                                         //                                                            .read
		output wire [31:0] qsys_top_mm_ccb_1_m0_readdata,                                     //                                                            .readdata
		output wire        qsys_top_mm_ccb_1_m0_readdatavalid,                                //                                                            .readdatavalid
		input  wire        qsys_top_mm_ccb_1_m0_write,                                        //                                                            .write
		input  wire [31:0] qsys_top_mm_ccb_1_m0_writedata,                                    //                                                            .writedata
		input  wire        qsys_top_mm_ccb_1_m0_debugaccess,                                  //                                                            .debugaccess
		input  wire [17:0] processor_clock_crossing_bridge_m0_address,                        //                          processor_clock_crossing_bridge_m0.address
		output wire        processor_clock_crossing_bridge_m0_waitrequest,                    //                                                            .waitrequest
		input  wire [0:0]  processor_clock_crossing_bridge_m0_burstcount,                     //                                                            .burstcount
		input  wire [3:0]  processor_clock_crossing_bridge_m0_byteenable,                     //                                                            .byteenable
		input  wire        processor_clock_crossing_bridge_m0_read,                           //                                                            .read
		output wire [31:0] processor_clock_crossing_bridge_m0_readdata,                       //                                                            .readdata
		output wire        processor_clock_crossing_bridge_m0_readdatavalid,                  //                                                            .readdatavalid
		input  wire        processor_clock_crossing_bridge_m0_write,                          //                                                            .write
		input  wire [31:0] processor_clock_crossing_bridge_m0_writedata,                      //                                                            .writedata
		input  wire        processor_clock_crossing_bridge_m0_debugaccess,                    //                                                            .debugaccess
		output wire [15:0] avmm_to_esram_0_av_address,                                        //                                          avmm_to_esram_0_av.address
		output wire        avmm_to_esram_0_av_write,                                          //                                                            .write
		output wire        avmm_to_esram_0_av_read,                                           //                                                            .read
		input  wire [31:0] avmm_to_esram_0_av_readdata,                                       //                                                            .readdata
		output wire [31:0] avmm_to_esram_0_av_writedata,                                      //                                                            .writedata
		input  wire        avmm_to_esram_0_av_waitrequest,                                    //                                                            .waitrequest
		input  wire        qsys_top_mm_ccb_1_m0_reset_reset_bridge_in_reset_reset,            //            qsys_top_mm_ccb_1_m0_reset_reset_bridge_in_reset.reset
		input  wire        qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset, // qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset.reset
		input  wire        avmm_to_esram_0_esram_clk_clk                                      //                                   avmm_to_esram_0_esram_clk.clk
	);

	wire         qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_waitrequest;                 // qsys_top_mm_ccb_1_m0_agent:av_waitrequest -> qsys_top_mm_ccb_1_m0_translator:uav_waitrequest
	wire  [31:0] qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_readdata;                    // qsys_top_mm_ccb_1_m0_agent:av_readdata -> qsys_top_mm_ccb_1_m0_translator:uav_readdata
	wire         qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_debugaccess;                 // qsys_top_mm_ccb_1_m0_translator:uav_debugaccess -> qsys_top_mm_ccb_1_m0_agent:av_debugaccess
	wire  [17:0] qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_address;                     // qsys_top_mm_ccb_1_m0_translator:uav_address -> qsys_top_mm_ccb_1_m0_agent:av_address
	wire         qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_read;                        // qsys_top_mm_ccb_1_m0_translator:uav_read -> qsys_top_mm_ccb_1_m0_agent:av_read
	wire   [3:0] qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_byteenable;                  // qsys_top_mm_ccb_1_m0_translator:uav_byteenable -> qsys_top_mm_ccb_1_m0_agent:av_byteenable
	wire         qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_readdatavalid;               // qsys_top_mm_ccb_1_m0_agent:av_readdatavalid -> qsys_top_mm_ccb_1_m0_translator:uav_readdatavalid
	wire         qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_lock;                        // qsys_top_mm_ccb_1_m0_translator:uav_lock -> qsys_top_mm_ccb_1_m0_agent:av_lock
	wire         qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_write;                       // qsys_top_mm_ccb_1_m0_translator:uav_write -> qsys_top_mm_ccb_1_m0_agent:av_write
	wire  [31:0] qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_writedata;                   // qsys_top_mm_ccb_1_m0_translator:uav_writedata -> qsys_top_mm_ccb_1_m0_agent:av_writedata
	wire   [2:0] qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_burstcount;                  // qsys_top_mm_ccb_1_m0_translator:uav_burstcount -> qsys_top_mm_ccb_1_m0_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                     // rsp_mux:src_valid -> qsys_top_mm_ccb_1_m0_agent:rp_valid
	wire  [96:0] rsp_mux_src_data;                                                                      // rsp_mux:src_data -> qsys_top_mm_ccb_1_m0_agent:rp_data
	wire         rsp_mux_src_ready;                                                                     // qsys_top_mm_ccb_1_m0_agent:rp_ready -> rsp_mux:src_ready
	wire   [1:0] rsp_mux_src_channel;                                                                   // rsp_mux:src_channel -> qsys_top_mm_ccb_1_m0_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                             // rsp_mux:src_startofpacket -> qsys_top_mm_ccb_1_m0_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                               // rsp_mux:src_endofpacket -> qsys_top_mm_ccb_1_m0_agent:rp_endofpacket
	wire         processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // processor_clock_crossing_bridge_m0_agent:av_waitrequest -> processor_clock_crossing_bridge_m0_translator:uav_waitrequest
	wire  [31:0] processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_readdata;      // processor_clock_crossing_bridge_m0_agent:av_readdata -> processor_clock_crossing_bridge_m0_translator:uav_readdata
	wire         processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // processor_clock_crossing_bridge_m0_translator:uav_debugaccess -> processor_clock_crossing_bridge_m0_agent:av_debugaccess
	wire  [17:0] processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_address;       // processor_clock_crossing_bridge_m0_translator:uav_address -> processor_clock_crossing_bridge_m0_agent:av_address
	wire         processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_read;          // processor_clock_crossing_bridge_m0_translator:uav_read -> processor_clock_crossing_bridge_m0_agent:av_read
	wire   [3:0] processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_byteenable;    // processor_clock_crossing_bridge_m0_translator:uav_byteenable -> processor_clock_crossing_bridge_m0_agent:av_byteenable
	wire         processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // processor_clock_crossing_bridge_m0_agent:av_readdatavalid -> processor_clock_crossing_bridge_m0_translator:uav_readdatavalid
	wire         processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_lock;          // processor_clock_crossing_bridge_m0_translator:uav_lock -> processor_clock_crossing_bridge_m0_agent:av_lock
	wire         processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_write;         // processor_clock_crossing_bridge_m0_translator:uav_write -> processor_clock_crossing_bridge_m0_agent:av_write
	wire  [31:0] processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_writedata;     // processor_clock_crossing_bridge_m0_translator:uav_writedata -> processor_clock_crossing_bridge_m0_agent:av_writedata
	wire   [2:0] processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_burstcount;    // processor_clock_crossing_bridge_m0_translator:uav_burstcount -> processor_clock_crossing_bridge_m0_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                                 // rsp_mux_001:src_valid -> processor_clock_crossing_bridge_m0_agent:rp_valid
	wire  [96:0] rsp_mux_001_src_data;                                                                  // rsp_mux_001:src_data -> processor_clock_crossing_bridge_m0_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                                 // processor_clock_crossing_bridge_m0_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [1:0] rsp_mux_001_src_channel;                                                               // rsp_mux_001:src_channel -> processor_clock_crossing_bridge_m0_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                         // rsp_mux_001:src_startofpacket -> processor_clock_crossing_bridge_m0_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                           // rsp_mux_001:src_endofpacket -> processor_clock_crossing_bridge_m0_agent:rp_endofpacket
	wire  [31:0] avmm_to_esram_0_av_agent_m0_readdata;                                                  // avmm_to_esram_0_av_translator:uav_readdata -> avmm_to_esram_0_av_agent:m0_readdata
	wire         avmm_to_esram_0_av_agent_m0_waitrequest;                                               // avmm_to_esram_0_av_translator:uav_waitrequest -> avmm_to_esram_0_av_agent:m0_waitrequest
	wire         avmm_to_esram_0_av_agent_m0_debugaccess;                                               // avmm_to_esram_0_av_agent:m0_debugaccess -> avmm_to_esram_0_av_translator:uav_debugaccess
	wire  [17:0] avmm_to_esram_0_av_agent_m0_address;                                                   // avmm_to_esram_0_av_agent:m0_address -> avmm_to_esram_0_av_translator:uav_address
	wire   [3:0] avmm_to_esram_0_av_agent_m0_byteenable;                                                // avmm_to_esram_0_av_agent:m0_byteenable -> avmm_to_esram_0_av_translator:uav_byteenable
	wire         avmm_to_esram_0_av_agent_m0_read;                                                      // avmm_to_esram_0_av_agent:m0_read -> avmm_to_esram_0_av_translator:uav_read
	wire         avmm_to_esram_0_av_agent_m0_readdatavalid;                                             // avmm_to_esram_0_av_translator:uav_readdatavalid -> avmm_to_esram_0_av_agent:m0_readdatavalid
	wire         avmm_to_esram_0_av_agent_m0_lock;                                                      // avmm_to_esram_0_av_agent:m0_lock -> avmm_to_esram_0_av_translator:uav_lock
	wire  [31:0] avmm_to_esram_0_av_agent_m0_writedata;                                                 // avmm_to_esram_0_av_agent:m0_writedata -> avmm_to_esram_0_av_translator:uav_writedata
	wire         avmm_to_esram_0_av_agent_m0_write;                                                     // avmm_to_esram_0_av_agent:m0_write -> avmm_to_esram_0_av_translator:uav_write
	wire   [2:0] avmm_to_esram_0_av_agent_m0_burstcount;                                                // avmm_to_esram_0_av_agent:m0_burstcount -> avmm_to_esram_0_av_translator:uav_burstcount
	wire         avmm_to_esram_0_av_agent_rf_source_valid;                                              // avmm_to_esram_0_av_agent:rf_source_valid -> avmm_to_esram_0_av_agent_rsp_fifo:in_valid
	wire  [97:0] avmm_to_esram_0_av_agent_rf_source_data;                                               // avmm_to_esram_0_av_agent:rf_source_data -> avmm_to_esram_0_av_agent_rsp_fifo:in_data
	wire         avmm_to_esram_0_av_agent_rf_source_ready;                                              // avmm_to_esram_0_av_agent_rsp_fifo:in_ready -> avmm_to_esram_0_av_agent:rf_source_ready
	wire         avmm_to_esram_0_av_agent_rf_source_startofpacket;                                      // avmm_to_esram_0_av_agent:rf_source_startofpacket -> avmm_to_esram_0_av_agent_rsp_fifo:in_startofpacket
	wire         avmm_to_esram_0_av_agent_rf_source_endofpacket;                                        // avmm_to_esram_0_av_agent:rf_source_endofpacket -> avmm_to_esram_0_av_agent_rsp_fifo:in_endofpacket
	wire         avmm_to_esram_0_av_agent_rsp_fifo_out_valid;                                           // avmm_to_esram_0_av_agent_rsp_fifo:out_valid -> avmm_to_esram_0_av_agent:rf_sink_valid
	wire  [97:0] avmm_to_esram_0_av_agent_rsp_fifo_out_data;                                            // avmm_to_esram_0_av_agent_rsp_fifo:out_data -> avmm_to_esram_0_av_agent:rf_sink_data
	wire         avmm_to_esram_0_av_agent_rsp_fifo_out_ready;                                           // avmm_to_esram_0_av_agent:rf_sink_ready -> avmm_to_esram_0_av_agent_rsp_fifo:out_ready
	wire         avmm_to_esram_0_av_agent_rsp_fifo_out_startofpacket;                                   // avmm_to_esram_0_av_agent_rsp_fifo:out_startofpacket -> avmm_to_esram_0_av_agent:rf_sink_startofpacket
	wire         avmm_to_esram_0_av_agent_rsp_fifo_out_endofpacket;                                     // avmm_to_esram_0_av_agent_rsp_fifo:out_endofpacket -> avmm_to_esram_0_av_agent:rf_sink_endofpacket
	wire         avmm_to_esram_0_av_agent_rdata_fifo_src_valid;                                         // avmm_to_esram_0_av_agent:rdata_fifo_src_valid -> avmm_to_esram_0_av_agent:rdata_fifo_sink_valid
	wire  [33:0] avmm_to_esram_0_av_agent_rdata_fifo_src_data;                                          // avmm_to_esram_0_av_agent:rdata_fifo_src_data -> avmm_to_esram_0_av_agent:rdata_fifo_sink_data
	wire         avmm_to_esram_0_av_agent_rdata_fifo_src_ready;                                         // avmm_to_esram_0_av_agent:rdata_fifo_sink_ready -> avmm_to_esram_0_av_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                                     // cmd_mux:src_valid -> avmm_to_esram_0_av_agent:cp_valid
	wire  [96:0] cmd_mux_src_data;                                                                      // cmd_mux:src_data -> avmm_to_esram_0_av_agent:cp_data
	wire         cmd_mux_src_ready;                                                                     // avmm_to_esram_0_av_agent:cp_ready -> cmd_mux:src_ready
	wire   [1:0] cmd_mux_src_channel;                                                                   // cmd_mux:src_channel -> avmm_to_esram_0_av_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                             // cmd_mux:src_startofpacket -> avmm_to_esram_0_av_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                               // cmd_mux:src_endofpacket -> avmm_to_esram_0_av_agent:cp_endofpacket
	wire         qsys_top_mm_ccb_1_m0_agent_cp_valid;                                                   // qsys_top_mm_ccb_1_m0_agent:cp_valid -> router:sink_valid
	wire  [96:0] qsys_top_mm_ccb_1_m0_agent_cp_data;                                                    // qsys_top_mm_ccb_1_m0_agent:cp_data -> router:sink_data
	wire         qsys_top_mm_ccb_1_m0_agent_cp_ready;                                                   // router:sink_ready -> qsys_top_mm_ccb_1_m0_agent:cp_ready
	wire         qsys_top_mm_ccb_1_m0_agent_cp_startofpacket;                                           // qsys_top_mm_ccb_1_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         qsys_top_mm_ccb_1_m0_agent_cp_endofpacket;                                             // qsys_top_mm_ccb_1_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                      // router:src_valid -> cmd_demux:sink_valid
	wire  [96:0] router_src_data;                                                                       // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                      // cmd_demux:sink_ready -> router:src_ready
	wire   [1:0] router_src_channel;                                                                    // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                              // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                                // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         processor_clock_crossing_bridge_m0_agent_cp_valid;                                     // processor_clock_crossing_bridge_m0_agent:cp_valid -> router_001:sink_valid
	wire  [96:0] processor_clock_crossing_bridge_m0_agent_cp_data;                                      // processor_clock_crossing_bridge_m0_agent:cp_data -> router_001:sink_data
	wire         processor_clock_crossing_bridge_m0_agent_cp_ready;                                     // router_001:sink_ready -> processor_clock_crossing_bridge_m0_agent:cp_ready
	wire         processor_clock_crossing_bridge_m0_agent_cp_startofpacket;                             // processor_clock_crossing_bridge_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         processor_clock_crossing_bridge_m0_agent_cp_endofpacket;                               // processor_clock_crossing_bridge_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                                  // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [96:0] router_001_src_data;                                                                   // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                                  // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [1:0] router_001_src_channel;                                                                // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                          // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                            // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         avmm_to_esram_0_av_agent_rp_valid;                                                     // avmm_to_esram_0_av_agent:rp_valid -> router_002:sink_valid
	wire  [96:0] avmm_to_esram_0_av_agent_rp_data;                                                      // avmm_to_esram_0_av_agent:rp_data -> router_002:sink_data
	wire         avmm_to_esram_0_av_agent_rp_ready;                                                     // router_002:sink_ready -> avmm_to_esram_0_av_agent:rp_ready
	wire         avmm_to_esram_0_av_agent_rp_startofpacket;                                             // avmm_to_esram_0_av_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         avmm_to_esram_0_av_agent_rp_endofpacket;                                               // avmm_to_esram_0_av_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                                  // router_002:src_valid -> rsp_demux:sink_valid
	wire  [96:0] router_002_src_data;                                                                   // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                                  // rsp_demux:sink_ready -> router_002:src_ready
	wire   [1:0] router_002_src_channel;                                                                // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                          // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                            // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [96:0] cmd_demux_src0_data;                                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [1:0] cmd_demux_src0_channel;                                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                              // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [96:0] cmd_demux_001_src0_data;                                                               // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire         cmd_demux_001_src0_ready;                                                              // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [1:0] cmd_demux_001_src0_channel;                                                            // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                      // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                        // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [96:0] rsp_demux_src0_data;                                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [1:0] rsp_demux_src0_channel;                                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                                  // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [96:0] rsp_demux_src1_data;                                                                   // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_src1_ready;                                                                  // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [1:0] rsp_demux_src1_channel;                                                                // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_startofpacket;                                                          // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_src1_endofpacket;                                                            // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) qsys_top_mm_ccb_1_m0_translator (
		.clk                    (avmm_to_esram_0_esram_clk_clk),                                           //   input,   width = 1,                       clk.clk
		.reset                  (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,                     reset.reset
		.uav_address            (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_address),       //  output,  width = 18, avalon_universal_master_0.address
		.uav_burstcount         (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (qsys_top_mm_ccb_1_m0_address),                                            //   input,  width = 18,      avalon_anti_master_0.address
		.av_waitrequest         (qsys_top_mm_ccb_1_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (qsys_top_mm_ccb_1_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (qsys_top_mm_ccb_1_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (qsys_top_mm_ccb_1_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (qsys_top_mm_ccb_1_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (qsys_top_mm_ccb_1_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (qsys_top_mm_ccb_1_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (qsys_top_mm_ccb_1_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (qsys_top_mm_ccb_1_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                    // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                    // (terminated),                                        
		.av_chipselect          (1'b0),                                                                    // (terminated),                                        
		.av_lock                (1'b0),                                                                    // (terminated),                                        
		.uav_clken              (),                                                                        // (terminated),                                        
		.av_clken               (1'b1),                                                                    // (terminated),                                        
		.uav_response           (2'b00),                                                                   // (terminated),                                        
		.av_response            (),                                                                        // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                    // (terminated),                                        
		.av_writeresponsevalid  ()                                                                         // (terminated),                                        
	);

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (1),
		.WAITREQUEST_ALLOWANCE       (0)
	) processor_clock_crossing_bridge_m0_translator (
		.clk                    (avmm_to_esram_0_esram_clk_clk),                                                         //   input,   width = 1,                       clk.clk
		.reset                  (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_address),       //  output,  width = 18, avalon_universal_master_0.address
		.uav_burstcount         (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (processor_clock_crossing_bridge_m0_address),                                            //   input,  width = 18,      avalon_anti_master_0.address
		.av_waitrequest         (processor_clock_crossing_bridge_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (processor_clock_crossing_bridge_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (processor_clock_crossing_bridge_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (processor_clock_crossing_bridge_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (processor_clock_crossing_bridge_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (processor_clock_crossing_bridge_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (processor_clock_crossing_bridge_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (processor_clock_crossing_bridge_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (processor_clock_crossing_bridge_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                                  // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                                  // (terminated),                                        
		.av_chipselect          (1'b0),                                                                                  // (terminated),                                        
		.av_lock                (1'b0),                                                                                  // (terminated),                                        
		.uav_clken              (),                                                                                      // (terminated),                                        
		.av_clken               (1'b1),                                                                                  // (terminated),                                        
		.uav_response           (2'b00),                                                                                 // (terminated),                                        
		.av_response            (),                                                                                      // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                                  // (terminated),                                        
		.av_writeresponsevalid  ()                                                                                       // (terminated),                                        
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (1)
	) avmm_to_esram_0_av_translator (
		.clk                    (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,                      clk.clk
		.reset                  (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (avmm_to_esram_0_av_agent_m0_address),                               //   input,  width = 18, avalon_universal_slave_0.address
		.uav_burstcount         (avmm_to_esram_0_av_agent_m0_burstcount),                            //   input,   width = 3,                         .burstcount
		.uav_read               (avmm_to_esram_0_av_agent_m0_read),                                  //   input,   width = 1,                         .read
		.uav_write              (avmm_to_esram_0_av_agent_m0_write),                                 //   input,   width = 1,                         .write
		.uav_waitrequest        (avmm_to_esram_0_av_agent_m0_waitrequest),                           //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (avmm_to_esram_0_av_agent_m0_readdatavalid),                         //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (avmm_to_esram_0_av_agent_m0_byteenable),                            //   input,   width = 4,                         .byteenable
		.uav_readdata           (avmm_to_esram_0_av_agent_m0_readdata),                              //  output,  width = 32,                         .readdata
		.uav_writedata          (avmm_to_esram_0_av_agent_m0_writedata),                             //   input,  width = 32,                         .writedata
		.uav_lock               (avmm_to_esram_0_av_agent_m0_lock),                                  //   input,   width = 1,                         .lock
		.uav_debugaccess        (avmm_to_esram_0_av_agent_m0_debugaccess),                           //   input,   width = 1,                         .debugaccess
		.av_address             (avmm_to_esram_0_av_address),                                        //  output,  width = 16,      avalon_anti_slave_0.address
		.av_write               (avmm_to_esram_0_av_write),                                          //  output,   width = 1,                         .write
		.av_read                (avmm_to_esram_0_av_read),                                           //  output,   width = 1,                         .read
		.av_readdata            (avmm_to_esram_0_av_readdata),                                       //   input,  width = 32,                         .readdata
		.av_writedata           (avmm_to_esram_0_av_writedata),                                      //  output,  width = 32,                         .writedata
		.av_waitrequest         (avmm_to_esram_0_av_waitrequest),                                    //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                                  // (terminated),                                       
		.av_burstcount          (),                                                                  // (terminated),                                       
		.av_byteenable          (),                                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                                  // (terminated),                                       
		.av_lock                (),                                                                  // (terminated),                                       
		.av_chipselect          (),                                                                  // (terminated),                                       
		.av_clken               (),                                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                                              // (terminated),                                       
		.av_debugaccess         (),                                                                  // (terminated),                                       
		.av_outputenable        (),                                                                  // (terminated),                                       
		.uav_response           (),                                                                  // (terminated),                                       
		.av_response            (2'b00),                                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                               // (terminated),                                       
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (96),
		.PKT_DOMAIN_H              (95),
		.PKT_DOMAIN_L              (94),
		.PKT_SNOOP_H               (93),
		.PKT_SNOOP_L               (90),
		.PKT_BARRIER_H             (89),
		.PKT_BARRIER_L             (88),
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_QOS_H                 (72),
		.PKT_QOS_L                 (72),
		.PKT_DATA_SIDEBAND_H       (70),
		.PKT_DATA_SIDEBAND_L       (70),
		.PKT_ADDR_SIDEBAND_H       (69),
		.PKT_ADDR_SIDEBAND_L       (69),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_CACHE_H               (82),
		.PKT_CACHE_L               (79),
		.PKT_THREAD_ID_H           (75),
		.PKT_THREAD_ID_L           (75),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (74),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) qsys_top_mm_ccb_1_m0_agent (
		.clk                   (avmm_to_esram_0_esram_clk_clk),                                           //   input,   width = 1,       clk.clk
		.reset                 (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.av_address            (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_address),       //   input,  width = 18,        av.address
		.av_write              (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (qsys_top_mm_ccb_1_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (qsys_top_mm_ccb_1_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (qsys_top_mm_ccb_1_m0_agent_cp_data),                                      //  output,  width = 97,          .data
		.cp_startofpacket      (qsys_top_mm_ccb_1_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (qsys_top_mm_ccb_1_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (qsys_top_mm_ccb_1_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (rsp_mux_src_valid),                                                       //   input,   width = 1,        rp.valid
		.rp_data               (rsp_mux_src_data),                                                        //   input,  width = 97,          .data
		.rp_channel            (rsp_mux_src_channel),                                                     //   input,   width = 2,          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                               //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                 //   input,   width = 1,          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                       //  output,   width = 1,          .ready
		.av_response           (),                                                                        // (terminated),                        
		.av_writeresponsevalid ()                                                                         // (terminated),                        
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (96),
		.PKT_DOMAIN_H              (95),
		.PKT_DOMAIN_L              (94),
		.PKT_SNOOP_H               (93),
		.PKT_SNOOP_L               (90),
		.PKT_BARRIER_H             (89),
		.PKT_BARRIER_L             (88),
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_QOS_H                 (72),
		.PKT_QOS_L                 (72),
		.PKT_DATA_SIDEBAND_H       (70),
		.PKT_DATA_SIDEBAND_L       (70),
		.PKT_ADDR_SIDEBAND_H       (69),
		.PKT_ADDR_SIDEBAND_L       (69),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_CACHE_H               (82),
		.PKT_CACHE_L               (79),
		.PKT_THREAD_ID_H           (75),
		.PKT_THREAD_ID_L           (75),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (74),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (1)
	) processor_clock_crossing_bridge_m0_agent (
		.clk                   (avmm_to_esram_0_esram_clk_clk),                                                         //   input,   width = 1,       clk.clk
		.reset                 (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1, clk_reset.reset
		.av_address            (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_address),       //   input,  width = 18,        av.address
		.av_write              (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (processor_clock_crossing_bridge_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (processor_clock_crossing_bridge_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (processor_clock_crossing_bridge_m0_agent_cp_data),                                      //  output,  width = 97,          .data
		.cp_startofpacket      (processor_clock_crossing_bridge_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (processor_clock_crossing_bridge_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (processor_clock_crossing_bridge_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                 //   input,   width = 1,        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                  //   input,  width = 97,          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                               //   input,   width = 2,          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                         //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                           //   input,   width = 1,          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                 //  output,   width = 1,          .ready
		.av_response           (),                                                                                      // (terminated),                        
		.av_writeresponsevalid ()                                                                                       // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (87),
		.PKT_ORI_BURST_SIZE_L      (85),
		.PKT_RESPONSE_STATUS_H     (84),
		.PKT_RESPONSE_STATUS_L     (83),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (71),
		.PKT_PROTECTION_H          (78),
		.PKT_PROTECTION_L          (76),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (74),
		.PKT_DEST_ID_L             (74),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (1)
	) avmm_to_esram_0_av_agent (
		.clk                     (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,             clk.clk
		.reset                   (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1,       clk_reset.reset
		.m0_address              (avmm_to_esram_0_av_agent_m0_address),                               //  output,  width = 18,              m0.address
		.m0_burstcount           (avmm_to_esram_0_av_agent_m0_burstcount),                            //  output,   width = 3,                .burstcount
		.m0_byteenable           (avmm_to_esram_0_av_agent_m0_byteenable),                            //  output,   width = 4,                .byteenable
		.m0_debugaccess          (avmm_to_esram_0_av_agent_m0_debugaccess),                           //  output,   width = 1,                .debugaccess
		.m0_lock                 (avmm_to_esram_0_av_agent_m0_lock),                                  //  output,   width = 1,                .lock
		.m0_readdata             (avmm_to_esram_0_av_agent_m0_readdata),                              //   input,  width = 32,                .readdata
		.m0_readdatavalid        (avmm_to_esram_0_av_agent_m0_readdatavalid),                         //   input,   width = 1,                .readdatavalid
		.m0_read                 (avmm_to_esram_0_av_agent_m0_read),                                  //  output,   width = 1,                .read
		.m0_waitrequest          (avmm_to_esram_0_av_agent_m0_waitrequest),                           //   input,   width = 1,                .waitrequest
		.m0_writedata            (avmm_to_esram_0_av_agent_m0_writedata),                             //  output,  width = 32,                .writedata
		.m0_write                (avmm_to_esram_0_av_agent_m0_write),                                 //  output,   width = 1,                .write
		.rp_endofpacket          (avmm_to_esram_0_av_agent_rp_endofpacket),                           //  output,   width = 1,              rp.endofpacket
		.rp_ready                (avmm_to_esram_0_av_agent_rp_ready),                                 //   input,   width = 1,                .ready
		.rp_valid                (avmm_to_esram_0_av_agent_rp_valid),                                 //  output,   width = 1,                .valid
		.rp_data                 (avmm_to_esram_0_av_agent_rp_data),                                  //  output,  width = 97,                .data
		.rp_startofpacket        (avmm_to_esram_0_av_agent_rp_startofpacket),                         //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                 //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                 //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                                  //   input,  width = 97,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                         //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                           //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                               //   input,   width = 2,                .channel
		.rf_sink_ready           (avmm_to_esram_0_av_agent_rsp_fifo_out_ready),                       //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (avmm_to_esram_0_av_agent_rsp_fifo_out_valid),                       //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (avmm_to_esram_0_av_agent_rsp_fifo_out_startofpacket),               //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (avmm_to_esram_0_av_agent_rsp_fifo_out_endofpacket),                 //   input,   width = 1,                .endofpacket
		.rf_sink_data            (avmm_to_esram_0_av_agent_rsp_fifo_out_data),                        //   input,  width = 98,                .data
		.rf_source_ready         (avmm_to_esram_0_av_agent_rf_source_ready),                          //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (avmm_to_esram_0_av_agent_rf_source_valid),                          //  output,   width = 1,                .valid
		.rf_source_startofpacket (avmm_to_esram_0_av_agent_rf_source_startofpacket),                  //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (avmm_to_esram_0_av_agent_rf_source_endofpacket),                    //  output,   width = 1,                .endofpacket
		.rf_source_data          (avmm_to_esram_0_av_agent_rf_source_data),                           //  output,  width = 98,                .data
		.rdata_fifo_sink_ready   (avmm_to_esram_0_av_agent_rdata_fifo_src_ready),                     //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avmm_to_esram_0_av_agent_rdata_fifo_src_valid),                     //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (avmm_to_esram_0_av_agent_rdata_fifo_src_data),                      //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (avmm_to_esram_0_av_agent_rdata_fifo_src_ready),                     //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avmm_to_esram_0_av_agent_rdata_fifo_src_valid),                     //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (avmm_to_esram_0_av_agent_rdata_fifo_src_data),                      //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                             // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                              // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                               // (terminated),                              
	);

	qsys_top_altera_avalon_sc_fifo_1930_k6mjsxi #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (1)
	) avmm_to_esram_0_av_agent_rsp_fifo (
		.clk               (avmm_to_esram_0_esram_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset             (qsys_top_mm_ccb_1_m0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (avmm_to_esram_0_av_agent_rf_source_data),                //   input,  width = 98,        in.data
		.in_valid          (avmm_to_esram_0_av_agent_rf_source_valid),               //   input,   width = 1,          .valid
		.in_ready          (avmm_to_esram_0_av_agent_rf_source_ready),               //  output,   width = 1,          .ready
		.in_startofpacket  (avmm_to_esram_0_av_agent_rf_source_startofpacket),       //   input,   width = 1,          .startofpacket
		.in_endofpacket    (avmm_to_esram_0_av_agent_rf_source_endofpacket),         //   input,   width = 1,          .endofpacket
		.out_data          (avmm_to_esram_0_av_agent_rsp_fifo_out_data),             //  output,  width = 98,       out.data
		.out_valid         (avmm_to_esram_0_av_agent_rsp_fifo_out_valid),            //  output,   width = 1,          .valid
		.out_ready         (avmm_to_esram_0_av_agent_rsp_fifo_out_ready),            //   input,   width = 1,          .ready
		.out_startofpacket (avmm_to_esram_0_av_agent_rsp_fifo_out_startofpacket),    //  output,   width = 1,          .startofpacket
		.out_endofpacket   (avmm_to_esram_0_av_agent_rsp_fifo_out_endofpacket),      //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated),                        
		.csr_read          (1'b0),                                                   // (terminated),                        
		.csr_write         (1'b0),                                                   // (terminated),                        
		.csr_readdata      (),                                                       // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated),                        
		.almost_full_data  (),                                                       // (terminated),                        
		.almost_empty_data (),                                                       // (terminated),                        
		.in_empty          (1'b0),                                                   // (terminated),                        
		.out_empty         (),                                                       // (terminated),                        
		.in_error          (1'b0),                                                   // (terminated),                        
		.out_error         (),                                                       // (terminated),                        
		.in_channel        (1'b0),                                                   // (terminated),                        
		.out_channel       ()                                                        // (terminated),                        
	);

	qsys_top_altera_merlin_router_1920_tqzuepq router (
		.sink_ready         (qsys_top_mm_ccb_1_m0_agent_cp_ready),                               //  output,   width = 1,      sink.ready
		.sink_valid         (qsys_top_mm_ccb_1_m0_agent_cp_valid),                               //   input,   width = 1,          .valid
		.sink_data          (qsys_top_mm_ccb_1_m0_agent_cp_data),                                //   input,  width = 97,          .data
		.sink_startofpacket (qsys_top_mm_ccb_1_m0_agent_cp_startofpacket),                       //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (qsys_top_mm_ccb_1_m0_agent_cp_endofpacket),                         //   input,   width = 1,          .endofpacket
		.clk                (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset              (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                  //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                                                  //  output,   width = 1,          .valid
		.src_data           (router_src_data),                                                   //  output,  width = 97,          .data
		.src_channel        (router_src_channel),                                                //  output,   width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                                          //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                             //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_tqzuepq router_001 (
		.sink_ready         (processor_clock_crossing_bridge_m0_agent_cp_ready),                 //  output,   width = 1,      sink.ready
		.sink_valid         (processor_clock_crossing_bridge_m0_agent_cp_valid),                 //   input,   width = 1,          .valid
		.sink_data          (processor_clock_crossing_bridge_m0_agent_cp_data),                  //   input,  width = 97,          .data
		.sink_startofpacket (processor_clock_crossing_bridge_m0_agent_cp_startofpacket),         //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (processor_clock_crossing_bridge_m0_agent_cp_endofpacket),           //   input,   width = 1,          .endofpacket
		.clk                (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset              (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                              //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                              //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                                               //  output,  width = 97,          .data
		.src_channel        (router_001_src_channel),                                            //  output,   width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                      //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                         //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_sfrweeq router_002 (
		.sink_ready         (avmm_to_esram_0_av_agent_rp_ready),                                 //  output,   width = 1,      sink.ready
		.sink_valid         (avmm_to_esram_0_av_agent_rp_valid),                                 //   input,   width = 1,          .valid
		.sink_data          (avmm_to_esram_0_av_agent_rp_data),                                  //   input,  width = 97,          .data
		.sink_startofpacket (avmm_to_esram_0_av_agent_rp_startofpacket),                         //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (avmm_to_esram_0_av_agent_rp_endofpacket),                           //   input,   width = 1,          .endofpacket
		.clk                (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset              (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                              //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                              //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                                               //  output,  width = 97,          .data
		.src_channel        (router_002_src_channel),                                            //  output,   width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                      //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                         //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_bws7uly cmd_demux (
		.clk                (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset              (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_src_ready),                                                  //  output,   width = 1,      sink.ready
		.sink_channel       (router_src_channel),                                                //   input,   width = 2,          .channel
		.sink_data          (router_src_data),                                                   //   input,  width = 97,          .data
		.sink_startofpacket (router_src_startofpacket),                                          //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                            //   input,   width = 1,          .endofpacket
		.sink_valid         (router_src_valid),                                                  //   input,   width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                              //   input,   width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                              //  output,   width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                               //  output,  width = 97,          .data
		.src0_channel       (cmd_demux_src0_channel),                                            //  output,   width = 2,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                      //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                         //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_bws7uly cmd_demux_001 (
		.clk                (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset              (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                              //  output,   width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                            //   input,   width = 2,          .channel
		.sink_data          (router_001_src_data),                                               //   input,  width = 97,          .data
		.sink_startofpacket (router_001_src_startofpacket),                                      //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                        //   input,   width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                              //   input,   width = 1,          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                          //   input,   width = 1,      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                          //  output,   width = 1,          .valid
		.src0_data          (cmd_demux_001_src0_data),                                           //  output,  width = 97,          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                        //  output,   width = 2,          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                  //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                     //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_gejqeai cmd_mux (
		.clk                 (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset               (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                 //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                 //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                  //  output,  width = 97,          .data
		.src_channel         (cmd_mux_src_channel),                                               //  output,   width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                         //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                           //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                              //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                              //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                            //   input,   width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                                               //   input,  width = 97,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                      //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                        //   input,   width = 1,          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                          //  output,   width = 1,     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                          //   input,   width = 1,          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                        //   input,   width = 2,          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                           //   input,  width = 97,          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                  //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                                     //   input,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_oczh5ji rsp_demux (
		.clk                (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset              (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                              //  output,   width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                            //   input,   width = 2,          .channel
		.sink_data          (router_002_src_data),                                               //   input,  width = 97,          .data
		.sink_startofpacket (router_002_src_startofpacket),                                      //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                        //   input,   width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                              //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                              //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                              //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                               //  output,  width = 97,          .data
		.src0_channel       (rsp_demux_src0_channel),                                            //  output,   width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                      //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                        //  output,   width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                              //   input,   width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                              //  output,   width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                               //  output,  width = 97,          .data
		.src1_channel       (rsp_demux_src1_channel),                                            //  output,   width = 2,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                      //  output,   width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                         //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_suhnssy rsp_mux (
		.clk                 (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset               (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                 //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                 //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                  //  output,  width = 97,          .data
		.src_channel         (rsp_mux_src_channel),                                               //  output,   width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                         //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                           //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                              //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                              //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                            //   input,   width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                                               //   input,  width = 97,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                      //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                         //   input,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_suhnssy rsp_mux_001 (
		.clk                 (avmm_to_esram_0_esram_clk_clk),                                     //   input,   width = 1,       clk.clk
		.reset               (qsys_top_mm_ccb_1_m0_translator_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                             //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                             //  output,   width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                                              //  output,  width = 97,          .data
		.src_channel         (rsp_mux_001_src_channel),                                           //  output,   width = 2,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                     //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                       //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                              //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                              //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                            //   input,   width = 2,          .channel
		.sink0_data          (rsp_demux_src1_data),                                               //   input,  width = 97,          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                      //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                         //   input,   width = 1,          .endofpacket
	);

endmodule
