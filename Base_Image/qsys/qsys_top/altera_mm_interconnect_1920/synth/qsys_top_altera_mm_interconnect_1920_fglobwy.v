// qsys_top_altera_mm_interconnect_1920_fglobwy.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_1920_fglobwy (
		input  wire [5:0]  arbiter_bridge_m0_address,                             //                                 arbiter_bridge_m0.address
		output wire        arbiter_bridge_m0_waitrequest,                         //                                                  .waitrequest
		input  wire [0:0]  arbiter_bridge_m0_burstcount,                          //                                                  .burstcount
		input  wire [3:0]  arbiter_bridge_m0_byteenable,                          //                                                  .byteenable
		input  wire        arbiter_bridge_m0_read,                                //                                                  .read
		output wire [31:0] arbiter_bridge_m0_readdata,                            //                                                  .readdata
		output wire        arbiter_bridge_m0_readdatavalid,                       //                                                  .readdatavalid
		input  wire        arbiter_bridge_m0_write,                               //                                                  .write
		input  wire [31:0] arbiter_bridge_m0_writedata,                           //                                                  .writedata
		input  wire        arbiter_bridge_m0_debugaccess,                         //                                                  .debugaccess
		output wire [1:0]  PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_address,    //        PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0.address
		output wire        PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_write,      //                                                  .write
		input  wire [31:0] PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_readdata,   //                                                  .readdata
		output wire [31:0] PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_writedata,  //                                                  .writedata
		output wire        PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_chipselect, //                                                  .chipselect
		output wire [1:0]  BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_address,    //        BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0.address
		output wire        BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_write,      //                                                  .write
		input  wire [31:0] BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_readdata,   //                                                  .readdata
		output wire [31:0] BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_writedata,  //                                                  .writedata
		output wire        BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_chipselect, //                                                  .chipselect
		output wire [1:0]  system_arbiter_0_s0_address,                           //                               system_arbiter_0_s0.address
		output wire        system_arbiter_0_s0_write,                             //                                                  .write
		output wire        system_arbiter_0_s0_read,                              //                                                  .read
		input  wire [31:0] system_arbiter_0_s0_readdata,                          //                                                  .readdata
		output wire [31:0] system_arbiter_0_s0_writedata,                         //                                                  .writedata
		input  wire        system_arbiter_0_s0_waitrequest,                       //                                                  .waitrequest
		input  wire        arbiter_bridge_reset_reset_bridge_in_reset_reset,      //        arbiter_bridge_reset_reset_bridge_in_reset.reset
		input  wire        qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk  // qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip.clk
	);

	wire         arbiter_bridge_m0_translator_avalon_universal_master_0_waitrequest;          // arbiter_bridge_m0_agent:av_waitrequest -> arbiter_bridge_m0_translator:uav_waitrequest
	wire  [31:0] arbiter_bridge_m0_translator_avalon_universal_master_0_readdata;             // arbiter_bridge_m0_agent:av_readdata -> arbiter_bridge_m0_translator:uav_readdata
	wire         arbiter_bridge_m0_translator_avalon_universal_master_0_debugaccess;          // arbiter_bridge_m0_translator:uav_debugaccess -> arbiter_bridge_m0_agent:av_debugaccess
	wire   [7:0] arbiter_bridge_m0_translator_avalon_universal_master_0_address;              // arbiter_bridge_m0_translator:uav_address -> arbiter_bridge_m0_agent:av_address
	wire         arbiter_bridge_m0_translator_avalon_universal_master_0_read;                 // arbiter_bridge_m0_translator:uav_read -> arbiter_bridge_m0_agent:av_read
	wire   [3:0] arbiter_bridge_m0_translator_avalon_universal_master_0_byteenable;           // arbiter_bridge_m0_translator:uav_byteenable -> arbiter_bridge_m0_agent:av_byteenable
	wire         arbiter_bridge_m0_translator_avalon_universal_master_0_readdatavalid;        // arbiter_bridge_m0_agent:av_readdatavalid -> arbiter_bridge_m0_translator:uav_readdatavalid
	wire         arbiter_bridge_m0_translator_avalon_universal_master_0_lock;                 // arbiter_bridge_m0_translator:uav_lock -> arbiter_bridge_m0_agent:av_lock
	wire         arbiter_bridge_m0_translator_avalon_universal_master_0_write;                // arbiter_bridge_m0_translator:uav_write -> arbiter_bridge_m0_agent:av_write
	wire  [31:0] arbiter_bridge_m0_translator_avalon_universal_master_0_writedata;            // arbiter_bridge_m0_translator:uav_writedata -> arbiter_bridge_m0_agent:av_writedata
	wire   [2:0] arbiter_bridge_m0_translator_avalon_universal_master_0_burstcount;           // arbiter_bridge_m0_translator:uav_burstcount -> arbiter_bridge_m0_agent:av_burstcount
	wire  [31:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_readdata;                // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_readdata -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_readdata
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_waitrequest;             // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_waitrequest -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_waitrequest
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_debugaccess;             // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_debugaccess -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_debugaccess
	wire   [7:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_address;                 // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_address -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_address
	wire   [3:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_byteenable;              // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_byteenable -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_byteenable
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_read;                    // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_read -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_read
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_readdatavalid;           // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_readdatavalid -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_readdatavalid
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_lock;                    // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_lock -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_lock
	wire  [31:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_writedata;               // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_writedata -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_writedata
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_write;                   // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_write -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_write
	wire   [2:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_burstcount;              // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:m0_burstcount -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_translator:uav_burstcount
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_valid;            // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_source_valid -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [89:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_data;             // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_source_data -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_ready;            // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_ready -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_source_ready
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_startofpacket;    // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_source_startofpacket -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_endofpacket;      // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_source_endofpacket -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_valid;         // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_valid -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_valid
	wire  [89:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_data;          // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_data -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_data
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_ready;         // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_ready -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket; // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;   // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_valid;       // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_src_valid -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_data;        // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_src_data -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_ready;       // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:cp_valid
	wire  [88:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:cp_data
	wire         cmd_mux_src_ready;                                                           // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:cp_ready -> cmd_mux:src_ready
	wire   [2:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:cp_endofpacket
	wire  [31:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_readdata;                // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_readdata -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_readdata
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_waitrequest;             // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_waitrequest -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_waitrequest
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_debugaccess;             // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_debugaccess -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_debugaccess
	wire   [7:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_address;                 // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_address -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_address
	wire   [3:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_byteenable;              // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_byteenable -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_byteenable
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_read;                    // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_read -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_read
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_readdatavalid;           // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_readdatavalid -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_readdatavalid
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_lock;                    // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_lock -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_lock
	wire  [31:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_writedata;               // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_writedata -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_writedata
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_write;                   // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_write -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_write
	wire   [2:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_burstcount;              // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:m0_burstcount -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_translator:uav_burstcount
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_valid;            // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_source_valid -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [89:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_data;             // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_source_data -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_ready;            // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_ready -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_source_ready
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_startofpacket;    // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_source_startofpacket -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_endofpacket;      // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_source_endofpacket -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_valid;         // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_valid -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_valid
	wire  [89:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_data;          // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_data -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_data
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_ready;         // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_ready -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket; // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;   // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_valid;       // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_src_valid -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_data;        // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_src_data -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_ready;       // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:cp_valid
	wire  [88:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                       // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [2:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:cp_endofpacket
	wire  [31:0] system_arbiter_0_s0_agent_m0_readdata;                                       // system_arbiter_0_s0_translator:uav_readdata -> system_arbiter_0_s0_agent:m0_readdata
	wire         system_arbiter_0_s0_agent_m0_waitrequest;                                    // system_arbiter_0_s0_translator:uav_waitrequest -> system_arbiter_0_s0_agent:m0_waitrequest
	wire         system_arbiter_0_s0_agent_m0_debugaccess;                                    // system_arbiter_0_s0_agent:m0_debugaccess -> system_arbiter_0_s0_translator:uav_debugaccess
	wire   [7:0] system_arbiter_0_s0_agent_m0_address;                                        // system_arbiter_0_s0_agent:m0_address -> system_arbiter_0_s0_translator:uav_address
	wire   [3:0] system_arbiter_0_s0_agent_m0_byteenable;                                     // system_arbiter_0_s0_agent:m0_byteenable -> system_arbiter_0_s0_translator:uav_byteenable
	wire         system_arbiter_0_s0_agent_m0_read;                                           // system_arbiter_0_s0_agent:m0_read -> system_arbiter_0_s0_translator:uav_read
	wire         system_arbiter_0_s0_agent_m0_readdatavalid;                                  // system_arbiter_0_s0_translator:uav_readdatavalid -> system_arbiter_0_s0_agent:m0_readdatavalid
	wire         system_arbiter_0_s0_agent_m0_lock;                                           // system_arbiter_0_s0_agent:m0_lock -> system_arbiter_0_s0_translator:uav_lock
	wire  [31:0] system_arbiter_0_s0_agent_m0_writedata;                                      // system_arbiter_0_s0_agent:m0_writedata -> system_arbiter_0_s0_translator:uav_writedata
	wire         system_arbiter_0_s0_agent_m0_write;                                          // system_arbiter_0_s0_agent:m0_write -> system_arbiter_0_s0_translator:uav_write
	wire   [2:0] system_arbiter_0_s0_agent_m0_burstcount;                                     // system_arbiter_0_s0_agent:m0_burstcount -> system_arbiter_0_s0_translator:uav_burstcount
	wire         system_arbiter_0_s0_agent_rf_source_valid;                                   // system_arbiter_0_s0_agent:rf_source_valid -> system_arbiter_0_s0_agent_rsp_fifo:in_valid
	wire  [89:0] system_arbiter_0_s0_agent_rf_source_data;                                    // system_arbiter_0_s0_agent:rf_source_data -> system_arbiter_0_s0_agent_rsp_fifo:in_data
	wire         system_arbiter_0_s0_agent_rf_source_ready;                                   // system_arbiter_0_s0_agent_rsp_fifo:in_ready -> system_arbiter_0_s0_agent:rf_source_ready
	wire         system_arbiter_0_s0_agent_rf_source_startofpacket;                           // system_arbiter_0_s0_agent:rf_source_startofpacket -> system_arbiter_0_s0_agent_rsp_fifo:in_startofpacket
	wire         system_arbiter_0_s0_agent_rf_source_endofpacket;                             // system_arbiter_0_s0_agent:rf_source_endofpacket -> system_arbiter_0_s0_agent_rsp_fifo:in_endofpacket
	wire         system_arbiter_0_s0_agent_rsp_fifo_out_valid;                                // system_arbiter_0_s0_agent_rsp_fifo:out_valid -> system_arbiter_0_s0_agent:rf_sink_valid
	wire  [89:0] system_arbiter_0_s0_agent_rsp_fifo_out_data;                                 // system_arbiter_0_s0_agent_rsp_fifo:out_data -> system_arbiter_0_s0_agent:rf_sink_data
	wire         system_arbiter_0_s0_agent_rsp_fifo_out_ready;                                // system_arbiter_0_s0_agent:rf_sink_ready -> system_arbiter_0_s0_agent_rsp_fifo:out_ready
	wire         system_arbiter_0_s0_agent_rsp_fifo_out_startofpacket;                        // system_arbiter_0_s0_agent_rsp_fifo:out_startofpacket -> system_arbiter_0_s0_agent:rf_sink_startofpacket
	wire         system_arbiter_0_s0_agent_rsp_fifo_out_endofpacket;                          // system_arbiter_0_s0_agent_rsp_fifo:out_endofpacket -> system_arbiter_0_s0_agent:rf_sink_endofpacket
	wire         system_arbiter_0_s0_agent_rdata_fifo_src_valid;                              // system_arbiter_0_s0_agent:rdata_fifo_src_valid -> system_arbiter_0_s0_agent:rdata_fifo_sink_valid
	wire  [33:0] system_arbiter_0_s0_agent_rdata_fifo_src_data;                               // system_arbiter_0_s0_agent:rdata_fifo_src_data -> system_arbiter_0_s0_agent:rdata_fifo_sink_data
	wire         system_arbiter_0_s0_agent_rdata_fifo_src_ready;                              // system_arbiter_0_s0_agent:rdata_fifo_sink_ready -> system_arbiter_0_s0_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> system_arbiter_0_s0_agent:cp_valid
	wire  [88:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> system_arbiter_0_s0_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                       // system_arbiter_0_s0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [2:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> system_arbiter_0_s0_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> system_arbiter_0_s0_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> system_arbiter_0_s0_agent:cp_endofpacket
	wire         arbiter_bridge_m0_agent_cp_valid;                                            // arbiter_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [88:0] arbiter_bridge_m0_agent_cp_data;                                             // arbiter_bridge_m0_agent:cp_data -> router:sink_data
	wire         arbiter_bridge_m0_agent_cp_ready;                                            // router:sink_ready -> arbiter_bridge_m0_agent:cp_ready
	wire         arbiter_bridge_m0_agent_cp_startofpacket;                                    // arbiter_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         arbiter_bridge_m0_agent_cp_endofpacket;                                      // arbiter_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_valid;                   // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rp_valid -> router_001:sink_valid
	wire  [88:0] pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_data;                    // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rp_data -> router_001:sink_data
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_ready;                   // router_001:sink_ready -> PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rp_ready
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_startofpacket;           // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_endofpacket;             // PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                        // router_001:src_valid -> rsp_demux:sink_valid
	wire  [88:0] router_001_src_data;                                                         // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                        // rsp_demux:sink_ready -> router_001:src_ready
	wire   [2:0] router_001_src_channel;                                                      // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                                // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_valid;                   // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rp_valid -> router_002:sink_valid
	wire  [88:0] bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_data;                    // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rp_data -> router_002:sink_data
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_ready;                   // router_002:sink_ready -> BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rp_ready
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_startofpacket;           // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_endofpacket;             // BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                        // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [88:0] router_002_src_data;                                                         // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                        // rsp_demux_001:sink_ready -> router_002:src_ready
	wire   [2:0] router_002_src_channel;                                                      // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                                // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         system_arbiter_0_s0_agent_rp_valid;                                          // system_arbiter_0_s0_agent:rp_valid -> router_003:sink_valid
	wire  [88:0] system_arbiter_0_s0_agent_rp_data;                                           // system_arbiter_0_s0_agent:rp_data -> router_003:sink_data
	wire         system_arbiter_0_s0_agent_rp_ready;                                          // router_003:sink_ready -> system_arbiter_0_s0_agent:rp_ready
	wire         system_arbiter_0_s0_agent_rp_startofpacket;                                  // system_arbiter_0_s0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         system_arbiter_0_s0_agent_rp_endofpacket;                                    // system_arbiter_0_s0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                        // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [88:0] router_003_src_data;                                                         // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                        // rsp_demux_002:sink_ready -> router_003:src_ready
	wire   [2:0] router_003_src_channel;                                                      // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                                // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_src_valid;                                                            // router:src_valid -> arbiter_bridge_m0_limiter:cmd_sink_valid
	wire  [88:0] router_src_data;                                                             // router:src_data -> arbiter_bridge_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                            // arbiter_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [2:0] router_src_channel;                                                          // router:src_channel -> arbiter_bridge_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                    // router:src_startofpacket -> arbiter_bridge_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                      // router:src_endofpacket -> arbiter_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [88:0] arbiter_bridge_m0_limiter_cmd_src_data;                                      // arbiter_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         arbiter_bridge_m0_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> arbiter_bridge_m0_limiter:cmd_src_ready
	wire   [2:0] arbiter_bridge_m0_limiter_cmd_src_channel;                                   // arbiter_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         arbiter_bridge_m0_limiter_cmd_src_startofpacket;                             // arbiter_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         arbiter_bridge_m0_limiter_cmd_src_endofpacket;                               // arbiter_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> arbiter_bridge_m0_limiter:rsp_sink_valid
	wire  [88:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> arbiter_bridge_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                           // arbiter_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [2:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> arbiter_bridge_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> arbiter_bridge_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> arbiter_bridge_m0_limiter:rsp_sink_endofpacket
	wire         arbiter_bridge_m0_limiter_rsp_src_valid;                                     // arbiter_bridge_m0_limiter:rsp_src_valid -> arbiter_bridge_m0_agent:rp_valid
	wire  [88:0] arbiter_bridge_m0_limiter_rsp_src_data;                                      // arbiter_bridge_m0_limiter:rsp_src_data -> arbiter_bridge_m0_agent:rp_data
	wire         arbiter_bridge_m0_limiter_rsp_src_ready;                                     // arbiter_bridge_m0_agent:rp_ready -> arbiter_bridge_m0_limiter:rsp_src_ready
	wire   [2:0] arbiter_bridge_m0_limiter_rsp_src_channel;                                   // arbiter_bridge_m0_limiter:rsp_src_channel -> arbiter_bridge_m0_agent:rp_channel
	wire         arbiter_bridge_m0_limiter_rsp_src_startofpacket;                             // arbiter_bridge_m0_limiter:rsp_src_startofpacket -> arbiter_bridge_m0_agent:rp_startofpacket
	wire         arbiter_bridge_m0_limiter_rsp_src_endofpacket;                               // arbiter_bridge_m0_limiter:rsp_src_endofpacket -> arbiter_bridge_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [88:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                        // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [2:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [88:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                        // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [2:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                        // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [88:0] cmd_demux_src2_data;                                                         // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                        // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [2:0] cmd_demux_src2_channel;                                                      // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                  // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [88:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                        // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [2:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [88:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                    // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [2:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [88:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                    // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [2:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire   [2:0] arbiter_bridge_m0_limiter_cmd_valid_data;                                    // arbiter_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (6),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (8),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) arbiter_bridge_m0_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                //   input,   width = 1,                       clk.clk
		.reset                  (arbiter_bridge_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (arbiter_bridge_m0_translator_avalon_universal_master_0_address),       //  output,   width = 8, avalon_universal_master_0.address
		.uav_burstcount         (arbiter_bridge_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (arbiter_bridge_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (arbiter_bridge_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (arbiter_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (arbiter_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (arbiter_bridge_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (arbiter_bridge_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (arbiter_bridge_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (arbiter_bridge_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (arbiter_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (arbiter_bridge_m0_address),                                            //   input,   width = 6,      avalon_anti_master_0.address
		.av_waitrequest         (arbiter_bridge_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (arbiter_bridge_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (arbiter_bridge_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (arbiter_bridge_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (arbiter_bridge_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (arbiter_bridge_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (arbiter_bridge_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (arbiter_bridge_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (arbiter_bridge_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                 // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                 // (terminated),                                        
		.av_chipselect          (1'b0),                                                                 // (terminated),                                        
		.av_lock                (1'b0),                                                                 // (terminated),                                        
		.uav_clken              (),                                                                     // (terminated),                                        
		.av_clken               (1'b1),                                                                 // (terminated),                                        
		.uav_response           (2'b00),                                                                // (terminated),                                        
		.av_response            (),                                                                     // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                 // (terminated),                                        
		.av_writeresponsevalid  ()                                                                      // (terminated),                                        
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) pcie_to_bmc_irq_generator_0_avalon_slave_0_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),             //   input,   width = 1,                      clk.clk
		.reset                  (arbiter_bridge_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1,                    reset.reset
		.uav_address            (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_address),       //   input,   width = 8, avalon_universal_slave_0.address
		.uav_burstcount         (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_address),                //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_write),                  //  output,   width = 1,                         .write
		.av_readdata            (PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_chipselect          (PCIe_to_BMC_IRQ_Generator_0_avalon_slave_0_chipselect),             //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                  // (terminated),                                       
		.av_begintransfer       (),                                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                                  // (terminated),                                       
		.av_burstcount          (),                                                                  // (terminated),                                       
		.av_byteenable          (),                                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                              // (terminated),                                       
		.av_waitrequest         (1'b0),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                                  // (terminated),                                       
		.av_lock                (),                                                                  // (terminated),                                       
		.av_clken               (),                                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                                              // (terminated),                                       
		.av_debugaccess         (),                                                                  // (terminated),                                       
		.av_outputenable        (),                                                                  // (terminated),                                       
		.uav_response           (),                                                                  // (terminated),                                       
		.av_response            (2'b00),                                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                               // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) bmc_to_pcie_irq_generator_0_avalon_slave_0_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),             //   input,   width = 1,                      clk.clk
		.reset                  (arbiter_bridge_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1,                    reset.reset
		.uav_address            (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_address),       //   input,   width = 8, avalon_universal_slave_0.address
		.uav_burstcount         (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_address),                //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_write),                  //  output,   width = 1,                         .write
		.av_readdata            (BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_writedata),              //  output,  width = 32,                         .writedata
		.av_chipselect          (BMC_to_PCIe_IRQ_Generator_0_avalon_slave_0_chipselect),             //  output,   width = 1,                         .chipselect
		.av_read                (),                                                                  // (terminated),                                       
		.av_begintransfer       (),                                                                  // (terminated),                                       
		.av_beginbursttransfer  (),                                                                  // (terminated),                                       
		.av_burstcount          (),                                                                  // (terminated),                                       
		.av_byteenable          (),                                                                  // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                              // (terminated),                                       
		.av_waitrequest         (1'b0),                                                              // (terminated),                                       
		.av_writebyteenable     (),                                                                  // (terminated),                                       
		.av_lock                (),                                                                  // (terminated),                                       
		.av_clken               (),                                                                  // (terminated),                                       
		.uav_clken              (1'b0),                                                              // (terminated),                                       
		.av_debugaccess         (),                                                                  // (terminated),                                       
		.av_outputenable        (),                                                                  // (terminated),                                       
		.uav_response           (),                                                                  // (terminated),                                       
		.av_response            (2'b00),                                                             // (terminated),                                       
		.uav_writeresponsevalid (),                                                                  // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                               // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (8),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) system_arbiter_0_s0_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,                      clk.clk
		.reset                  (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,                    reset.reset
		.uav_address            (system_arbiter_0_s0_agent_m0_address),                  //   input,   width = 8, avalon_universal_slave_0.address
		.uav_burstcount         (system_arbiter_0_s0_agent_m0_burstcount),               //   input,   width = 3,                         .burstcount
		.uav_read               (system_arbiter_0_s0_agent_m0_read),                     //   input,   width = 1,                         .read
		.uav_write              (system_arbiter_0_s0_agent_m0_write),                    //   input,   width = 1,                         .write
		.uav_waitrequest        (system_arbiter_0_s0_agent_m0_waitrequest),              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (system_arbiter_0_s0_agent_m0_readdatavalid),            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (system_arbiter_0_s0_agent_m0_byteenable),               //   input,   width = 4,                         .byteenable
		.uav_readdata           (system_arbiter_0_s0_agent_m0_readdata),                 //  output,  width = 32,                         .readdata
		.uav_writedata          (system_arbiter_0_s0_agent_m0_writedata),                //   input,  width = 32,                         .writedata
		.uav_lock               (system_arbiter_0_s0_agent_m0_lock),                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (system_arbiter_0_s0_agent_m0_debugaccess),              //   input,   width = 1,                         .debugaccess
		.av_address             (system_arbiter_0_s0_address),                           //  output,   width = 2,      avalon_anti_slave_0.address
		.av_write               (system_arbiter_0_s0_write),                             //  output,   width = 1,                         .write
		.av_read                (system_arbiter_0_s0_read),                              //  output,   width = 1,                         .read
		.av_readdata            (system_arbiter_0_s0_readdata),                          //   input,  width = 32,                         .readdata
		.av_writedata           (system_arbiter_0_s0_writedata),                         //  output,  width = 32,                         .writedata
		.av_waitrequest         (system_arbiter_0_s0_waitrequest),                       //   input,   width = 1,                         .waitrequest
		.av_begintransfer       (),                                                      // (terminated),                                       
		.av_beginbursttransfer  (),                                                      // (terminated),                                       
		.av_burstcount          (),                                                      // (terminated),                                       
		.av_byteenable          (),                                                      // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                  // (terminated),                                       
		.av_writebyteenable     (),                                                      // (terminated),                                       
		.av_lock                (),                                                      // (terminated),                                       
		.av_chipselect          (),                                                      // (terminated),                                       
		.av_clken               (),                                                      // (terminated),                                       
		.uav_clken              (1'b0),                                                  // (terminated),                                       
		.av_debugaccess         (),                                                      // (terminated),                                       
		.av_outputenable        (),                                                      // (terminated),                                       
		.uav_response           (),                                                      // (terminated),                                       
		.av_response            (2'b00),                                                 // (terminated),                                       
		.uav_writeresponsevalid (),                                                      // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                   // (terminated),                                       
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (88),
		.PKT_DOMAIN_H              (87),
		.PKT_DOMAIN_L              (86),
		.PKT_SNOOP_H               (85),
		.PKT_SNOOP_L               (82),
		.PKT_BARRIER_H             (81),
		.PKT_BARRIER_L             (80),
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_QOS_H                 (62),
		.PKT_QOS_L                 (62),
		.PKT_DATA_SIDEBAND_H       (60),
		.PKT_DATA_SIDEBAND_L       (60),
		.PKT_ADDR_SIDEBAND_H       (59),
		.PKT_ADDR_SIDEBAND_L       (59),
		.PKT_BURST_TYPE_H          (58),
		.PKT_BURST_TYPE_L          (57),
		.PKT_CACHE_H               (74),
		.PKT_CACHE_L               (71),
		.PKT_THREAD_ID_H           (67),
		.PKT_THREAD_ID_L           (67),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_EXCLUSIVE       (49),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) arbiter_bridge_m0_agent (
		.clk                   (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                //   input,   width = 1,       clk.clk
		.reset                 (arbiter_bridge_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1, clk_reset.reset
		.av_address            (arbiter_bridge_m0_translator_avalon_universal_master_0_address),       //   input,   width = 8,        av.address
		.av_write              (arbiter_bridge_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (arbiter_bridge_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (arbiter_bridge_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (arbiter_bridge_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (arbiter_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (arbiter_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (arbiter_bridge_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (arbiter_bridge_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (arbiter_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (arbiter_bridge_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (arbiter_bridge_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (arbiter_bridge_m0_agent_cp_data),                                      //  output,  width = 89,          .data
		.cp_startofpacket      (arbiter_bridge_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (arbiter_bridge_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (arbiter_bridge_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (arbiter_bridge_m0_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (arbiter_bridge_m0_limiter_rsp_src_data),                               //   input,  width = 89,          .data
		.rp_channel            (arbiter_bridge_m0_limiter_rsp_src_channel),                            //   input,   width = 3,          .channel
		.rp_startofpacket      (arbiter_bridge_m0_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (arbiter_bridge_m0_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (arbiter_bridge_m0_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                     // (terminated),                        
		.av_writeresponsevalid ()                                                                      // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) pcie_to_bmc_irq_generator_0_avalon_slave_0_agent (
		.clk                     (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                       //   input,   width = 1,             clk.clk
		.reset                   (arbiter_bridge_reset_reset_bridge_in_reset_reset),                            //   input,   width = 1,       clk_reset.reset
		.m0_address              (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_address),                 //  output,   width = 8,              m0.address
		.m0_burstcount           (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_data),                    //  output,  width = 89,                .data
		.rp_startofpacket        (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                           //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                           //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                                            //   input,  width = 89,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                                   //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                                     //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                         //   input,   width = 3,                .channel
		.rf_sink_ready           (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_data),          //   input,  width = 90,                .data
		.rf_source_ready         (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_data),             //  output,  width = 90,                .data
		.rdata_fifo_sink_ready   (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_data),        //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                                       // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                                        // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                                         // (terminated),                              
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                       //   input,   width = 1,       clk.clk
		.reset             (arbiter_bridge_reset_reset_bridge_in_reset_reset),                            //   input,   width = 1, clk_reset.reset
		.in_data           (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_data),             //   input,  width = 90,        in.data
		.in_valid          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 90,       out.data
		.out_valid         (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated),                        
		.csr_read          (1'b0),                                                                        // (terminated),                        
		.csr_write         (1'b0),                                                                        // (terminated),                        
		.csr_readdata      (),                                                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated),                        
		.almost_full_data  (),                                                                            // (terminated),                        
		.almost_empty_data (),                                                                            // (terminated),                        
		.in_empty          (1'b0),                                                                        // (terminated),                        
		.out_empty         (),                                                                            // (terminated),                        
		.in_error          (1'b0),                                                                        // (terminated),                        
		.out_error         (),                                                                            // (terminated),                        
		.in_channel        (1'b0),                                                                        // (terminated),                        
		.out_channel       ()                                                                             // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) bmc_to_pcie_irq_generator_0_avalon_slave_0_agent (
		.clk                     (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                       //   input,   width = 1,             clk.clk
		.reset                   (arbiter_bridge_reset_reset_bridge_in_reset_reset),                            //   input,   width = 1,       clk_reset.reset
		.m0_address              (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_address),                 //  output,   width = 8,              m0.address
		.m0_burstcount           (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_data),                    //  output,  width = 89,                .data
		.rp_startofpacket        (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                       //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                       //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                        //   input,  width = 89,                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                               //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                                 //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                     //   input,   width = 3,                .channel
		.rf_sink_ready           (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_data),          //   input,  width = 90,                .data
		.rf_source_ready         (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_data),             //  output,  width = 90,                .data
		.rdata_fifo_sink_ready   (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_data),        //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                                       // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                                        // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                                         // (terminated),                              
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                       //   input,   width = 1,       clk.clk
		.reset             (arbiter_bridge_reset_reset_bridge_in_reset_reset),                            //   input,   width = 1, clk_reset.reset
		.in_data           (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_data),             //   input,  width = 90,        in.data
		.in_valid          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_data),          //  output,  width = 90,       out.data
		.out_valid         (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated),                        
		.csr_read          (1'b0),                                                                        // (terminated),                        
		.csr_write         (1'b0),                                                                        // (terminated),                        
		.csr_readdata      (),                                                                            // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated),                        
		.almost_full_data  (),                                                                            // (terminated),                        
		.almost_empty_data (),                                                                            // (terminated),                        
		.in_empty          (1'b0),                                                                        // (terminated),                        
		.out_empty         (),                                                                            // (terminated),                        
		.in_error          (1'b0),                                                                        // (terminated),                        
		.out_error         (),                                                                            // (terminated),                        
		.in_channel        (1'b0),                                                                        // (terminated),                        
		.out_channel       ()                                                                             // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (79),
		.PKT_ORI_BURST_SIZE_L      (77),
		.PKT_RESPONSE_STATUS_H     (76),
		.PKT_RESPONSE_STATUS_L     (75),
		.PKT_BURST_SIZE_H          (56),
		.PKT_BURST_SIZE_L          (54),
		.PKT_TRANS_LOCK            (48),
		.PKT_BEGIN_BURST           (61),
		.PKT_PROTECTION_H          (70),
		.PKT_PROTECTION_L          (68),
		.PKT_BURSTWRAP_H           (53),
		.PKT_BURSTWRAP_L           (53),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_ADDR_H                (43),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (44),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.PKT_TRANS_READ            (47),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) system_arbiter_0_s0_agent (
		.clk                     (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,             clk.clk
		.reset                   (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,       clk_reset.reset
		.m0_address              (system_arbiter_0_s0_agent_m0_address),                  //  output,   width = 8,              m0.address
		.m0_burstcount           (system_arbiter_0_s0_agent_m0_burstcount),               //  output,   width = 3,                .burstcount
		.m0_byteenable           (system_arbiter_0_s0_agent_m0_byteenable),               //  output,   width = 4,                .byteenable
		.m0_debugaccess          (system_arbiter_0_s0_agent_m0_debugaccess),              //  output,   width = 1,                .debugaccess
		.m0_lock                 (system_arbiter_0_s0_agent_m0_lock),                     //  output,   width = 1,                .lock
		.m0_readdata             (system_arbiter_0_s0_agent_m0_readdata),                 //   input,  width = 32,                .readdata
		.m0_readdatavalid        (system_arbiter_0_s0_agent_m0_readdatavalid),            //   input,   width = 1,                .readdatavalid
		.m0_read                 (system_arbiter_0_s0_agent_m0_read),                     //  output,   width = 1,                .read
		.m0_waitrequest          (system_arbiter_0_s0_agent_m0_waitrequest),              //   input,   width = 1,                .waitrequest
		.m0_writedata            (system_arbiter_0_s0_agent_m0_writedata),                //  output,  width = 32,                .writedata
		.m0_write                (system_arbiter_0_s0_agent_m0_write),                    //  output,   width = 1,                .write
		.rp_endofpacket          (system_arbiter_0_s0_agent_rp_endofpacket),              //  output,   width = 1,              rp.endofpacket
		.rp_ready                (system_arbiter_0_s0_agent_rp_ready),                    //   input,   width = 1,                .ready
		.rp_valid                (system_arbiter_0_s0_agent_rp_valid),                    //  output,   width = 1,                .valid
		.rp_data                 (system_arbiter_0_s0_agent_rp_data),                     //  output,  width = 89,                .data
		.rp_startofpacket        (system_arbiter_0_s0_agent_rp_startofpacket),            //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                 //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                 //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_002_src_data),                                  //   input,  width = 89,                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                         //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                           //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                               //   input,   width = 3,                .channel
		.rf_sink_ready           (system_arbiter_0_s0_agent_rsp_fifo_out_ready),          //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (system_arbiter_0_s0_agent_rsp_fifo_out_valid),          //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (system_arbiter_0_s0_agent_rsp_fifo_out_startofpacket),  //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (system_arbiter_0_s0_agent_rsp_fifo_out_endofpacket),    //   input,   width = 1,                .endofpacket
		.rf_sink_data            (system_arbiter_0_s0_agent_rsp_fifo_out_data),           //   input,  width = 90,                .data
		.rf_source_ready         (system_arbiter_0_s0_agent_rf_source_ready),             //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (system_arbiter_0_s0_agent_rf_source_valid),             //  output,   width = 1,                .valid
		.rf_source_startofpacket (system_arbiter_0_s0_agent_rf_source_startofpacket),     //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (system_arbiter_0_s0_agent_rf_source_endofpacket),       //  output,   width = 1,                .endofpacket
		.rf_source_data          (system_arbiter_0_s0_agent_rf_source_data),              //  output,  width = 90,                .data
		.rdata_fifo_sink_ready   (system_arbiter_0_s0_agent_rdata_fifo_src_ready),        //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (system_arbiter_0_s0_agent_rdata_fifo_src_valid),        //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (system_arbiter_0_s0_agent_rdata_fifo_src_data),         //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (system_arbiter_0_s0_agent_rdata_fifo_src_ready),        //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_arbiter_0_s0_agent_rdata_fifo_src_valid),        //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (system_arbiter_0_s0_agent_rdata_fifo_src_data),         //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                 // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                  // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                   // (terminated),                              
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) system_arbiter_0_s0_agent_rsp_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset             (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.in_data           (system_arbiter_0_s0_agent_rf_source_data),              //   input,  width = 90,        in.data
		.in_valid          (system_arbiter_0_s0_agent_rf_source_valid),             //   input,   width = 1,          .valid
		.in_ready          (system_arbiter_0_s0_agent_rf_source_ready),             //  output,   width = 1,          .ready
		.in_startofpacket  (system_arbiter_0_s0_agent_rf_source_startofpacket),     //   input,   width = 1,          .startofpacket
		.in_endofpacket    (system_arbiter_0_s0_agent_rf_source_endofpacket),       //   input,   width = 1,          .endofpacket
		.out_data          (system_arbiter_0_s0_agent_rsp_fifo_out_data),           //  output,  width = 90,       out.data
		.out_valid         (system_arbiter_0_s0_agent_rsp_fifo_out_valid),          //  output,   width = 1,          .valid
		.out_ready         (system_arbiter_0_s0_agent_rsp_fifo_out_ready),          //   input,   width = 1,          .ready
		.out_startofpacket (system_arbiter_0_s0_agent_rsp_fifo_out_startofpacket),  //  output,   width = 1,          .startofpacket
		.out_endofpacket   (system_arbiter_0_s0_agent_rsp_fifo_out_endofpacket),    //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated),                        
		.csr_read          (1'b0),                                                  // (terminated),                        
		.csr_write         (1'b0),                                                  // (terminated),                        
		.csr_readdata      (),                                                      // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated),                        
		.almost_full_data  (),                                                      // (terminated),                        
		.almost_empty_data (),                                                      // (terminated),                        
		.in_empty          (1'b0),                                                  // (terminated),                        
		.out_empty         (),                                                      // (terminated),                        
		.in_error          (1'b0),                                                  // (terminated),                        
		.out_error         (),                                                      // (terminated),                        
		.in_channel        (1'b0),                                                  // (terminated),                        
		.out_channel       ()                                                       // (terminated),                        
	);

	qsys_top_altera_merlin_router_1920_eoz34ta router (
		.sink_ready         (arbiter_bridge_m0_agent_cp_ready),                      //  output,   width = 1,      sink.ready
		.sink_valid         (arbiter_bridge_m0_agent_cp_valid),                      //   input,   width = 1,          .valid
		.sink_data          (arbiter_bridge_m0_agent_cp_data),                       //   input,  width = 89,          .data
		.sink_startofpacket (arbiter_bridge_m0_agent_cp_startofpacket),              //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (arbiter_bridge_m0_agent_cp_endofpacket),                //   input,   width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset              (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                      //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                                      //  output,   width = 1,          .valid
		.src_data           (router_src_data),                                       //  output,  width = 89,          .data
		.src_channel        (router_src_channel),                                    //  output,   width = 3,          .channel
		.src_startofpacket  (router_src_startofpacket),                              //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                 //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_cdaumuq router_001 (
		.sink_ready         (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_data),          //   input,  width = 89,          .data
		.sink_startofpacket (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (pcie_to_bmc_irq_generator_0_avalon_slave_0_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),             //   input,   width = 1,       clk.clk
		.reset              (arbiter_bridge_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                                              //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                                              //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                                               //  output,  width = 89,          .data
		.src_channel        (router_001_src_channel),                                            //  output,   width = 3,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                      //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                         //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_cdaumuq router_002 (
		.sink_ready         (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_data),          //   input,  width = 89,          .data
		.sink_startofpacket (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (bmc_to_pcie_irq_generator_0_avalon_slave_0_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),             //   input,   width = 1,       clk.clk
		.reset              (arbiter_bridge_reset_reset_bridge_in_reset_reset),                  //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                                              //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                                              //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                                               //  output,  width = 89,          .data
		.src_channel        (router_002_src_channel),                                            //  output,   width = 3,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                      //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                         //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_cdaumuq router_003 (
		.sink_ready         (system_arbiter_0_s0_agent_rp_ready),                    //  output,   width = 1,      sink.ready
		.sink_valid         (system_arbiter_0_s0_agent_rp_valid),                    //   input,   width = 1,          .valid
		.sink_data          (system_arbiter_0_s0_agent_rp_data),                     //   input,  width = 89,          .data
		.sink_startofpacket (system_arbiter_0_s0_agent_rp_startofpacket),            //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (system_arbiter_0_s0_agent_rp_endofpacket),              //   input,   width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset              (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //   input,   width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                  //  output,   width = 1,          .valid
		.src_data           (router_003_src_data),                                   //  output,  width = 89,          .data
		.src_channel        (router_003_src_channel),                                //  output,   width = 3,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (66),
		.PKT_DEST_ID_L             (65),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (63),
		.PKT_BYTE_CNT_H            (52),
		.PKT_BYTE_CNT_L            (50),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (45),
		.PKT_TRANS_WRITE           (46),
		.MAX_OUTSTANDING_RESPONSES (2),
		.PIPELINED                 (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (3),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arbiter_bridge_m0_limiter (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset                  (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                      //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                      //   input,   width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                       //   input,  width = 89,          .data
		.cmd_sink_channel       (router_src_channel),                                    //   input,   width = 3,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                              //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (arbiter_bridge_m0_limiter_cmd_src_ready),               //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (arbiter_bridge_m0_limiter_cmd_src_data),                //  output,  width = 89,          .data
		.cmd_src_channel        (arbiter_bridge_m0_limiter_cmd_src_channel),             //  output,   width = 3,          .channel
		.cmd_src_startofpacket  (arbiter_bridge_m0_limiter_cmd_src_startofpacket),       //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (arbiter_bridge_m0_limiter_cmd_src_endofpacket),         //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                     //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                     //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                   //   input,   width = 3,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                      //   input,  width = 89,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                             //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                               //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (arbiter_bridge_m0_limiter_rsp_src_ready),               //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (arbiter_bridge_m0_limiter_rsp_src_valid),               //  output,   width = 1,          .valid
		.rsp_src_data           (arbiter_bridge_m0_limiter_rsp_src_data),                //  output,  width = 89,          .data
		.rsp_src_channel        (arbiter_bridge_m0_limiter_rsp_src_channel),             //  output,   width = 3,          .channel
		.rsp_src_startofpacket  (arbiter_bridge_m0_limiter_rsp_src_startofpacket),       //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (arbiter_bridge_m0_limiter_rsp_src_endofpacket),         //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (arbiter_bridge_m0_limiter_cmd_valid_data)               //  output,   width = 3, cmd_valid.data
	);

	qsys_top_altera_merlin_demultiplexer_1920_gdm3usq cmd_demux (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,        clk.clk
		.reset              (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1,  clk_reset.reset
		.sink_ready         (arbiter_bridge_m0_limiter_cmd_src_ready),               //  output,   width = 1,       sink.ready
		.sink_channel       (arbiter_bridge_m0_limiter_cmd_src_channel),             //   input,   width = 3,           .channel
		.sink_data          (arbiter_bridge_m0_limiter_cmd_src_data),                //   input,  width = 89,           .data
		.sink_startofpacket (arbiter_bridge_m0_limiter_cmd_src_startofpacket),       //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (arbiter_bridge_m0_limiter_cmd_src_endofpacket),         //   input,   width = 1,           .endofpacket
		.sink_valid         (arbiter_bridge_m0_limiter_cmd_valid_data),              //   input,   width = 3, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                  //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                  //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                                   //  output,  width = 89,           .data
		.src0_channel       (cmd_demux_src0_channel),                                //  output,   width = 3,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                          //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                            //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                  //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                  //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                                   //  output,  width = 89,           .data
		.src1_channel       (cmd_demux_src1_channel),                                //  output,   width = 3,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                          //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                            //  output,   width = 1,           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                  //   input,   width = 1,       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                  //  output,   width = 1,           .valid
		.src2_data          (cmd_demux_src2_data),                                   //  output,  width = 89,           .data
		.src2_channel       (cmd_demux_src2_channel),                                //  output,   width = 3,           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                          //  output,   width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket)                             //  output,   width = 1,           .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_odfiodi cmd_mux (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset               (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                     //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                     //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                      //  output,  width = 89,          .data
		.src_channel         (cmd_mux_src_channel),                                   //  output,   width = 3,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                             //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                               //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                  //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                  //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                //   input,   width = 3,          .channel
		.sink0_data          (cmd_demux_src0_data),                                   //   input,  width = 89,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                             //   input,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_odfiodi cmd_mux_001 (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset               (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                 //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                 //  output,   width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                  //  output,  width = 89,          .data
		.src_channel         (cmd_mux_001_src_channel),                               //  output,   width = 3,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                         //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                           //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                  //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                  //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                //   input,   width = 3,          .channel
		.sink0_data          (cmd_demux_src1_data),                                   //   input,  width = 89,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                             //   input,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_odfiodi cmd_mux_002 (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset               (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                 //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                 //  output,   width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                  //  output,  width = 89,          .data
		.src_channel         (cmd_mux_002_src_channel),                               //  output,   width = 3,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                         //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                           //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                  //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                  //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                //   input,   width = 3,          .channel
		.sink0_data          (cmd_demux_src2_data),                                   //   input,  width = 89,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                             //   input,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_ykntzea rsp_demux (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset              (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                                  //  output,   width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                                //   input,   width = 3,          .channel
		.sink_data          (router_001_src_data),                                   //   input,  width = 89,          .data
		.sink_startofpacket (router_001_src_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                            //   input,   width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                                  //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                  //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                  //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                   //  output,  width = 89,          .data
		.src0_channel       (rsp_demux_src0_channel),                                //  output,   width = 3,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                          //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                             //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_ykntzea rsp_demux_001 (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset              (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_002_src_ready),                                  //  output,   width = 1,      sink.ready
		.sink_channel       (router_002_src_channel),                                //   input,   width = 3,          .channel
		.sink_data          (router_002_src_data),                                   //   input,  width = 89,          .data
		.sink_startofpacket (router_002_src_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                            //   input,   width = 1,          .endofpacket
		.sink_valid         (router_002_src_valid),                                  //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                              //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                              //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                               //  output,  width = 89,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                            //  output,   width = 3,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                         //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_ykntzea rsp_demux_002 (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset              (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                  //  output,   width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                //   input,   width = 3,          .channel
		.sink_data          (router_003_src_data),                                   //   input,  width = 89,          .data
		.sink_startofpacket (router_003_src_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                            //   input,   width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                  //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                              //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                              //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                               //  output,  width = 89,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                            //  output,   width = 3,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                         //  output,   width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_it464ma rsp_mux (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk), //   input,   width = 1,       clk.clk
		.reset               (arbiter_bridge_reset_reset_bridge_in_reset_reset),      //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                     //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                     //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                      //  output,  width = 89,          .data
		.src_channel         (rsp_mux_src_channel),                                   //  output,   width = 3,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                             //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                               //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                  //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                  //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                //   input,   width = 3,          .channel
		.sink0_data          (rsp_demux_src0_data),                                   //   input,  width = 89,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                          //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                            //   input,   width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                              //  output,   width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                              //   input,   width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                            //   input,   width = 3,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                               //   input,  width = 89,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                      //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                        //   input,   width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                              //  output,   width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                              //   input,   width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                            //   input,   width = 3,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                               //   input,  width = 89,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                      //   input,   width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket)                         //   input,   width = 1,          .endofpacket
	);

endmodule
