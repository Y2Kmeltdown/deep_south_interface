// config_stream_ep.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module config_stream_ep #(
		parameter READY_LATENCY  = 0,
		parameter HAS_URGENT     = 0,
		parameter HAS_STATUS     = 0,
		parameter HAS_STREAM     = 0,
		parameter MAX_SIZE       = 256,
		parameter STREAM_WIDTH   = 64,
		parameter CLOCK_RATE_CLK = 0
	) (
		input  wire        clk,                    //      clk.clk
		input  wire        reset,                  //    reset.reset
		output wire        command_ready,          //  command.ready
		input  wire        command_valid,          //         .valid
		input  wire [31:0] command_data,           //         .data
		input  wire        command_startofpacket,  //         .startofpacket
		input  wire        command_endofpacket,    //         .endofpacket
		input  wire        response_ready,         // response.ready
		output wire        response_valid,         //         .valid
		output wire [31:0] response_data,          //         .data
		output wire        response_startofpacket, //         .startofpacket
		output wire        response_endofpacket    //         .endofpacket
	);

	altera_config_stream_endpoint_wrapper #(
		.READY_LATENCY  (READY_LATENCY),
		.HAS_URGENT     (HAS_URGENT),
		.HAS_STATUS     (HAS_STATUS),
		.HAS_STREAM     (HAS_STREAM),
		.MAX_SIZE       (MAX_SIZE),
		.STREAM_WIDTH   (STREAM_WIDTH),
		.CLOCK_RATE_CLK (CLOCK_RATE_CLK)
	) config_stream_ep (
		.clk                    (clk),                                                                  //   input,   width = 1,      clk.clk
		.reset                  (reset),                                                                //   input,   width = 1,    reset.reset
		.command_ready          (command_ready),                                                        //  output,   width = 1,  command.ready
		.command_valid          (command_valid),                                                        //   input,   width = 1,         .valid
		.command_data           (command_data),                                                         //   input,  width = 32,         .data
		.command_startofpacket  (command_startofpacket),                                                //   input,   width = 1,         .startofpacket
		.command_endofpacket    (command_endofpacket),                                                  //   input,   width = 1,         .endofpacket
		.response_ready         (response_ready),                                                       //   input,   width = 1, response.ready
		.response_valid         (response_valid),                                                       //  output,   width = 1,         .valid
		.response_data          (response_data),                                                        //  output,  width = 32,         .data
		.response_startofpacket (response_startofpacket),                                               //  output,   width = 1,         .startofpacket
		.response_endofpacket   (response_endofpacket),                                                 //  output,   width = 1,         .endofpacket
		.command_invalid        (),                                                                     // (terminated),                       
		.urgent_ready           (),                                                                     // (terminated),                       
		.urgent_valid           (1'b0),                                                                 // (terminated),                       
		.urgent_data            (32'b00000000000000000000000000000000),                                 // (terminated),                       
		.stream_ready           (),                                                                     // (terminated),                       
		.stream_valid           (1'b0),                                                                 // (terminated),                       
		.stream_data            (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated),                       
		.stream_active          ()                                                                      // (terminated),                       
	);

endmodule
