// s10_chip_id_altera_s10_chip_id_1911_iexnkcy.v

// This file was auto-generated from altera_s10_chip_id_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module s10_chip_id_altera_s10_chip_id_1911_iexnkcy (
		input  wire        clk,        //    clk.clk
		input  wire        reset,      //  reset.reset
		output wire        data_valid, // output.valid
		output wire [63:0] chip_id,    //       .data
		input  wire        readid      // readid.readid
	);

	wire         cf_str_ep_chip_id_inst_response_valid;         // cf_str_ep_chip_id_inst:response_valid -> chip_id_controller_inst:response_valid
	wire  [31:0] cf_str_ep_chip_id_inst_response_data;          // cf_str_ep_chip_id_inst:response_data -> chip_id_controller_inst:response_data
	wire         cf_str_ep_chip_id_inst_response_ready;         // chip_id_controller_inst:response_ready -> cf_str_ep_chip_id_inst:response_ready
	wire         cf_str_ep_chip_id_inst_response_startofpacket; // cf_str_ep_chip_id_inst:response_startofpacket -> chip_id_controller_inst:response_startofpacket
	wire         cf_str_ep_chip_id_inst_response_endofpacket;   // cf_str_ep_chip_id_inst:response_endofpacket -> chip_id_controller_inst:response_endofpacket
	wire         chip_id_controller_inst_command_valid;         // chip_id_controller_inst:command_valid -> cf_str_ep_chip_id_inst:command_valid
	wire  [31:0] chip_id_controller_inst_command_data;          // chip_id_controller_inst:command_data -> cf_str_ep_chip_id_inst:command_data
	wire         chip_id_controller_inst_command_ready;         // cf_str_ep_chip_id_inst:command_ready -> chip_id_controller_inst:command_ready
	wire         chip_id_controller_inst_command_startofpacket; // chip_id_controller_inst:command_startofpacket -> cf_str_ep_chip_id_inst:command_startofpacket
	wire         chip_id_controller_inst_command_endofpacket;   // chip_id_controller_inst:command_endofpacket -> cf_str_ep_chip_id_inst:command_endofpacket

	altera_s10_chip_id_controller chip_id_controller_inst (
		.clk                    (clk),                                           //   input,   width = 1,      clk.clk
		.reset                  (reset),                                         //   input,   width = 1,    reset.reset
		.data_valid             (data_valid),                                    //  output,   width = 1,   output.valid
		.chip_id                (chip_id),                                       //  output,  width = 64,         .data
		.readid                 (readid),                                        //   input,   width = 1,   readid.readid
		.command_ready          (chip_id_controller_inst_command_ready),         //   input,   width = 1,  command.ready
		.command_valid          (chip_id_controller_inst_command_valid),         //  output,   width = 1,         .valid
		.command_data           (chip_id_controller_inst_command_data),          //  output,  width = 32,         .data
		.command_startofpacket  (chip_id_controller_inst_command_startofpacket), //  output,   width = 1,         .startofpacket
		.command_endofpacket    (chip_id_controller_inst_command_endofpacket),   //  output,   width = 1,         .endofpacket
		.response_ready         (cf_str_ep_chip_id_inst_response_ready),         //  output,   width = 1, response.ready
		.response_valid         (cf_str_ep_chip_id_inst_response_valid),         //   input,   width = 1,         .valid
		.response_data          (cf_str_ep_chip_id_inst_response_data),          //   input,  width = 32,         .data
		.response_startofpacket (cf_str_ep_chip_id_inst_response_startofpacket), //   input,   width = 1,         .startofpacket
		.response_endofpacket   (cf_str_ep_chip_id_inst_response_endofpacket)    //   input,   width = 1,         .endofpacket
	);

	altera_config_stream_endpoint_wrapper #(
		.READY_LATENCY  (0),
		.HAS_URGENT     (0),
		.HAS_STATUS     (0),
		.HAS_STREAM     (0),
		.MAX_SIZE       (256),
		.STREAM_WIDTH   (32),
		.CLOCK_RATE_CLK (0)
	) cf_str_ep_chip_id_inst (
		.clk                    (clk),                                           //   input,   width = 1,      clk.clk
		.reset                  (reset),                                         //   input,   width = 1,    reset.reset
		.command_ready          (chip_id_controller_inst_command_ready),         //  output,   width = 1,  command.ready
		.command_valid          (chip_id_controller_inst_command_valid),         //   input,   width = 1,         .valid
		.command_data           (chip_id_controller_inst_command_data),          //   input,  width = 32,         .data
		.command_startofpacket  (chip_id_controller_inst_command_startofpacket), //   input,   width = 1,         .startofpacket
		.command_endofpacket    (chip_id_controller_inst_command_endofpacket),   //   input,   width = 1,         .endofpacket
		.response_ready         (cf_str_ep_chip_id_inst_response_ready),         //   input,   width = 1, response.ready
		.response_valid         (cf_str_ep_chip_id_inst_response_valid),         //  output,   width = 1,         .valid
		.response_data          (cf_str_ep_chip_id_inst_response_data),          //  output,  width = 32,         .data
		.response_startofpacket (cf_str_ep_chip_id_inst_response_startofpacket), //  output,   width = 1,         .startofpacket
		.response_endofpacket   (cf_str_ep_chip_id_inst_response_endofpacket),   //  output,   width = 1,         .endofpacket
		.command_invalid        (),                                              // (terminated),                       
		.urgent_ready           (),                                              // (terminated),                       
		.urgent_valid           (1'b0),                                          // (terminated),                       
		.urgent_data            (32'b00000000000000000000000000000000),          // (terminated),                       
		.stream_ready           (),                                              // (terminated),                       
		.stream_valid           (1'b0),                                          // (terminated),                       
		.stream_data            (32'b00000000000000000000000000000000),          // (terminated),                       
		.stream_active          ()                                               // (terminated),                       
	);

endmodule
