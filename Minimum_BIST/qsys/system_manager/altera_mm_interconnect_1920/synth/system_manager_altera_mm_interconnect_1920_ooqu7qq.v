// system_manager_altera_mm_interconnect_1920_ooqu7qq.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module system_manager_altera_mm_interconnect_1920_ooqu7qq (
		input  wire [10:0] reg_bridge_1_m0_address,                        //                          reg_bridge_1_m0.address
		output wire        reg_bridge_1_m0_waitrequest,                    //                                         .waitrequest
		input  wire [0:0]  reg_bridge_1_m0_burstcount,                     //                                         .burstcount
		input  wire [3:0]  reg_bridge_1_m0_byteenable,                     //                                         .byteenable
		input  wire        reg_bridge_1_m0_read,                           //                                         .read
		output wire [31:0] reg_bridge_1_m0_readdata,                       //                                         .readdata
		output wire        reg_bridge_1_m0_readdatavalid,                  //                                         .readdatavalid
		input  wire        reg_bridge_1_m0_write,                          //                                         .write
		input  wire [31:0] reg_bridge_1_m0_writedata,                      //                                         .writedata
		input  wire        reg_bridge_1_m0_debugaccess,                    //                                         .debugaccess
		output wire [7:0]  system_manager_if_reg_if_address,               //                 system_manager_if_reg_if.address
		output wire        system_manager_if_reg_if_write,                 //                                         .write
		output wire        system_manager_if_reg_if_read,                  //                                         .read
		input  wire [31:0] system_manager_if_reg_if_readdata,              //                                         .readdata
		output wire [31:0] system_manager_if_reg_if_writedata,             //                                         .writedata
		output wire [8:0]  flash_mem_buf_s1_address,                       //                         flash_mem_buf_s1.address
		output wire        flash_mem_buf_s1_write,                         //                                         .write
		input  wire [15:0] flash_mem_buf_s1_readdata,                      //                                         .readdata
		output wire [15:0] flash_mem_buf_s1_writedata,                     //                                         .writedata
		output wire [1:0]  flash_mem_buf_s1_byteenable,                    //                                         .byteenable
		output wire        flash_mem_buf_s1_chipselect,                    //                                         .chipselect
		output wire        flash_mem_buf_s1_clken,                         //                                         .clken
		input  wire        reg_bridge_1_reset_reset_bridge_in_reset_reset, // reg_bridge_1_reset_reset_bridge_in_reset.reset
		input  wire        config_clk_src_clk_clk                          //                       config_clk_src_clk.clk
	);

	wire         reg_bridge_1_m0_translator_avalon_universal_master_0_waitrequest;   // reg_bridge_1_m0_agent:av_waitrequest -> reg_bridge_1_m0_translator:uav_waitrequest
	wire  [31:0] reg_bridge_1_m0_translator_avalon_universal_master_0_readdata;      // reg_bridge_1_m0_agent:av_readdata -> reg_bridge_1_m0_translator:uav_readdata
	wire         reg_bridge_1_m0_translator_avalon_universal_master_0_debugaccess;   // reg_bridge_1_m0_translator:uav_debugaccess -> reg_bridge_1_m0_agent:av_debugaccess
	wire  [10:0] reg_bridge_1_m0_translator_avalon_universal_master_0_address;       // reg_bridge_1_m0_translator:uav_address -> reg_bridge_1_m0_agent:av_address
	wire         reg_bridge_1_m0_translator_avalon_universal_master_0_read;          // reg_bridge_1_m0_translator:uav_read -> reg_bridge_1_m0_agent:av_read
	wire   [3:0] reg_bridge_1_m0_translator_avalon_universal_master_0_byteenable;    // reg_bridge_1_m0_translator:uav_byteenable -> reg_bridge_1_m0_agent:av_byteenable
	wire         reg_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid; // reg_bridge_1_m0_agent:av_readdatavalid -> reg_bridge_1_m0_translator:uav_readdatavalid
	wire         reg_bridge_1_m0_translator_avalon_universal_master_0_lock;          // reg_bridge_1_m0_translator:uav_lock -> reg_bridge_1_m0_agent:av_lock
	wire         reg_bridge_1_m0_translator_avalon_universal_master_0_write;         // reg_bridge_1_m0_translator:uav_write -> reg_bridge_1_m0_agent:av_write
	wire  [31:0] reg_bridge_1_m0_translator_avalon_universal_master_0_writedata;     // reg_bridge_1_m0_translator:uav_writedata -> reg_bridge_1_m0_agent:av_writedata
	wire   [2:0] reg_bridge_1_m0_translator_avalon_universal_master_0_burstcount;    // reg_bridge_1_m0_translator:uav_burstcount -> reg_bridge_1_m0_agent:av_burstcount
	wire  [31:0] system_manager_if_reg_if_agent_m0_readdata;                         // system_manager_if_reg_if_translator:uav_readdata -> system_manager_if_reg_if_agent:m0_readdata
	wire         system_manager_if_reg_if_agent_m0_waitrequest;                      // system_manager_if_reg_if_translator:uav_waitrequest -> system_manager_if_reg_if_agent:m0_waitrequest
	wire         system_manager_if_reg_if_agent_m0_debugaccess;                      // system_manager_if_reg_if_agent:m0_debugaccess -> system_manager_if_reg_if_translator:uav_debugaccess
	wire  [10:0] system_manager_if_reg_if_agent_m0_address;                          // system_manager_if_reg_if_agent:m0_address -> system_manager_if_reg_if_translator:uav_address
	wire   [3:0] system_manager_if_reg_if_agent_m0_byteenable;                       // system_manager_if_reg_if_agent:m0_byteenable -> system_manager_if_reg_if_translator:uav_byteenable
	wire         system_manager_if_reg_if_agent_m0_read;                             // system_manager_if_reg_if_agent:m0_read -> system_manager_if_reg_if_translator:uav_read
	wire         system_manager_if_reg_if_agent_m0_readdatavalid;                    // system_manager_if_reg_if_translator:uav_readdatavalid -> system_manager_if_reg_if_agent:m0_readdatavalid
	wire         system_manager_if_reg_if_agent_m0_lock;                             // system_manager_if_reg_if_agent:m0_lock -> system_manager_if_reg_if_translator:uav_lock
	wire  [31:0] system_manager_if_reg_if_agent_m0_writedata;                        // system_manager_if_reg_if_agent:m0_writedata -> system_manager_if_reg_if_translator:uav_writedata
	wire         system_manager_if_reg_if_agent_m0_write;                            // system_manager_if_reg_if_agent:m0_write -> system_manager_if_reg_if_translator:uav_write
	wire   [2:0] system_manager_if_reg_if_agent_m0_burstcount;                       // system_manager_if_reg_if_agent:m0_burstcount -> system_manager_if_reg_if_translator:uav_burstcount
	wire         system_manager_if_reg_if_agent_rf_source_valid;                     // system_manager_if_reg_if_agent:rf_source_valid -> system_manager_if_reg_if_agent_rsp_fifo:in_valid
	wire  [90:0] system_manager_if_reg_if_agent_rf_source_data;                      // system_manager_if_reg_if_agent:rf_source_data -> system_manager_if_reg_if_agent_rsp_fifo:in_data
	wire         system_manager_if_reg_if_agent_rf_source_ready;                     // system_manager_if_reg_if_agent_rsp_fifo:in_ready -> system_manager_if_reg_if_agent:rf_source_ready
	wire         system_manager_if_reg_if_agent_rf_source_startofpacket;             // system_manager_if_reg_if_agent:rf_source_startofpacket -> system_manager_if_reg_if_agent_rsp_fifo:in_startofpacket
	wire         system_manager_if_reg_if_agent_rf_source_endofpacket;               // system_manager_if_reg_if_agent:rf_source_endofpacket -> system_manager_if_reg_if_agent_rsp_fifo:in_endofpacket
	wire         system_manager_if_reg_if_agent_rsp_fifo_out_valid;                  // system_manager_if_reg_if_agent_rsp_fifo:out_valid -> system_manager_if_reg_if_agent:rf_sink_valid
	wire  [90:0] system_manager_if_reg_if_agent_rsp_fifo_out_data;                   // system_manager_if_reg_if_agent_rsp_fifo:out_data -> system_manager_if_reg_if_agent:rf_sink_data
	wire         system_manager_if_reg_if_agent_rsp_fifo_out_ready;                  // system_manager_if_reg_if_agent:rf_sink_ready -> system_manager_if_reg_if_agent_rsp_fifo:out_ready
	wire         system_manager_if_reg_if_agent_rsp_fifo_out_startofpacket;          // system_manager_if_reg_if_agent_rsp_fifo:out_startofpacket -> system_manager_if_reg_if_agent:rf_sink_startofpacket
	wire         system_manager_if_reg_if_agent_rsp_fifo_out_endofpacket;            // system_manager_if_reg_if_agent_rsp_fifo:out_endofpacket -> system_manager_if_reg_if_agent:rf_sink_endofpacket
	wire         system_manager_if_reg_if_agent_rdata_fifo_src_valid;                // system_manager_if_reg_if_agent:rdata_fifo_src_valid -> system_manager_if_reg_if_agent:rdata_fifo_sink_valid
	wire  [33:0] system_manager_if_reg_if_agent_rdata_fifo_src_data;                 // system_manager_if_reg_if_agent:rdata_fifo_src_data -> system_manager_if_reg_if_agent:rdata_fifo_sink_data
	wire         system_manager_if_reg_if_agent_rdata_fifo_src_ready;                // system_manager_if_reg_if_agent:rdata_fifo_sink_ready -> system_manager_if_reg_if_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> system_manager_if_reg_if_agent:cp_valid
	wire  [89:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> system_manager_if_reg_if_agent:cp_data
	wire         cmd_mux_src_ready;                                                  // system_manager_if_reg_if_agent:cp_ready -> cmd_mux:src_ready
	wire   [1:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> system_manager_if_reg_if_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> system_manager_if_reg_if_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> system_manager_if_reg_if_agent:cp_endofpacket
	wire  [15:0] flash_mem_buf_s1_agent_m0_readdata;                                 // flash_mem_buf_s1_translator:uav_readdata -> flash_mem_buf_s1_agent:m0_readdata
	wire         flash_mem_buf_s1_agent_m0_waitrequest;                              // flash_mem_buf_s1_translator:uav_waitrequest -> flash_mem_buf_s1_agent:m0_waitrequest
	wire         flash_mem_buf_s1_agent_m0_debugaccess;                              // flash_mem_buf_s1_agent:m0_debugaccess -> flash_mem_buf_s1_translator:uav_debugaccess
	wire  [10:0] flash_mem_buf_s1_agent_m0_address;                                  // flash_mem_buf_s1_agent:m0_address -> flash_mem_buf_s1_translator:uav_address
	wire   [1:0] flash_mem_buf_s1_agent_m0_byteenable;                               // flash_mem_buf_s1_agent:m0_byteenable -> flash_mem_buf_s1_translator:uav_byteenable
	wire         flash_mem_buf_s1_agent_m0_read;                                     // flash_mem_buf_s1_agent:m0_read -> flash_mem_buf_s1_translator:uav_read
	wire         flash_mem_buf_s1_agent_m0_readdatavalid;                            // flash_mem_buf_s1_translator:uav_readdatavalid -> flash_mem_buf_s1_agent:m0_readdatavalid
	wire         flash_mem_buf_s1_agent_m0_lock;                                     // flash_mem_buf_s1_agent:m0_lock -> flash_mem_buf_s1_translator:uav_lock
	wire  [15:0] flash_mem_buf_s1_agent_m0_writedata;                                // flash_mem_buf_s1_agent:m0_writedata -> flash_mem_buf_s1_translator:uav_writedata
	wire         flash_mem_buf_s1_agent_m0_write;                                    // flash_mem_buf_s1_agent:m0_write -> flash_mem_buf_s1_translator:uav_write
	wire   [1:0] flash_mem_buf_s1_agent_m0_burstcount;                               // flash_mem_buf_s1_agent:m0_burstcount -> flash_mem_buf_s1_translator:uav_burstcount
	wire         flash_mem_buf_s1_agent_rf_source_valid;                             // flash_mem_buf_s1_agent:rf_source_valid -> flash_mem_buf_s1_agent_rsp_fifo:in_valid
	wire  [72:0] flash_mem_buf_s1_agent_rf_source_data;                              // flash_mem_buf_s1_agent:rf_source_data -> flash_mem_buf_s1_agent_rsp_fifo:in_data
	wire         flash_mem_buf_s1_agent_rf_source_ready;                             // flash_mem_buf_s1_agent_rsp_fifo:in_ready -> flash_mem_buf_s1_agent:rf_source_ready
	wire         flash_mem_buf_s1_agent_rf_source_startofpacket;                     // flash_mem_buf_s1_agent:rf_source_startofpacket -> flash_mem_buf_s1_agent_rsp_fifo:in_startofpacket
	wire         flash_mem_buf_s1_agent_rf_source_endofpacket;                       // flash_mem_buf_s1_agent:rf_source_endofpacket -> flash_mem_buf_s1_agent_rsp_fifo:in_endofpacket
	wire         flash_mem_buf_s1_agent_rsp_fifo_out_valid;                          // flash_mem_buf_s1_agent_rsp_fifo:out_valid -> flash_mem_buf_s1_agent:rf_sink_valid
	wire  [72:0] flash_mem_buf_s1_agent_rsp_fifo_out_data;                           // flash_mem_buf_s1_agent_rsp_fifo:out_data -> flash_mem_buf_s1_agent:rf_sink_data
	wire         flash_mem_buf_s1_agent_rsp_fifo_out_ready;                          // flash_mem_buf_s1_agent:rf_sink_ready -> flash_mem_buf_s1_agent_rsp_fifo:out_ready
	wire         flash_mem_buf_s1_agent_rsp_fifo_out_startofpacket;                  // flash_mem_buf_s1_agent_rsp_fifo:out_startofpacket -> flash_mem_buf_s1_agent:rf_sink_startofpacket
	wire         flash_mem_buf_s1_agent_rsp_fifo_out_endofpacket;                    // flash_mem_buf_s1_agent_rsp_fifo:out_endofpacket -> flash_mem_buf_s1_agent:rf_sink_endofpacket
	wire         flash_mem_buf_s1_agent_rdata_fifo_src_valid;                        // flash_mem_buf_s1_agent:rdata_fifo_src_valid -> flash_mem_buf_s1_agent:rdata_fifo_sink_valid
	wire  [17:0] flash_mem_buf_s1_agent_rdata_fifo_src_data;                         // flash_mem_buf_s1_agent:rdata_fifo_src_data -> flash_mem_buf_s1_agent:rdata_fifo_sink_data
	wire         flash_mem_buf_s1_agent_rdata_fifo_src_ready;                        // flash_mem_buf_s1_agent:rdata_fifo_sink_ready -> flash_mem_buf_s1_agent:rdata_fifo_src_ready
	wire         reg_bridge_1_m0_agent_cp_valid;                                     // reg_bridge_1_m0_agent:cp_valid -> router:sink_valid
	wire  [89:0] reg_bridge_1_m0_agent_cp_data;                                      // reg_bridge_1_m0_agent:cp_data -> router:sink_data
	wire         reg_bridge_1_m0_agent_cp_ready;                                     // router:sink_ready -> reg_bridge_1_m0_agent:cp_ready
	wire         reg_bridge_1_m0_agent_cp_startofpacket;                             // reg_bridge_1_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         reg_bridge_1_m0_agent_cp_endofpacket;                               // reg_bridge_1_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         system_manager_if_reg_if_agent_rp_valid;                            // system_manager_if_reg_if_agent:rp_valid -> router_001:sink_valid
	wire  [89:0] system_manager_if_reg_if_agent_rp_data;                             // system_manager_if_reg_if_agent:rp_data -> router_001:sink_data
	wire         system_manager_if_reg_if_agent_rp_ready;                            // router_001:sink_ready -> system_manager_if_reg_if_agent:rp_ready
	wire         system_manager_if_reg_if_agent_rp_startofpacket;                    // system_manager_if_reg_if_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         system_manager_if_reg_if_agent_rp_endofpacket;                      // system_manager_if_reg_if_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                               // router_001:src_valid -> rsp_demux:sink_valid
	wire  [89:0] router_001_src_data;                                                // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                               // rsp_demux:sink_ready -> router_001:src_ready
	wire   [1:0] router_001_src_channel;                                             // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                       // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                         // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         flash_mem_buf_s1_agent_rp_valid;                                    // flash_mem_buf_s1_agent:rp_valid -> router_002:sink_valid
	wire  [71:0] flash_mem_buf_s1_agent_rp_data;                                     // flash_mem_buf_s1_agent:rp_data -> router_002:sink_data
	wire         flash_mem_buf_s1_agent_rp_ready;                                    // router_002:sink_ready -> flash_mem_buf_s1_agent:rp_ready
	wire         flash_mem_buf_s1_agent_rp_startofpacket;                            // flash_mem_buf_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         flash_mem_buf_s1_agent_rp_endofpacket;                              // flash_mem_buf_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_src_valid;                                                   // router:src_valid -> reg_bridge_1_m0_limiter:cmd_sink_valid
	wire  [89:0] router_src_data;                                                    // router:src_data -> reg_bridge_1_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                   // reg_bridge_1_m0_limiter:cmd_sink_ready -> router:src_ready
	wire   [1:0] router_src_channel;                                                 // router:src_channel -> reg_bridge_1_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                           // router:src_startofpacket -> reg_bridge_1_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                             // router:src_endofpacket -> reg_bridge_1_m0_limiter:cmd_sink_endofpacket
	wire  [89:0] reg_bridge_1_m0_limiter_cmd_src_data;                               // reg_bridge_1_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         reg_bridge_1_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> reg_bridge_1_m0_limiter:cmd_src_ready
	wire   [1:0] reg_bridge_1_m0_limiter_cmd_src_channel;                            // reg_bridge_1_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         reg_bridge_1_m0_limiter_cmd_src_startofpacket;                      // reg_bridge_1_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         reg_bridge_1_m0_limiter_cmd_src_endofpacket;                        // reg_bridge_1_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> reg_bridge_1_m0_limiter:rsp_sink_valid
	wire  [89:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> reg_bridge_1_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                  // reg_bridge_1_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [1:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> reg_bridge_1_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> reg_bridge_1_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> reg_bridge_1_m0_limiter:rsp_sink_endofpacket
	wire         reg_bridge_1_m0_limiter_rsp_src_valid;                              // reg_bridge_1_m0_limiter:rsp_src_valid -> reg_bridge_1_m0_agent:rp_valid
	wire  [89:0] reg_bridge_1_m0_limiter_rsp_src_data;                               // reg_bridge_1_m0_limiter:rsp_src_data -> reg_bridge_1_m0_agent:rp_data
	wire         reg_bridge_1_m0_limiter_rsp_src_ready;                              // reg_bridge_1_m0_agent:rp_ready -> reg_bridge_1_m0_limiter:rsp_src_ready
	wire   [1:0] reg_bridge_1_m0_limiter_rsp_src_channel;                            // reg_bridge_1_m0_limiter:rsp_src_channel -> reg_bridge_1_m0_agent:rp_channel
	wire         reg_bridge_1_m0_limiter_rsp_src_startofpacket;                      // reg_bridge_1_m0_limiter:rsp_src_startofpacket -> reg_bridge_1_m0_agent:rp_startofpacket
	wire         reg_bridge_1_m0_limiter_rsp_src_endofpacket;                        // reg_bridge_1_m0_limiter:rsp_src_endofpacket -> reg_bridge_1_m0_agent:rp_endofpacket
	wire         flash_mem_buf_s1_burst_adapter_source0_valid;                       // flash_mem_buf_s1_burst_adapter:source0_valid -> flash_mem_buf_s1_agent:cp_valid
	wire  [71:0] flash_mem_buf_s1_burst_adapter_source0_data;                        // flash_mem_buf_s1_burst_adapter:source0_data -> flash_mem_buf_s1_agent:cp_data
	wire         flash_mem_buf_s1_burst_adapter_source0_ready;                       // flash_mem_buf_s1_agent:cp_ready -> flash_mem_buf_s1_burst_adapter:source0_ready
	wire   [1:0] flash_mem_buf_s1_burst_adapter_source0_channel;                     // flash_mem_buf_s1_burst_adapter:source0_channel -> flash_mem_buf_s1_agent:cp_channel
	wire         flash_mem_buf_s1_burst_adapter_source0_startofpacket;               // flash_mem_buf_s1_burst_adapter:source0_startofpacket -> flash_mem_buf_s1_agent:cp_startofpacket
	wire         flash_mem_buf_s1_burst_adapter_source0_endofpacket;                 // flash_mem_buf_s1_burst_adapter:source0_endofpacket -> flash_mem_buf_s1_agent:cp_endofpacket
	wire         cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [89:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [1:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [89:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [1:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [89:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [1:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [89:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [1:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         router_002_src_valid;                                               // router_002:src_valid -> flash_mem_buf_s1_rsp_width_adapter:in_valid
	wire  [71:0] router_002_src_data;                                                // router_002:src_data -> flash_mem_buf_s1_rsp_width_adapter:in_data
	wire         router_002_src_ready;                                               // flash_mem_buf_s1_rsp_width_adapter:in_ready -> router_002:src_ready
	wire   [1:0] router_002_src_channel;                                             // router_002:src_channel -> flash_mem_buf_s1_rsp_width_adapter:in_channel
	wire         router_002_src_startofpacket;                                       // router_002:src_startofpacket -> flash_mem_buf_s1_rsp_width_adapter:in_startofpacket
	wire         router_002_src_endofpacket;                                         // router_002:src_endofpacket -> flash_mem_buf_s1_rsp_width_adapter:in_endofpacket
	wire         flash_mem_buf_s1_rsp_width_adapter_src_valid;                       // flash_mem_buf_s1_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [89:0] flash_mem_buf_s1_rsp_width_adapter_src_data;                        // flash_mem_buf_s1_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire         flash_mem_buf_s1_rsp_width_adapter_src_ready;                       // rsp_demux_001:sink_ready -> flash_mem_buf_s1_rsp_width_adapter:out_ready
	wire   [1:0] flash_mem_buf_s1_rsp_width_adapter_src_channel;                     // flash_mem_buf_s1_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire         flash_mem_buf_s1_rsp_width_adapter_src_startofpacket;               // flash_mem_buf_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         flash_mem_buf_s1_rsp_width_adapter_src_endofpacket;                 // flash_mem_buf_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> flash_mem_buf_s1_cmd_width_adapter:in_valid
	wire  [89:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> flash_mem_buf_s1_cmd_width_adapter:in_data
	wire         cmd_mux_001_src_ready;                                              // flash_mem_buf_s1_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [1:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> flash_mem_buf_s1_cmd_width_adapter:in_channel
	wire         cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> flash_mem_buf_s1_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> flash_mem_buf_s1_cmd_width_adapter:in_endofpacket
	wire         flash_mem_buf_s1_cmd_width_adapter_src_valid;                       // flash_mem_buf_s1_cmd_width_adapter:out_valid -> flash_mem_buf_s1_burst_adapter:sink0_valid
	wire  [71:0] flash_mem_buf_s1_cmd_width_adapter_src_data;                        // flash_mem_buf_s1_cmd_width_adapter:out_data -> flash_mem_buf_s1_burst_adapter:sink0_data
	wire         flash_mem_buf_s1_cmd_width_adapter_src_ready;                       // flash_mem_buf_s1_burst_adapter:sink0_ready -> flash_mem_buf_s1_cmd_width_adapter:out_ready
	wire   [1:0] flash_mem_buf_s1_cmd_width_adapter_src_channel;                     // flash_mem_buf_s1_cmd_width_adapter:out_channel -> flash_mem_buf_s1_burst_adapter:sink0_channel
	wire         flash_mem_buf_s1_cmd_width_adapter_src_startofpacket;               // flash_mem_buf_s1_cmd_width_adapter:out_startofpacket -> flash_mem_buf_s1_burst_adapter:sink0_startofpacket
	wire         flash_mem_buf_s1_cmd_width_adapter_src_endofpacket;                 // flash_mem_buf_s1_cmd_width_adapter:out_endofpacket -> flash_mem_buf_s1_burst_adapter:sink0_endofpacket
	wire   [1:0] reg_bridge_1_m0_limiter_cmd_valid_data;                             // reg_bridge_1_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	system_manager_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (11),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (11),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) reg_bridge_1_m0_translator (
		.clk                    (config_clk_src_clk_clk),                                             //   input,   width = 1,                       clk.clk
		.reset                  (reg_bridge_1_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (reg_bridge_1_m0_translator_avalon_universal_master_0_address),       //  output,  width = 11, avalon_universal_master_0.address
		.uav_burstcount         (reg_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (reg_bridge_1_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (reg_bridge_1_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (reg_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (reg_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (reg_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (reg_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (reg_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (reg_bridge_1_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (reg_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (reg_bridge_1_m0_address),                                            //   input,  width = 11,      avalon_anti_master_0.address
		.av_waitrequest         (reg_bridge_1_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (reg_bridge_1_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (reg_bridge_1_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (reg_bridge_1_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (reg_bridge_1_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (reg_bridge_1_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (reg_bridge_1_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (reg_bridge_1_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (reg_bridge_1_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                               // (terminated),                                        
		.av_begintransfer       (1'b0),                                                               // (terminated),                                        
		.av_chipselect          (1'b0),                                                               // (terminated),                                        
		.av_lock                (1'b0),                                                               // (terminated),                                        
		.uav_clken              (),                                                                   // (terminated),                                        
		.av_clken               (1'b1),                                                               // (terminated),                                        
		.uav_response           (2'b00),                                                              // (terminated),                                        
		.av_response            (),                                                                   // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                               // (terminated),                                        
		.av_writeresponsevalid  ()                                                                    // (terminated),                                        
	);

	system_manager_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) system_manager_if_reg_if_translator (
		.clk                    (config_clk_src_clk_clk),                          //   input,   width = 1,                      clk.clk
		.reset                  (reg_bridge_1_reset_reset_bridge_in_reset_reset),  //   input,   width = 1,                    reset.reset
		.uav_address            (system_manager_if_reg_if_agent_m0_address),       //   input,  width = 11, avalon_universal_slave_0.address
		.uav_burstcount         (system_manager_if_reg_if_agent_m0_burstcount),    //   input,   width = 3,                         .burstcount
		.uav_read               (system_manager_if_reg_if_agent_m0_read),          //   input,   width = 1,                         .read
		.uav_write              (system_manager_if_reg_if_agent_m0_write),         //   input,   width = 1,                         .write
		.uav_waitrequest        (system_manager_if_reg_if_agent_m0_waitrequest),   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (system_manager_if_reg_if_agent_m0_readdatavalid), //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (system_manager_if_reg_if_agent_m0_byteenable),    //   input,   width = 4,                         .byteenable
		.uav_readdata           (system_manager_if_reg_if_agent_m0_readdata),      //  output,  width = 32,                         .readdata
		.uav_writedata          (system_manager_if_reg_if_agent_m0_writedata),     //   input,  width = 32,                         .writedata
		.uav_lock               (system_manager_if_reg_if_agent_m0_lock),          //   input,   width = 1,                         .lock
		.uav_debugaccess        (system_manager_if_reg_if_agent_m0_debugaccess),   //   input,   width = 1,                         .debugaccess
		.av_address             (system_manager_if_reg_if_address),                //  output,   width = 8,      avalon_anti_slave_0.address
		.av_write               (system_manager_if_reg_if_write),                  //  output,   width = 1,                         .write
		.av_read                (system_manager_if_reg_if_read),                   //  output,   width = 1,                         .read
		.av_readdata            (system_manager_if_reg_if_readdata),               //   input,  width = 32,                         .readdata
		.av_writedata           (system_manager_if_reg_if_writedata),              //  output,  width = 32,                         .writedata
		.av_begintransfer       (),                                                // (terminated),                                       
		.av_beginbursttransfer  (),                                                // (terminated),                                       
		.av_burstcount          (),                                                // (terminated),                                       
		.av_byteenable          (),                                                // (terminated),                                       
		.av_readdatavalid       (1'b0),                                            // (terminated),                                       
		.av_waitrequest         (1'b0),                                            // (terminated),                                       
		.av_writebyteenable     (),                                                // (terminated),                                       
		.av_lock                (),                                                // (terminated),                                       
		.av_chipselect          (),                                                // (terminated),                                       
		.av_clken               (),                                                // (terminated),                                       
		.uav_clken              (1'b0),                                            // (terminated),                                       
		.av_debugaccess         (),                                                // (terminated),                                       
		.av_outputenable        (),                                                // (terminated),                                       
		.uav_response           (),                                                // (terminated),                                       
		.av_response            (2'b00),                                           // (terminated),                                       
		.uav_writeresponsevalid (),                                                // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                             // (terminated),                                       
	);

	system_manager_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (11),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) flash_mem_buf_s1_translator (
		.clk                    (config_clk_src_clk_clk),                         //   input,   width = 1,                      clk.clk
		.reset                  (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (flash_mem_buf_s1_agent_m0_address),              //   input,  width = 11, avalon_universal_slave_0.address
		.uav_burstcount         (flash_mem_buf_s1_agent_m0_burstcount),           //   input,   width = 2,                         .burstcount
		.uav_read               (flash_mem_buf_s1_agent_m0_read),                 //   input,   width = 1,                         .read
		.uav_write              (flash_mem_buf_s1_agent_m0_write),                //   input,   width = 1,                         .write
		.uav_waitrequest        (flash_mem_buf_s1_agent_m0_waitrequest),          //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (flash_mem_buf_s1_agent_m0_readdatavalid),        //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (flash_mem_buf_s1_agent_m0_byteenable),           //   input,   width = 2,                         .byteenable
		.uav_readdata           (flash_mem_buf_s1_agent_m0_readdata),             //  output,  width = 16,                         .readdata
		.uav_writedata          (flash_mem_buf_s1_agent_m0_writedata),            //   input,  width = 16,                         .writedata
		.uav_lock               (flash_mem_buf_s1_agent_m0_lock),                 //   input,   width = 1,                         .lock
		.uav_debugaccess        (flash_mem_buf_s1_agent_m0_debugaccess),          //   input,   width = 1,                         .debugaccess
		.av_address             (flash_mem_buf_s1_address),                       //  output,   width = 9,      avalon_anti_slave_0.address
		.av_write               (flash_mem_buf_s1_write),                         //  output,   width = 1,                         .write
		.av_readdata            (flash_mem_buf_s1_readdata),                      //   input,  width = 16,                         .readdata
		.av_writedata           (flash_mem_buf_s1_writedata),                     //  output,  width = 16,                         .writedata
		.av_byteenable          (flash_mem_buf_s1_byteenable),                    //  output,   width = 2,                         .byteenable
		.av_chipselect          (flash_mem_buf_s1_chipselect),                    //  output,   width = 1,                         .chipselect
		.av_clken               (flash_mem_buf_s1_clken),                         //  output,   width = 1,                         .clken
		.av_read                (),                                               // (terminated),                                       
		.av_begintransfer       (),                                               // (terminated),                                       
		.av_beginbursttransfer  (),                                               // (terminated),                                       
		.av_burstcount          (),                                               // (terminated),                                       
		.av_readdatavalid       (1'b0),                                           // (terminated),                                       
		.av_waitrequest         (1'b0),                                           // (terminated),                                       
		.av_writebyteenable     (),                                               // (terminated),                                       
		.av_lock                (),                                               // (terminated),                                       
		.uav_clken              (1'b0),                                           // (terminated),                                       
		.av_debugaccess         (),                                               // (terminated),                                       
		.av_outputenable        (),                                               // (terminated),                                       
		.uav_response           (),                                               // (terminated),                                       
		.av_response            (2'b00),                                          // (terminated),                                       
		.uav_writeresponsevalid (),                                               // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                            // (terminated),                                       
	);

	system_manager_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (89),
		.PKT_DOMAIN_H              (88),
		.PKT_DOMAIN_L              (87),
		.PKT_SNOOP_H               (86),
		.PKT_SNOOP_L               (83),
		.PKT_BARRIER_H             (82),
		.PKT_BARRIER_L             (81),
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_QOS_H                 (65),
		.PKT_QOS_L                 (65),
		.PKT_DATA_SIDEBAND_H       (63),
		.PKT_DATA_SIDEBAND_L       (63),
		.PKT_ADDR_SIDEBAND_H       (62),
		.PKT_ADDR_SIDEBAND_L       (62),
		.PKT_BURST_TYPE_H          (61),
		.PKT_BURST_TYPE_L          (60),
		.PKT_CACHE_H               (75),
		.PKT_CACHE_L               (72),
		.PKT_THREAD_ID_H           (68),
		.PKT_THREAD_ID_L           (68),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_EXCLUSIVE       (52),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (67),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (2),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) reg_bridge_1_m0_agent (
		.clk                   (config_clk_src_clk_clk),                                             //   input,   width = 1,       clk.clk
		.reset                 (reg_bridge_1_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1, clk_reset.reset
		.av_address            (reg_bridge_1_m0_translator_avalon_universal_master_0_address),       //   input,  width = 11,        av.address
		.av_write              (reg_bridge_1_m0_translator_avalon_universal_master_0_write),         //   input,   width = 1,          .write
		.av_read               (reg_bridge_1_m0_translator_avalon_universal_master_0_read),          //   input,   width = 1,          .read
		.av_writedata          (reg_bridge_1_m0_translator_avalon_universal_master_0_writedata),     //   input,  width = 32,          .writedata
		.av_readdata           (reg_bridge_1_m0_translator_avalon_universal_master_0_readdata),      //  output,  width = 32,          .readdata
		.av_waitrequest        (reg_bridge_1_m0_translator_avalon_universal_master_0_waitrequest),   //  output,   width = 1,          .waitrequest
		.av_readdatavalid      (reg_bridge_1_m0_translator_avalon_universal_master_0_readdatavalid), //  output,   width = 1,          .readdatavalid
		.av_byteenable         (reg_bridge_1_m0_translator_avalon_universal_master_0_byteenable),    //   input,   width = 4,          .byteenable
		.av_burstcount         (reg_bridge_1_m0_translator_avalon_universal_master_0_burstcount),    //   input,   width = 3,          .burstcount
		.av_debugaccess        (reg_bridge_1_m0_translator_avalon_universal_master_0_debugaccess),   //   input,   width = 1,          .debugaccess
		.av_lock               (reg_bridge_1_m0_translator_avalon_universal_master_0_lock),          //   input,   width = 1,          .lock
		.cp_valid              (reg_bridge_1_m0_agent_cp_valid),                                     //  output,   width = 1,        cp.valid
		.cp_data               (reg_bridge_1_m0_agent_cp_data),                                      //  output,  width = 90,          .data
		.cp_startofpacket      (reg_bridge_1_m0_agent_cp_startofpacket),                             //  output,   width = 1,          .startofpacket
		.cp_endofpacket        (reg_bridge_1_m0_agent_cp_endofpacket),                               //  output,   width = 1,          .endofpacket
		.cp_ready              (reg_bridge_1_m0_agent_cp_ready),                                     //   input,   width = 1,          .ready
		.rp_valid              (reg_bridge_1_m0_limiter_rsp_src_valid),                              //   input,   width = 1,        rp.valid
		.rp_data               (reg_bridge_1_m0_limiter_rsp_src_data),                               //   input,  width = 90,          .data
		.rp_channel            (reg_bridge_1_m0_limiter_rsp_src_channel),                            //   input,   width = 2,          .channel
		.rp_startofpacket      (reg_bridge_1_m0_limiter_rsp_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rp_endofpacket        (reg_bridge_1_m0_limiter_rsp_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rp_ready              (reg_bridge_1_m0_limiter_rsp_src_ready),                              //  output,   width = 1,          .ready
		.av_response           (),                                                                   // (terminated),                        
		.av_writeresponsevalid ()                                                                    // (terminated),                        
	);

	system_manager_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (80),
		.PKT_ORI_BURST_SIZE_L      (78),
		.PKT_RESPONSE_STATUS_H     (77),
		.PKT_RESPONSE_STATUS_L     (76),
		.PKT_BURST_SIZE_H          (59),
		.PKT_BURST_SIZE_L          (57),
		.PKT_TRANS_LOCK            (51),
		.PKT_BEGIN_BURST           (64),
		.PKT_PROTECTION_H          (71),
		.PKT_PROTECTION_L          (69),
		.PKT_BURSTWRAP_H           (56),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_ADDR_H                (46),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (47),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.PKT_TRANS_READ            (50),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (66),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) system_manager_if_reg_if_agent (
		.clk                     (config_clk_src_clk_clk),                                    //   input,   width = 1,             clk.clk
		.reset                   (reg_bridge_1_reset_reset_bridge_in_reset_reset),            //   input,   width = 1,       clk_reset.reset
		.m0_address              (system_manager_if_reg_if_agent_m0_address),                 //  output,  width = 11,              m0.address
		.m0_burstcount           (system_manager_if_reg_if_agent_m0_burstcount),              //  output,   width = 3,                .burstcount
		.m0_byteenable           (system_manager_if_reg_if_agent_m0_byteenable),              //  output,   width = 4,                .byteenable
		.m0_debugaccess          (system_manager_if_reg_if_agent_m0_debugaccess),             //  output,   width = 1,                .debugaccess
		.m0_lock                 (system_manager_if_reg_if_agent_m0_lock),                    //  output,   width = 1,                .lock
		.m0_readdata             (system_manager_if_reg_if_agent_m0_readdata),                //   input,  width = 32,                .readdata
		.m0_readdatavalid        (system_manager_if_reg_if_agent_m0_readdatavalid),           //   input,   width = 1,                .readdatavalid
		.m0_read                 (system_manager_if_reg_if_agent_m0_read),                    //  output,   width = 1,                .read
		.m0_waitrequest          (system_manager_if_reg_if_agent_m0_waitrequest),             //   input,   width = 1,                .waitrequest
		.m0_writedata            (system_manager_if_reg_if_agent_m0_writedata),               //  output,  width = 32,                .writedata
		.m0_write                (system_manager_if_reg_if_agent_m0_write),                   //  output,   width = 1,                .write
		.rp_endofpacket          (system_manager_if_reg_if_agent_rp_endofpacket),             //  output,   width = 1,              rp.endofpacket
		.rp_ready                (system_manager_if_reg_if_agent_rp_ready),                   //   input,   width = 1,                .ready
		.rp_valid                (system_manager_if_reg_if_agent_rp_valid),                   //  output,   width = 1,                .valid
		.rp_data                 (system_manager_if_reg_if_agent_rp_data),                    //  output,  width = 90,                .data
		.rp_startofpacket        (system_manager_if_reg_if_agent_rp_startofpacket),           //  output,   width = 1,                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //  output,   width = 1,              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //   input,   width = 1,                .valid
		.cp_data                 (cmd_mux_src_data),                                          //   input,  width = 90,                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //   input,   width = 1,                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //   input,   width = 2,                .channel
		.rf_sink_ready           (system_manager_if_reg_if_agent_rsp_fifo_out_ready),         //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (system_manager_if_reg_if_agent_rsp_fifo_out_valid),         //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (system_manager_if_reg_if_agent_rsp_fifo_out_startofpacket), //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (system_manager_if_reg_if_agent_rsp_fifo_out_endofpacket),   //   input,   width = 1,                .endofpacket
		.rf_sink_data            (system_manager_if_reg_if_agent_rsp_fifo_out_data),          //   input,  width = 91,                .data
		.rf_source_ready         (system_manager_if_reg_if_agent_rf_source_ready),            //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (system_manager_if_reg_if_agent_rf_source_valid),            //  output,   width = 1,                .valid
		.rf_source_startofpacket (system_manager_if_reg_if_agent_rf_source_startofpacket),    //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (system_manager_if_reg_if_agent_rf_source_endofpacket),      //  output,   width = 1,                .endofpacket
		.rf_source_data          (system_manager_if_reg_if_agent_rf_source_data),             //  output,  width = 91,                .data
		.rdata_fifo_sink_ready   (system_manager_if_reg_if_agent_rdata_fifo_src_ready),       //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (system_manager_if_reg_if_agent_rdata_fifo_src_valid),       //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (system_manager_if_reg_if_agent_rdata_fifo_src_data),        //   input,  width = 34,                .data
		.rdata_fifo_src_ready    (system_manager_if_reg_if_agent_rdata_fifo_src_ready),       //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_manager_if_reg_if_agent_rdata_fifo_src_valid),       //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (system_manager_if_reg_if_agent_rdata_fifo_src_data),        //  output,  width = 34,                .data
		.m0_response             (2'b00),                                                     // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                      // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                       // (terminated),                              
	);

	system_manager_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) system_manager_if_reg_if_agent_rsp_fifo (
		.clk               (config_clk_src_clk_clk),                                    //   input,   width = 1,       clk.clk
		.reset             (reg_bridge_1_reset_reset_bridge_in_reset_reset),            //   input,   width = 1, clk_reset.reset
		.in_data           (system_manager_if_reg_if_agent_rf_source_data),             //   input,  width = 91,        in.data
		.in_valid          (system_manager_if_reg_if_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (system_manager_if_reg_if_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (system_manager_if_reg_if_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (system_manager_if_reg_if_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (system_manager_if_reg_if_agent_rsp_fifo_out_data),          //  output,  width = 91,       out.data
		.out_valid         (system_manager_if_reg_if_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (system_manager_if_reg_if_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (system_manager_if_reg_if_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (system_manager_if_reg_if_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated),                        
		.csr_read          (1'b0),                                                      // (terminated),                        
		.csr_write         (1'b0),                                                      // (terminated),                        
		.csr_readdata      (),                                                          // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated),                        
		.almost_full_data  (),                                                          // (terminated),                        
		.almost_empty_data (),                                                          // (terminated),                        
		.in_empty          (1'b0),                                                      // (terminated),                        
		.out_empty         (),                                                          // (terminated),                        
		.in_error          (1'b0),                                                      // (terminated),                        
		.out_error         (),                                                          // (terminated),                        
		.in_channel        (1'b0),                                                      // (terminated),                        
		.out_channel       ()                                                           // (terminated),                        
	);

	system_manager_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (62),
		.PKT_ORI_BURST_SIZE_L      (60),
		.PKT_RESPONSE_STATUS_H     (59),
		.PKT_RESPONSE_STATUS_L     (58),
		.PKT_BURST_SIZE_H          (41),
		.PKT_BURST_SIZE_L          (39),
		.PKT_TRANS_LOCK            (33),
		.PKT_BEGIN_BURST           (46),
		.PKT_PROTECTION_H          (53),
		.PKT_PROTECTION_L          (51),
		.PKT_BURSTWRAP_H           (38),
		.PKT_BURSTWRAP_L           (38),
		.PKT_BYTE_CNT_H            (37),
		.PKT_BYTE_CNT_L            (35),
		.PKT_ADDR_H                (28),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (29),
		.PKT_TRANS_POSTED          (30),
		.PKT_TRANS_WRITE           (31),
		.PKT_TRANS_READ            (32),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (48),
		.PKT_DEST_ID_H             (49),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (2),
		.ST_DATA_W                 (72),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) flash_mem_buf_s1_agent (
		.clk                     (config_clk_src_clk_clk),                               //   input,   width = 1,             clk.clk
		.reset                   (reg_bridge_1_reset_reset_bridge_in_reset_reset),       //   input,   width = 1,       clk_reset.reset
		.m0_address              (flash_mem_buf_s1_agent_m0_address),                    //  output,  width = 11,              m0.address
		.m0_burstcount           (flash_mem_buf_s1_agent_m0_burstcount),                 //  output,   width = 2,                .burstcount
		.m0_byteenable           (flash_mem_buf_s1_agent_m0_byteenable),                 //  output,   width = 2,                .byteenable
		.m0_debugaccess          (flash_mem_buf_s1_agent_m0_debugaccess),                //  output,   width = 1,                .debugaccess
		.m0_lock                 (flash_mem_buf_s1_agent_m0_lock),                       //  output,   width = 1,                .lock
		.m0_readdata             (flash_mem_buf_s1_agent_m0_readdata),                   //   input,  width = 16,                .readdata
		.m0_readdatavalid        (flash_mem_buf_s1_agent_m0_readdatavalid),              //   input,   width = 1,                .readdatavalid
		.m0_read                 (flash_mem_buf_s1_agent_m0_read),                       //  output,   width = 1,                .read
		.m0_waitrequest          (flash_mem_buf_s1_agent_m0_waitrequest),                //   input,   width = 1,                .waitrequest
		.m0_writedata            (flash_mem_buf_s1_agent_m0_writedata),                  //  output,  width = 16,                .writedata
		.m0_write                (flash_mem_buf_s1_agent_m0_write),                      //  output,   width = 1,                .write
		.rp_endofpacket          (flash_mem_buf_s1_agent_rp_endofpacket),                //  output,   width = 1,              rp.endofpacket
		.rp_ready                (flash_mem_buf_s1_agent_rp_ready),                      //   input,   width = 1,                .ready
		.rp_valid                (flash_mem_buf_s1_agent_rp_valid),                      //  output,   width = 1,                .valid
		.rp_data                 (flash_mem_buf_s1_agent_rp_data),                       //  output,  width = 72,                .data
		.rp_startofpacket        (flash_mem_buf_s1_agent_rp_startofpacket),              //  output,   width = 1,                .startofpacket
		.cp_ready                (flash_mem_buf_s1_burst_adapter_source0_ready),         //  output,   width = 1,              cp.ready
		.cp_valid                (flash_mem_buf_s1_burst_adapter_source0_valid),         //   input,   width = 1,                .valid
		.cp_data                 (flash_mem_buf_s1_burst_adapter_source0_data),          //   input,  width = 72,                .data
		.cp_startofpacket        (flash_mem_buf_s1_burst_adapter_source0_startofpacket), //   input,   width = 1,                .startofpacket
		.cp_endofpacket          (flash_mem_buf_s1_burst_adapter_source0_endofpacket),   //   input,   width = 1,                .endofpacket
		.cp_channel              (flash_mem_buf_s1_burst_adapter_source0_channel),       //   input,   width = 2,                .channel
		.rf_sink_ready           (flash_mem_buf_s1_agent_rsp_fifo_out_ready),            //  output,   width = 1,         rf_sink.ready
		.rf_sink_valid           (flash_mem_buf_s1_agent_rsp_fifo_out_valid),            //   input,   width = 1,                .valid
		.rf_sink_startofpacket   (flash_mem_buf_s1_agent_rsp_fifo_out_startofpacket),    //   input,   width = 1,                .startofpacket
		.rf_sink_endofpacket     (flash_mem_buf_s1_agent_rsp_fifo_out_endofpacket),      //   input,   width = 1,                .endofpacket
		.rf_sink_data            (flash_mem_buf_s1_agent_rsp_fifo_out_data),             //   input,  width = 73,                .data
		.rf_source_ready         (flash_mem_buf_s1_agent_rf_source_ready),               //   input,   width = 1,       rf_source.ready
		.rf_source_valid         (flash_mem_buf_s1_agent_rf_source_valid),               //  output,   width = 1,                .valid
		.rf_source_startofpacket (flash_mem_buf_s1_agent_rf_source_startofpacket),       //  output,   width = 1,                .startofpacket
		.rf_source_endofpacket   (flash_mem_buf_s1_agent_rf_source_endofpacket),         //  output,   width = 1,                .endofpacket
		.rf_source_data          (flash_mem_buf_s1_agent_rf_source_data),                //  output,  width = 73,                .data
		.rdata_fifo_sink_ready   (flash_mem_buf_s1_agent_rdata_fifo_src_ready),          //  output,   width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (flash_mem_buf_s1_agent_rdata_fifo_src_valid),          //   input,   width = 1,                .valid
		.rdata_fifo_sink_data    (flash_mem_buf_s1_agent_rdata_fifo_src_data),           //   input,  width = 18,                .data
		.rdata_fifo_src_ready    (flash_mem_buf_s1_agent_rdata_fifo_src_ready),          //   input,   width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (flash_mem_buf_s1_agent_rdata_fifo_src_valid),          //  output,   width = 1,                .valid
		.rdata_fifo_src_data     (flash_mem_buf_s1_agent_rdata_fifo_src_data),           //  output,  width = 18,                .data
		.m0_response             (2'b00),                                                // (terminated),                              
		.m0_writeresponsevalid   (1'b0),                                                 // (terminated),                              
		.rdata_fifo_sink_error   (1'b0)                                                  // (terminated),                              
	);

	system_manager_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (73),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) flash_mem_buf_s1_agent_rsp_fifo (
		.clk               (config_clk_src_clk_clk),                            //   input,   width = 1,       clk.clk
		.reset             (reg_bridge_1_reset_reset_bridge_in_reset_reset),    //   input,   width = 1, clk_reset.reset
		.in_data           (flash_mem_buf_s1_agent_rf_source_data),             //   input,  width = 73,        in.data
		.in_valid          (flash_mem_buf_s1_agent_rf_source_valid),            //   input,   width = 1,          .valid
		.in_ready          (flash_mem_buf_s1_agent_rf_source_ready),            //  output,   width = 1,          .ready
		.in_startofpacket  (flash_mem_buf_s1_agent_rf_source_startofpacket),    //   input,   width = 1,          .startofpacket
		.in_endofpacket    (flash_mem_buf_s1_agent_rf_source_endofpacket),      //   input,   width = 1,          .endofpacket
		.out_data          (flash_mem_buf_s1_agent_rsp_fifo_out_data),          //  output,  width = 73,       out.data
		.out_valid         (flash_mem_buf_s1_agent_rsp_fifo_out_valid),         //  output,   width = 1,          .valid
		.out_ready         (flash_mem_buf_s1_agent_rsp_fifo_out_ready),         //   input,   width = 1,          .ready
		.out_startofpacket (flash_mem_buf_s1_agent_rsp_fifo_out_startofpacket), //  output,   width = 1,          .startofpacket
		.out_endofpacket   (flash_mem_buf_s1_agent_rsp_fifo_out_endofpacket),   //  output,   width = 1,          .endofpacket
		.csr_address       (2'b00),                                             // (terminated),                        
		.csr_read          (1'b0),                                              // (terminated),                        
		.csr_write         (1'b0),                                              // (terminated),                        
		.csr_readdata      (),                                                  // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated),                        
		.almost_full_data  (),                                                  // (terminated),                        
		.almost_empty_data (),                                                  // (terminated),                        
		.in_empty          (1'b0),                                              // (terminated),                        
		.out_empty         (),                                                  // (terminated),                        
		.in_error          (1'b0),                                              // (terminated),                        
		.out_error         (),                                                  // (terminated),                        
		.in_channel        (1'b0),                                              // (terminated),                        
		.out_channel       ()                                                   // (terminated),                        
	);

	system_manager_altera_merlin_router_1920_qj5kfvi router (
		.sink_ready         (reg_bridge_1_m0_agent_cp_ready),                 //  output,   width = 1,      sink.ready
		.sink_valid         (reg_bridge_1_m0_agent_cp_valid),                 //   input,   width = 1,          .valid
		.sink_data          (reg_bridge_1_m0_agent_cp_data),                  //   input,  width = 90,          .data
		.sink_startofpacket (reg_bridge_1_m0_agent_cp_startofpacket),         //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (reg_bridge_1_m0_agent_cp_endofpacket),           //   input,   width = 1,          .endofpacket
		.clk                (config_clk_src_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset              (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                               //   input,   width = 1,       src.ready
		.src_valid          (router_src_valid),                               //  output,   width = 1,          .valid
		.src_data           (router_src_data),                                //  output,  width = 90,          .data
		.src_channel        (router_src_channel),                             //  output,   width = 2,          .channel
		.src_startofpacket  (router_src_startofpacket),                       //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                          //  output,   width = 1,          .endofpacket
	);

	system_manager_altera_merlin_router_1920_vjttvwq router_001 (
		.sink_ready         (system_manager_if_reg_if_agent_rp_ready),         //  output,   width = 1,      sink.ready
		.sink_valid         (system_manager_if_reg_if_agent_rp_valid),         //   input,   width = 1,          .valid
		.sink_data          (system_manager_if_reg_if_agent_rp_data),          //   input,  width = 90,          .data
		.sink_startofpacket (system_manager_if_reg_if_agent_rp_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (system_manager_if_reg_if_agent_rp_endofpacket),   //   input,   width = 1,          .endofpacket
		.clk                (config_clk_src_clk_clk),                          //   input,   width = 1,       clk.clk
		.reset              (reg_bridge_1_reset_reset_bridge_in_reset_reset),  //   input,   width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                            //   input,   width = 1,       src.ready
		.src_valid          (router_001_src_valid),                            //  output,   width = 1,          .valid
		.src_data           (router_001_src_data),                             //  output,  width = 90,          .data
		.src_channel        (router_001_src_channel),                          //  output,   width = 2,          .channel
		.src_startofpacket  (router_001_src_startofpacket),                    //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                       //  output,   width = 1,          .endofpacket
	);

	system_manager_altera_merlin_router_1920_i7qr6ky router_002 (
		.sink_ready         (flash_mem_buf_s1_agent_rp_ready),                //  output,   width = 1,      sink.ready
		.sink_valid         (flash_mem_buf_s1_agent_rp_valid),                //   input,   width = 1,          .valid
		.sink_data          (flash_mem_buf_s1_agent_rp_data),                 //   input,  width = 72,          .data
		.sink_startofpacket (flash_mem_buf_s1_agent_rp_startofpacket),        //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (flash_mem_buf_s1_agent_rp_endofpacket),          //   input,   width = 1,          .endofpacket
		.clk                (config_clk_src_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset              (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                           //   input,   width = 1,       src.ready
		.src_valid          (router_002_src_valid),                           //  output,   width = 1,          .valid
		.src_data           (router_002_src_data),                            //  output,  width = 72,          .data
		.src_channel        (router_002_src_channel),                         //  output,   width = 2,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //  output,   width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //  output,   width = 1,          .endofpacket
	);

	system_manager_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (67),
		.PKT_DEST_ID_L             (67),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (66),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (53),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (48),
		.PKT_TRANS_WRITE           (49),
		.MAX_OUTSTANDING_RESPONSES (4),
		.PIPELINED                 (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (2),
		.VALID_WIDTH               (2),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) reg_bridge_1_m0_limiter (
		.clk                    (config_clk_src_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset                  (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                               //  output,   width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                               //   input,   width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                //   input,  width = 90,          .data
		.cmd_sink_channel       (router_src_channel),                             //   input,   width = 2,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                       //   input,   width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                         //   input,   width = 1,          .endofpacket
		.cmd_src_ready          (reg_bridge_1_m0_limiter_cmd_src_ready),          //   input,   width = 1,   cmd_src.ready
		.cmd_src_data           (reg_bridge_1_m0_limiter_cmd_src_data),           //  output,  width = 90,          .data
		.cmd_src_channel        (reg_bridge_1_m0_limiter_cmd_src_channel),        //  output,   width = 2,          .channel
		.cmd_src_startofpacket  (reg_bridge_1_m0_limiter_cmd_src_startofpacket),  //  output,   width = 1,          .startofpacket
		.cmd_src_endofpacket    (reg_bridge_1_m0_limiter_cmd_src_endofpacket),    //  output,   width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                              //  output,   width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                              //   input,   width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                            //   input,   width = 2,          .channel
		.rsp_sink_data          (rsp_mux_src_data),                               //   input,  width = 90,          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                      //   input,   width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                        //   input,   width = 1,          .endofpacket
		.rsp_src_ready          (reg_bridge_1_m0_limiter_rsp_src_ready),          //   input,   width = 1,   rsp_src.ready
		.rsp_src_valid          (reg_bridge_1_m0_limiter_rsp_src_valid),          //  output,   width = 1,          .valid
		.rsp_src_data           (reg_bridge_1_m0_limiter_rsp_src_data),           //  output,  width = 90,          .data
		.rsp_src_channel        (reg_bridge_1_m0_limiter_rsp_src_channel),        //  output,   width = 2,          .channel
		.rsp_src_startofpacket  (reg_bridge_1_m0_limiter_rsp_src_startofpacket),  //  output,   width = 1,          .startofpacket
		.rsp_src_endofpacket    (reg_bridge_1_m0_limiter_rsp_src_endofpacket),    //  output,   width = 1,          .endofpacket
		.cmd_src_valid          (reg_bridge_1_m0_limiter_cmd_valid_data)          //  output,   width = 2, cmd_valid.data
	);

	system_manager_altera_merlin_burst_adapter_1920_7u52mfq #(
		.PKT_ADDR_H                (28),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (46),
		.PKT_BYTE_CNT_H            (37),
		.PKT_BYTE_CNT_L            (35),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (41),
		.PKT_BURST_SIZE_L          (39),
		.PKT_BURST_TYPE_H          (43),
		.PKT_BURST_TYPE_L          (42),
		.PKT_BURSTWRAP_H           (38),
		.PKT_BURSTWRAP_L           (38),
		.PKT_TRANS_COMPRESSED_READ (29),
		.PKT_TRANS_WRITE           (31),
		.PKT_TRANS_READ            (32),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (72),
		.ST_CHANNEL_W              (2),
		.OUT_BYTE_CNT_H            (36),
		.OUT_BURSTWRAP_H           (38),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) flash_mem_buf_s1_burst_adapter (
		.clk                   (config_clk_src_clk_clk),                               //   input,   width = 1,       cr0.clk
		.reset                 (reg_bridge_1_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, cr0_reset.reset
		.sink0_valid           (flash_mem_buf_s1_cmd_width_adapter_src_valid),         //   input,   width = 1,     sink0.valid
		.sink0_data            (flash_mem_buf_s1_cmd_width_adapter_src_data),          //   input,  width = 72,          .data
		.sink0_channel         (flash_mem_buf_s1_cmd_width_adapter_src_channel),       //   input,   width = 2,          .channel
		.sink0_startofpacket   (flash_mem_buf_s1_cmd_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink0_endofpacket     (flash_mem_buf_s1_cmd_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink0_ready           (flash_mem_buf_s1_cmd_width_adapter_src_ready),         //  output,   width = 1,          .ready
		.source0_valid         (flash_mem_buf_s1_burst_adapter_source0_valid),         //  output,   width = 1,   source0.valid
		.source0_data          (flash_mem_buf_s1_burst_adapter_source0_data),          //  output,  width = 72,          .data
		.source0_channel       (flash_mem_buf_s1_burst_adapter_source0_channel),       //  output,   width = 2,          .channel
		.source0_startofpacket (flash_mem_buf_s1_burst_adapter_source0_startofpacket), //  output,   width = 1,          .startofpacket
		.source0_endofpacket   (flash_mem_buf_s1_burst_adapter_source0_endofpacket),   //  output,   width = 1,          .endofpacket
		.source0_ready         (flash_mem_buf_s1_burst_adapter_source0_ready)          //   input,   width = 1,          .ready
	);

	system_manager_altera_merlin_demultiplexer_1920_oq6xuty cmd_demux (
		.clk                (config_clk_src_clk_clk),                         //   input,   width = 1,        clk.clk
		.reset              (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1,  clk_reset.reset
		.sink_ready         (reg_bridge_1_m0_limiter_cmd_src_ready),          //  output,   width = 1,       sink.ready
		.sink_channel       (reg_bridge_1_m0_limiter_cmd_src_channel),        //   input,   width = 2,           .channel
		.sink_data          (reg_bridge_1_m0_limiter_cmd_src_data),           //   input,  width = 90,           .data
		.sink_startofpacket (reg_bridge_1_m0_limiter_cmd_src_startofpacket),  //   input,   width = 1,           .startofpacket
		.sink_endofpacket   (reg_bridge_1_m0_limiter_cmd_src_endofpacket),    //   input,   width = 1,           .endofpacket
		.sink_valid         (reg_bridge_1_m0_limiter_cmd_valid_data),         //   input,   width = 2, sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                           //   input,   width = 1,       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //  output,   width = 1,           .valid
		.src0_data          (cmd_demux_src0_data),                            //  output,  width = 90,           .data
		.src0_channel       (cmd_demux_src0_channel),                         //  output,   width = 2,           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //  output,   width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                     //  output,   width = 1,           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                           //   input,   width = 1,       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                           //  output,   width = 1,           .valid
		.src1_data          (cmd_demux_src1_data),                            //  output,  width = 90,           .data
		.src1_channel       (cmd_demux_src1_channel),                         //  output,   width = 2,           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                   //  output,   width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                      //  output,   width = 1,           .endofpacket
	);

	system_manager_altera_merlin_multiplexer_1920_itiewpq cmd_mux (
		.clk                 (config_clk_src_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset               (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                              //  output,   width = 1,          .valid
		.src_data            (cmd_mux_src_data),                               //  output,  width = 90,          .data
		.src_channel         (cmd_mux_src_channel),                            //  output,   width = 2,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //   input,   width = 2,          .channel
		.sink0_data          (cmd_demux_src0_data),                            //   input,  width = 90,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                      //   input,   width = 1,          .endofpacket
	);

	system_manager_altera_merlin_multiplexer_1920_itiewpq cmd_mux_001 (
		.clk                 (config_clk_src_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset               (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //   input,   width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //  output,   width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                           //  output,  width = 90,          .data
		.src_channel         (cmd_mux_001_src_channel),                        //  output,   width = 2,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //  output,   width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //  output,   width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                           //  output,   width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                           //   input,   width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                         //   input,   width = 2,          .channel
		.sink0_data          (cmd_demux_src1_data),                            //   input,  width = 90,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                      //   input,   width = 1,          .endofpacket
	);

	system_manager_altera_merlin_demultiplexer_1920_yky73ba rsp_demux (
		.clk                (config_clk_src_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset              (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //  output,   width = 1,      sink.ready
		.sink_channel       (router_001_src_channel),                         //   input,   width = 2,          .channel
		.sink_data          (router_001_src_data),                            //   input,  width = 90,          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //   input,   width = 1,          .endofpacket
		.sink_valid         (router_001_src_valid),                           //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                            //  output,  width = 90,          .data
		.src0_channel       (rsp_demux_src0_channel),                         //  output,   width = 2,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                      //  output,   width = 1,          .endofpacket
	);

	system_manager_altera_merlin_demultiplexer_1920_yky73ba rsp_demux_001 (
		.clk                (config_clk_src_clk_clk),                               //   input,   width = 1,       clk.clk
		.reset              (reg_bridge_1_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.sink_ready         (flash_mem_buf_s1_rsp_width_adapter_src_ready),         //  output,   width = 1,      sink.ready
		.sink_channel       (flash_mem_buf_s1_rsp_width_adapter_src_channel),       //   input,   width = 2,          .channel
		.sink_data          (flash_mem_buf_s1_rsp_width_adapter_src_data),          //   input,  width = 90,          .data
		.sink_startofpacket (flash_mem_buf_s1_rsp_width_adapter_src_startofpacket), //   input,   width = 1,          .startofpacket
		.sink_endofpacket   (flash_mem_buf_s1_rsp_width_adapter_src_endofpacket),   //   input,   width = 1,          .endofpacket
		.sink_valid         (flash_mem_buf_s1_rsp_width_adapter_src_valid),         //   input,   width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                             //   input,   width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                             //  output,   width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                              //  output,  width = 90,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                           //  output,   width = 2,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                     //  output,   width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                        //  output,   width = 1,          .endofpacket
	);

	system_manager_altera_merlin_multiplexer_1920_uwqlapy rsp_mux (
		.clk                 (config_clk_src_clk_clk),                         //   input,   width = 1,       clk.clk
		.reset               (reg_bridge_1_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //   input,   width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                              //  output,   width = 1,          .valid
		.src_data            (rsp_mux_src_data),                               //  output,  width = 90,          .data
		.src_channel         (rsp_mux_src_channel),                            //  output,   width = 2,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //  output,   width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //  output,   width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //  output,   width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //   input,   width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //   input,   width = 2,          .channel
		.sink0_data          (rsp_demux_src0_data),                            //   input,  width = 90,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //   input,   width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                     //   input,   width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                       //  output,   width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                       //   input,   width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                     //   input,   width = 2,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                        //   input,  width = 90,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),               //   input,   width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)                  //   input,   width = 1,          .endofpacket
	);

	system_manager_altera_merlin_width_adapter_1920_bryp3pq #(
		.IN_PKT_ADDR_H                 (28),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (37),
		.IN_PKT_BYTE_CNT_L             (35),
		.IN_PKT_TRANS_COMPRESSED_READ  (29),
		.IN_PKT_TRANS_WRITE            (31),
		.IN_PKT_BURSTWRAP_H            (38),
		.IN_PKT_BURSTWRAP_L            (38),
		.IN_PKT_BURST_SIZE_H           (41),
		.IN_PKT_BURST_SIZE_L           (39),
		.IN_PKT_RESPONSE_STATUS_H      (59),
		.IN_PKT_RESPONSE_STATUS_L      (58),
		.IN_PKT_TRANS_EXCLUSIVE        (34),
		.IN_PKT_BURST_TYPE_H           (43),
		.IN_PKT_BURST_TYPE_L           (42),
		.IN_PKT_ORI_BURST_SIZE_L       (60),
		.IN_PKT_ORI_BURST_SIZE_H       (62),
		.IN_ST_DATA_W                  (72),
		.OUT_PKT_ADDR_H                (46),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (53),
		.OUT_PKT_TRANS_COMPRESSED_READ (47),
		.OUT_PKT_BURST_SIZE_H          (59),
		.OUT_PKT_BURST_SIZE_L          (57),
		.OUT_PKT_RESPONSE_STATUS_H     (77),
		.OUT_PKT_RESPONSE_STATUS_L     (76),
		.OUT_PKT_TRANS_EXCLUSIVE       (52),
		.OUT_PKT_BURST_TYPE_H          (61),
		.OUT_PKT_BURST_TYPE_L          (60),
		.OUT_PKT_ORI_BURST_SIZE_L      (78),
		.OUT_PKT_ORI_BURST_SIZE_H      (80),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) flash_mem_buf_s1_rsp_width_adapter (
		.clk                  (config_clk_src_clk_clk),                               //   input,   width = 1,       clk.clk
		.reset                (reg_bridge_1_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.in_valid             (router_002_src_valid),                                 //   input,   width = 1,      sink.valid
		.in_channel           (router_002_src_channel),                               //   input,   width = 2,          .channel
		.in_startofpacket     (router_002_src_startofpacket),                         //   input,   width = 1,          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                           //   input,   width = 1,          .endofpacket
		.in_ready             (router_002_src_ready),                                 //  output,   width = 1,          .ready
		.in_data              (router_002_src_data),                                  //   input,  width = 72,          .data
		.out_endofpacket      (flash_mem_buf_s1_rsp_width_adapter_src_endofpacket),   //  output,   width = 1,       src.endofpacket
		.out_data             (flash_mem_buf_s1_rsp_width_adapter_src_data),          //  output,  width = 90,          .data
		.out_channel          (flash_mem_buf_s1_rsp_width_adapter_src_channel),       //  output,   width = 2,          .channel
		.out_valid            (flash_mem_buf_s1_rsp_width_adapter_src_valid),         //  output,   width = 1,          .valid
		.out_ready            (flash_mem_buf_s1_rsp_width_adapter_src_ready),         //   input,   width = 1,          .ready
		.out_startofpacket    (flash_mem_buf_s1_rsp_width_adapter_src_startofpacket), //  output,   width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated),                        
	);

	system_manager_altera_merlin_width_adapter_1920_ytcfiva #(
		.IN_PKT_ADDR_H                 (46),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (53),
		.IN_PKT_TRANS_COMPRESSED_READ  (47),
		.IN_PKT_TRANS_WRITE            (49),
		.IN_PKT_BURSTWRAP_H            (56),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (59),
		.IN_PKT_BURST_SIZE_L           (57),
		.IN_PKT_RESPONSE_STATUS_H      (77),
		.IN_PKT_RESPONSE_STATUS_L      (76),
		.IN_PKT_TRANS_EXCLUSIVE        (52),
		.IN_PKT_BURST_TYPE_H           (61),
		.IN_PKT_BURST_TYPE_L           (60),
		.IN_PKT_ORI_BURST_SIZE_L       (78),
		.IN_PKT_ORI_BURST_SIZE_H       (80),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (28),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (37),
		.OUT_PKT_BYTE_CNT_L            (35),
		.OUT_PKT_TRANS_COMPRESSED_READ (29),
		.OUT_PKT_BURST_SIZE_H          (41),
		.OUT_PKT_BURST_SIZE_L          (39),
		.OUT_PKT_RESPONSE_STATUS_H     (59),
		.OUT_PKT_RESPONSE_STATUS_L     (58),
		.OUT_PKT_TRANS_EXCLUSIVE       (34),
		.OUT_PKT_BURST_TYPE_H          (43),
		.OUT_PKT_BURST_TYPE_L          (42),
		.OUT_PKT_ORI_BURST_SIZE_L      (60),
		.OUT_PKT_ORI_BURST_SIZE_H      (62),
		.OUT_ST_DATA_W                 (72),
		.ST_CHANNEL_W                  (2),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) flash_mem_buf_s1_cmd_width_adapter (
		.clk                  (config_clk_src_clk_clk),                               //   input,   width = 1,       clk.clk
		.reset                (reg_bridge_1_reset_reset_bridge_in_reset_reset),       //   input,   width = 1, clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                //   input,   width = 1,      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                              //   input,   width = 2,          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                        //   input,   width = 1,          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                          //   input,   width = 1,          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                //  output,   width = 1,          .ready
		.in_data              (cmd_mux_001_src_data),                                 //   input,  width = 90,          .data
		.out_endofpacket      (flash_mem_buf_s1_cmd_width_adapter_src_endofpacket),   //  output,   width = 1,       src.endofpacket
		.out_data             (flash_mem_buf_s1_cmd_width_adapter_src_data),          //  output,  width = 72,          .data
		.out_channel          (flash_mem_buf_s1_cmd_width_adapter_src_channel),       //  output,   width = 2,          .channel
		.out_valid            (flash_mem_buf_s1_cmd_width_adapter_src_valid),         //  output,   width = 1,          .valid
		.out_ready            (flash_mem_buf_s1_cmd_width_adapter_src_ready),         //   input,   width = 1,          .ready
		.out_startofpacket    (flash_mem_buf_s1_cmd_width_adapter_src_startofpacket), //  output,   width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                // (terminated),                        
	);

endmodule
