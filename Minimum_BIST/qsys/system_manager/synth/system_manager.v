// system_manager.v

// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module system_manager (
		input  wire        config_clk_clk,                          //       config_clk.clk
		input  wire        config_rstn_reset_n,                     //      config_rstn.reset_n
		output wire        system_mm_waitrequest,                   //        system_mm.waitrequest
		output wire [31:0] system_mm_readdata,                      //                 .readdata
		output wire        system_mm_readdatavalid,                 //                 .readdatavalid
		input  wire [0:0]  system_mm_burstcount,                    //                 .burstcount
		input  wire [31:0] system_mm_writedata,                     //                 .writedata
		input  wire [10:0] system_mm_address,                       //                 .address
		input  wire        system_mm_write,                         //                 .write
		input  wire        system_mm_read,                          //                 .read
		input  wire [3:0]  system_mm_byteenable,                    //                 .byteenable
		input  wire        system_mm_debugaccess,                   //                 .debugaccess
		inout  wire [7:0]  conf_d_conf_d,                           //           conf_d.conf_d
		output wire        soft_recfg_req_n_soft_reconfigure_req_n, // soft_recfg_req_n.soft_reconfigure_req_n
		output wire [3:0]  conf_c_out_conf_c_out,                   //       conf_c_out.conf_c_out
		input  wire [3:0]  conf_c_in_conf_c_in,                     //        conf_c_in.conf_c_in
		input  wire        user_clk_clk,                            //         user_clk.clk
		input  wire        user_rstn_reset_n                        //        user_rstn.reset_n
	);

	wire         user_clk_src_clk_clk;                                 // user_clk_src:clk_out -> [mm_interconnect_1:user_clk_src_clk_clk, reg_bridge_0:clk]
	wire         config_clk_src_clk_clk;                               // config_clk_src:clk_out -> [flash_mem_buf:clk, iopll_0:refclk, mm_interconnect_0:config_clk_src_clk_clk, mm_interconnect_1:config_clk_src_clk_clk, mm_interconnect_2:config_clk_src_clk_clk, reg_bridge_1:clk, rst_controller:clk, rst_controller_001:clk, system_manager_if:clk]
	wire         iopll_0_outclk0_clk;                                  // iopll_0:outclk_0 -> system_manager_if:pll_clk
	wire         user_clk_src_clk_reset_reset;                         // user_clk_src:reset_n_out -> [mm_interconnect_1:reg_bridge_0_reset_reset_bridge_in_reset_reset, reg_bridge_0:reset]
	wire         config_clk_src_clk_reset_reset;                       // config_clk_src:reset_n_out -> [iopll_0:rst, rst_controller:reset_in0, rst_controller_001:reset_in0]
	wire         reg_bridge_1_m0_waitrequest;                          // mm_interconnect_0:reg_bridge_1_m0_waitrequest -> reg_bridge_1:m0_waitrequest
	wire  [31:0] reg_bridge_1_m0_readdata;                             // mm_interconnect_0:reg_bridge_1_m0_readdata -> reg_bridge_1:m0_readdata
	wire         reg_bridge_1_m0_debugaccess;                          // reg_bridge_1:m0_debugaccess -> mm_interconnect_0:reg_bridge_1_m0_debugaccess
	wire  [10:0] reg_bridge_1_m0_address;                              // reg_bridge_1:m0_address -> mm_interconnect_0:reg_bridge_1_m0_address
	wire         reg_bridge_1_m0_read;                                 // reg_bridge_1:m0_read -> mm_interconnect_0:reg_bridge_1_m0_read
	wire   [3:0] reg_bridge_1_m0_byteenable;                           // reg_bridge_1:m0_byteenable -> mm_interconnect_0:reg_bridge_1_m0_byteenable
	wire         reg_bridge_1_m0_readdatavalid;                        // mm_interconnect_0:reg_bridge_1_m0_readdatavalid -> reg_bridge_1:m0_readdatavalid
	wire  [31:0] reg_bridge_1_m0_writedata;                            // reg_bridge_1:m0_writedata -> mm_interconnect_0:reg_bridge_1_m0_writedata
	wire         reg_bridge_1_m0_write;                                // reg_bridge_1:m0_write -> mm_interconnect_0:reg_bridge_1_m0_write
	wire   [0:0] reg_bridge_1_m0_burstcount;                           // reg_bridge_1:m0_burstcount -> mm_interconnect_0:reg_bridge_1_m0_burstcount
	wire  [31:0] mm_interconnect_0_system_manager_if_reg_if_readdata;  // system_manager_if:c_readdata -> mm_interconnect_0:system_manager_if_reg_if_readdata
	wire   [7:0] mm_interconnect_0_system_manager_if_reg_if_address;   // mm_interconnect_0:system_manager_if_reg_if_address -> system_manager_if:c_address
	wire         mm_interconnect_0_system_manager_if_reg_if_read;      // mm_interconnect_0:system_manager_if_reg_if_read -> system_manager_if:c_read
	wire         mm_interconnect_0_system_manager_if_reg_if_write;     // mm_interconnect_0:system_manager_if_reg_if_write -> system_manager_if:c_write
	wire  [31:0] mm_interconnect_0_system_manager_if_reg_if_writedata; // mm_interconnect_0:system_manager_if_reg_if_writedata -> system_manager_if:c_writedata
	wire         mm_interconnect_0_flash_mem_buf_s1_chipselect;        // mm_interconnect_0:flash_mem_buf_s1_chipselect -> flash_mem_buf:chipselect
	wire  [15:0] mm_interconnect_0_flash_mem_buf_s1_readdata;          // flash_mem_buf:readdata -> mm_interconnect_0:flash_mem_buf_s1_readdata
	wire   [8:0] mm_interconnect_0_flash_mem_buf_s1_address;           // mm_interconnect_0:flash_mem_buf_s1_address -> flash_mem_buf:address
	wire   [1:0] mm_interconnect_0_flash_mem_buf_s1_byteenable;        // mm_interconnect_0:flash_mem_buf_s1_byteenable -> flash_mem_buf:byteenable
	wire         mm_interconnect_0_flash_mem_buf_s1_write;             // mm_interconnect_0:flash_mem_buf_s1_write -> flash_mem_buf:write
	wire  [15:0] mm_interconnect_0_flash_mem_buf_s1_writedata;         // mm_interconnect_0:flash_mem_buf_s1_writedata -> flash_mem_buf:writedata
	wire         mm_interconnect_0_flash_mem_buf_s1_clken;             // mm_interconnect_0:flash_mem_buf_s1_clken -> flash_mem_buf:clken
	wire         reg_bridge_0_m0_waitrequest;                          // mm_interconnect_1:reg_bridge_0_m0_waitrequest -> reg_bridge_0:m0_waitrequest
	wire  [31:0] reg_bridge_0_m0_readdata;                             // mm_interconnect_1:reg_bridge_0_m0_readdata -> reg_bridge_0:m0_readdata
	wire         reg_bridge_0_m0_debugaccess;                          // reg_bridge_0:m0_debugaccess -> mm_interconnect_1:reg_bridge_0_m0_debugaccess
	wire  [10:0] reg_bridge_0_m0_address;                              // reg_bridge_0:m0_address -> mm_interconnect_1:reg_bridge_0_m0_address
	wire         reg_bridge_0_m0_read;                                 // reg_bridge_0:m0_read -> mm_interconnect_1:reg_bridge_0_m0_read
	wire   [3:0] reg_bridge_0_m0_byteenable;                           // reg_bridge_0:m0_byteenable -> mm_interconnect_1:reg_bridge_0_m0_byteenable
	wire         reg_bridge_0_m0_readdatavalid;                        // mm_interconnect_1:reg_bridge_0_m0_readdatavalid -> reg_bridge_0:m0_readdatavalid
	wire  [31:0] reg_bridge_0_m0_writedata;                            // reg_bridge_0:m0_writedata -> mm_interconnect_1:reg_bridge_0_m0_writedata
	wire         reg_bridge_0_m0_write;                                // reg_bridge_0:m0_write -> mm_interconnect_1:reg_bridge_0_m0_write
	wire   [0:0] reg_bridge_0_m0_burstcount;                           // reg_bridge_0:m0_burstcount -> mm_interconnect_1:reg_bridge_0_m0_burstcount
	wire  [31:0] mm_interconnect_1_reg_bridge_1_s0_readdata;           // reg_bridge_1:s0_readdata -> mm_interconnect_1:reg_bridge_1_s0_readdata
	wire         mm_interconnect_1_reg_bridge_1_s0_waitrequest;        // reg_bridge_1:s0_waitrequest -> mm_interconnect_1:reg_bridge_1_s0_waitrequest
	wire         mm_interconnect_1_reg_bridge_1_s0_debugaccess;        // mm_interconnect_1:reg_bridge_1_s0_debugaccess -> reg_bridge_1:s0_debugaccess
	wire  [10:0] mm_interconnect_1_reg_bridge_1_s0_address;            // mm_interconnect_1:reg_bridge_1_s0_address -> reg_bridge_1:s0_address
	wire         mm_interconnect_1_reg_bridge_1_s0_read;               // mm_interconnect_1:reg_bridge_1_s0_read -> reg_bridge_1:s0_read
	wire   [3:0] mm_interconnect_1_reg_bridge_1_s0_byteenable;         // mm_interconnect_1:reg_bridge_1_s0_byteenable -> reg_bridge_1:s0_byteenable
	wire         mm_interconnect_1_reg_bridge_1_s0_readdatavalid;      // reg_bridge_1:s0_readdatavalid -> mm_interconnect_1:reg_bridge_1_s0_readdatavalid
	wire         mm_interconnect_1_reg_bridge_1_s0_write;              // mm_interconnect_1:reg_bridge_1_s0_write -> reg_bridge_1:s0_write
	wire  [31:0] mm_interconnect_1_reg_bridge_1_s0_writedata;          // mm_interconnect_1:reg_bridge_1_s0_writedata -> reg_bridge_1:s0_writedata
	wire   [0:0] mm_interconnect_1_reg_bridge_1_s0_burstcount;         // mm_interconnect_1:reg_bridge_1_s0_burstcount -> reg_bridge_1:s0_burstcount
	wire  [15:0] system_manager_if_mem_if_readdata;                    // mm_interconnect_2:system_manager_if_mem_if_readdata -> system_manager_if:d_readdata
	wire         system_manager_if_mem_if_waitrequest;                 // mm_interconnect_2:system_manager_if_mem_if_waitrequest -> system_manager_if:d_waitrequest
	wire   [9:0] system_manager_if_mem_if_address;                     // system_manager_if:d_address -> mm_interconnect_2:system_manager_if_mem_if_address
	wire         system_manager_if_mem_if_read;                        // system_manager_if:d_read -> mm_interconnect_2:system_manager_if_mem_if_read
	wire         system_manager_if_mem_if_write;                       // system_manager_if:d_write -> mm_interconnect_2:system_manager_if_mem_if_write
	wire  [15:0] system_manager_if_mem_if_writedata;                   // system_manager_if:d_writedata -> mm_interconnect_2:system_manager_if_mem_if_writedata
	wire         mm_interconnect_2_flash_mem_buf_s2_chipselect;        // mm_interconnect_2:flash_mem_buf_s2_chipselect -> flash_mem_buf:chipselect2
	wire  [15:0] mm_interconnect_2_flash_mem_buf_s2_readdata;          // flash_mem_buf:readdata2 -> mm_interconnect_2:flash_mem_buf_s2_readdata
	wire   [8:0] mm_interconnect_2_flash_mem_buf_s2_address;           // mm_interconnect_2:flash_mem_buf_s2_address -> flash_mem_buf:address2
	wire   [1:0] mm_interconnect_2_flash_mem_buf_s2_byteenable;        // mm_interconnect_2:flash_mem_buf_s2_byteenable -> flash_mem_buf:byteenable2
	wire         mm_interconnect_2_flash_mem_buf_s2_write;             // mm_interconnect_2:flash_mem_buf_s2_write -> flash_mem_buf:write2
	wire  [15:0] mm_interconnect_2_flash_mem_buf_s2_writedata;         // mm_interconnect_2:flash_mem_buf_s2_writedata -> flash_mem_buf:writedata2
	wire         mm_interconnect_2_flash_mem_buf_s2_clken;             // mm_interconnect_2:flash_mem_buf_s2_clken -> flash_mem_buf:clken2
	wire         rst_controller_reset_out_reset;                       // rst_controller:reset_out -> [flash_mem_buf:reset, mm_interconnect_0:reg_bridge_1_reset_reset_bridge_in_reset_reset, mm_interconnect_1:reg_bridge_1_reset_reset_bridge_in_reset_reset, reg_bridge_1:reset, rst_translator:in_reset, system_manager_if:rst]
	wire         rst_controller_reset_out_reset_req;                   // rst_controller:reset_req -> [flash_mem_buf:reset_req, rst_translator:reset_req_in]
	wire         rst_controller_001_reset_out_reset;                   // rst_controller_001:reset_out -> mm_interconnect_2:system_manager_if_mem_if_translator_reset_reset_bridge_in_reset_reset

	system_manager_clk_0 config_clk_src (
		.in_clk      (config_clk_clk),                 //   input,  width = 1,       clk_in.clk
		.reset_n     (config_rstn_reset_n),            //   input,  width = 1, clk_in_reset.reset_n
		.clk_out     (config_clk_src_clk_clk),         //  output,  width = 1,          clk.clk
		.reset_n_out (config_clk_src_clk_reset_reset)  //  output,  width = 1,    clk_reset.reset_n
	);

	system_manager_flash_memory_buffer flash_mem_buf (
		.address     (mm_interconnect_0_flash_mem_buf_s1_address),    //   input,   width = 9,     s1.address
		.clken       (mm_interconnect_0_flash_mem_buf_s1_clken),      //   input,   width = 1,       .clken
		.chipselect  (mm_interconnect_0_flash_mem_buf_s1_chipselect), //   input,   width = 1,       .chipselect
		.write       (mm_interconnect_0_flash_mem_buf_s1_write),      //   input,   width = 1,       .write
		.readdata    (mm_interconnect_0_flash_mem_buf_s1_readdata),   //  output,  width = 16,       .readdata
		.writedata   (mm_interconnect_0_flash_mem_buf_s1_writedata),  //   input,  width = 16,       .writedata
		.byteenable  (mm_interconnect_0_flash_mem_buf_s1_byteenable), //   input,   width = 2,       .byteenable
		.address2    (mm_interconnect_2_flash_mem_buf_s2_address),    //   input,   width = 9,     s2.address
		.chipselect2 (mm_interconnect_2_flash_mem_buf_s2_chipselect), //   input,   width = 1,       .chipselect
		.clken2      (mm_interconnect_2_flash_mem_buf_s2_clken),      //   input,   width = 1,       .clken
		.write2      (mm_interconnect_2_flash_mem_buf_s2_write),      //   input,   width = 1,       .write
		.readdata2   (mm_interconnect_2_flash_mem_buf_s2_readdata),   //  output,  width = 16,       .readdata
		.writedata2  (mm_interconnect_2_flash_mem_buf_s2_writedata),  //   input,  width = 16,       .writedata
		.byteenable2 (mm_interconnect_2_flash_mem_buf_s2_byteenable), //   input,   width = 2,       .byteenable
		.clk         (config_clk_src_clk_clk),                        //   input,   width = 1,   clk1.clk
		.reset       (rst_controller_reset_out_reset),                //   input,   width = 1, reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req)             //   input,   width = 1,       .reset_req
	);

	system_manager_iopll_0 iopll_0 (
		.rst      (~config_clk_src_clk_reset_reset), //   input,  width = 1,   reset.reset
		.refclk   (config_clk_src_clk_clk),          //   input,  width = 1,  refclk.clk
		.locked   (),                                //  output,  width = 1,  locked.export
		.outclk_0 (iopll_0_outclk0_clk)              //  output,  width = 1, outclk0.clk
	);

	system_manager_reg_bridge0 reg_bridge_0 (
		.clk              (user_clk_src_clk_clk),          //   input,   width = 1,   clk.clk
		.reset            (~user_clk_src_clk_reset_reset), //   input,   width = 1, reset.reset
		.s0_waitrequest   (system_mm_waitrequest),         //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (system_mm_readdata),            //  output,  width = 32,      .readdata
		.s0_readdatavalid (system_mm_readdatavalid),       //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (system_mm_burstcount),          //   input,   width = 1,      .burstcount
		.s0_writedata     (system_mm_writedata),           //   input,  width = 32,      .writedata
		.s0_address       (system_mm_address),             //   input,  width = 11,      .address
		.s0_write         (system_mm_write),               //   input,   width = 1,      .write
		.s0_read          (system_mm_read),                //   input,   width = 1,      .read
		.s0_byteenable    (system_mm_byteenable),          //   input,   width = 4,      .byteenable
		.s0_debugaccess   (system_mm_debugaccess),         //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (reg_bridge_0_m0_waitrequest),   //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (reg_bridge_0_m0_readdata),      //   input,  width = 32,      .readdata
		.m0_readdatavalid (reg_bridge_0_m0_readdatavalid), //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (reg_bridge_0_m0_burstcount),    //  output,   width = 1,      .burstcount
		.m0_writedata     (reg_bridge_0_m0_writedata),     //  output,  width = 32,      .writedata
		.m0_address       (reg_bridge_0_m0_address),       //  output,  width = 11,      .address
		.m0_write         (reg_bridge_0_m0_write),         //  output,   width = 1,      .write
		.m0_read          (reg_bridge_0_m0_read),          //  output,   width = 1,      .read
		.m0_byteenable    (reg_bridge_0_m0_byteenable),    //  output,   width = 4,      .byteenable
		.m0_debugaccess   (reg_bridge_0_m0_debugaccess)    //  output,   width = 1,      .debugaccess
	);

	system_manager_mm_bridge_0 reg_bridge_1 (
		.clk              (config_clk_src_clk_clk),                          //   input,   width = 1,   clk.clk
		.reset            (rst_controller_reset_out_reset),                  //   input,   width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_1_reg_bridge_1_s0_waitrequest),   //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_1_reg_bridge_1_s0_readdata),      //  output,  width = 32,      .readdata
		.s0_readdatavalid (mm_interconnect_1_reg_bridge_1_s0_readdatavalid), //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_1_reg_bridge_1_s0_burstcount),    //   input,   width = 1,      .burstcount
		.s0_writedata     (mm_interconnect_1_reg_bridge_1_s0_writedata),     //   input,  width = 32,      .writedata
		.s0_address       (mm_interconnect_1_reg_bridge_1_s0_address),       //   input,  width = 11,      .address
		.s0_write         (mm_interconnect_1_reg_bridge_1_s0_write),         //   input,   width = 1,      .write
		.s0_read          (mm_interconnect_1_reg_bridge_1_s0_read),          //   input,   width = 1,      .read
		.s0_byteenable    (mm_interconnect_1_reg_bridge_1_s0_byteenable),    //   input,   width = 4,      .byteenable
		.s0_debugaccess   (mm_interconnect_1_reg_bridge_1_s0_debugaccess),   //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (reg_bridge_1_m0_waitrequest),                     //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (reg_bridge_1_m0_readdata),                        //   input,  width = 32,      .readdata
		.m0_readdatavalid (reg_bridge_1_m0_readdatavalid),                   //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (reg_bridge_1_m0_burstcount),                      //  output,   width = 1,      .burstcount
		.m0_writedata     (reg_bridge_1_m0_writedata),                       //  output,  width = 32,      .writedata
		.m0_address       (reg_bridge_1_m0_address),                         //  output,  width = 11,      .address
		.m0_write         (reg_bridge_1_m0_write),                           //  output,   width = 1,      .write
		.m0_read          (reg_bridge_1_m0_read),                            //  output,   width = 1,      .read
		.m0_byteenable    (reg_bridge_1_m0_byteenable),                      //  output,   width = 4,      .byteenable
		.m0_debugaccess   (reg_bridge_1_m0_debugaccess)                      //  output,   width = 1,      .debugaccess
	);

	system_manager_system_manager_if_0 system_manager_if (
		.clk                    (config_clk_src_clk_clk),                               //   input,   width = 1,                    clk.clk
		.rst                    (rst_controller_reset_out_reset),                       //   input,   width = 1,            Reset_Input.reset
		.pll_clk                (iopll_0_outclk0_clk),                                  //   input,   width = 1,                pll_clk.clk
		.conf_d                 (conf_d_conf_d),                                        //   inout,   width = 8,                 conf_d.conf_d
		.soft_reconfigure_req_n (soft_recfg_req_n_soft_reconfigure_req_n),              //  output,   width = 1, soft_reconfigure_req_n.soft_reconfigure_req_n
		.d_address              (system_manager_if_mem_if_address),                     //  output,  width = 10,                 mem_if.address
		.d_read                 (system_manager_if_mem_if_read),                        //  output,   width = 1,                       .read
		.d_write                (system_manager_if_mem_if_write),                       //  output,   width = 1,                       .write
		.d_readdata             (system_manager_if_mem_if_readdata),                    //   input,  width = 16,                       .readdata
		.d_writedata            (system_manager_if_mem_if_writedata),                   //  output,  width = 16,                       .writedata
		.d_waitrequest          (system_manager_if_mem_if_waitrequest),                 //   input,   width = 1,                       .waitrequest
		.c_address              (mm_interconnect_0_system_manager_if_reg_if_address),   //   input,   width = 8,                 reg_if.address
		.c_read                 (mm_interconnect_0_system_manager_if_reg_if_read),      //   input,   width = 1,                       .read
		.c_write                (mm_interconnect_0_system_manager_if_reg_if_write),     //   input,   width = 1,                       .write
		.c_readdata             (mm_interconnect_0_system_manager_if_reg_if_readdata),  //  output,  width = 32,                       .readdata
		.c_writedata            (mm_interconnect_0_system_manager_if_reg_if_writedata), //   input,  width = 32,                       .writedata
		.conf_c_out             (conf_c_out_conf_c_out),                                //  output,   width = 4,             conf_c_out.conf_c_out
		.conf_c_in              (conf_c_in_conf_c_in)                                   //   input,   width = 4,              conf_c_in.conf_c_in
	);

	system_manager_clk_2 user_clk_src (
		.in_clk      (user_clk_clk),                 //   input,  width = 1,       clk_in.clk
		.reset_n     (user_rstn_reset_n),            //   input,  width = 1, clk_in_reset.reset_n
		.clk_out     (user_clk_src_clk_clk),         //  output,  width = 1,          clk.clk
		.reset_n_out (user_clk_src_clk_reset_reset)  //  output,  width = 1,    clk_reset.reset_n
	);

	system_manager_altera_mm_interconnect_1920_ooqu7qq mm_interconnect_0 (
		.reg_bridge_1_m0_address                        (reg_bridge_1_m0_address),                              //   input,  width = 11,                          reg_bridge_1_m0.address
		.reg_bridge_1_m0_waitrequest                    (reg_bridge_1_m0_waitrequest),                          //  output,   width = 1,                                         .waitrequest
		.reg_bridge_1_m0_burstcount                     (reg_bridge_1_m0_burstcount),                           //   input,   width = 1,                                         .burstcount
		.reg_bridge_1_m0_byteenable                     (reg_bridge_1_m0_byteenable),                           //   input,   width = 4,                                         .byteenable
		.reg_bridge_1_m0_read                           (reg_bridge_1_m0_read),                                 //   input,   width = 1,                                         .read
		.reg_bridge_1_m0_readdata                       (reg_bridge_1_m0_readdata),                             //  output,  width = 32,                                         .readdata
		.reg_bridge_1_m0_readdatavalid                  (reg_bridge_1_m0_readdatavalid),                        //  output,   width = 1,                                         .readdatavalid
		.reg_bridge_1_m0_write                          (reg_bridge_1_m0_write),                                //   input,   width = 1,                                         .write
		.reg_bridge_1_m0_writedata                      (reg_bridge_1_m0_writedata),                            //   input,  width = 32,                                         .writedata
		.reg_bridge_1_m0_debugaccess                    (reg_bridge_1_m0_debugaccess),                          //   input,   width = 1,                                         .debugaccess
		.system_manager_if_reg_if_address               (mm_interconnect_0_system_manager_if_reg_if_address),   //  output,   width = 8,                 system_manager_if_reg_if.address
		.system_manager_if_reg_if_write                 (mm_interconnect_0_system_manager_if_reg_if_write),     //  output,   width = 1,                                         .write
		.system_manager_if_reg_if_read                  (mm_interconnect_0_system_manager_if_reg_if_read),      //  output,   width = 1,                                         .read
		.system_manager_if_reg_if_readdata              (mm_interconnect_0_system_manager_if_reg_if_readdata),  //   input,  width = 32,                                         .readdata
		.system_manager_if_reg_if_writedata             (mm_interconnect_0_system_manager_if_reg_if_writedata), //  output,  width = 32,                                         .writedata
		.flash_mem_buf_s1_address                       (mm_interconnect_0_flash_mem_buf_s1_address),           //  output,   width = 9,                         flash_mem_buf_s1.address
		.flash_mem_buf_s1_write                         (mm_interconnect_0_flash_mem_buf_s1_write),             //  output,   width = 1,                                         .write
		.flash_mem_buf_s1_readdata                      (mm_interconnect_0_flash_mem_buf_s1_readdata),          //   input,  width = 16,                                         .readdata
		.flash_mem_buf_s1_writedata                     (mm_interconnect_0_flash_mem_buf_s1_writedata),         //  output,  width = 16,                                         .writedata
		.flash_mem_buf_s1_byteenable                    (mm_interconnect_0_flash_mem_buf_s1_byteenable),        //  output,   width = 2,                                         .byteenable
		.flash_mem_buf_s1_chipselect                    (mm_interconnect_0_flash_mem_buf_s1_chipselect),        //  output,   width = 1,                                         .chipselect
		.flash_mem_buf_s1_clken                         (mm_interconnect_0_flash_mem_buf_s1_clken),             //  output,   width = 1,                                         .clken
		.reg_bridge_1_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                       //   input,   width = 1, reg_bridge_1_reset_reset_bridge_in_reset.reset
		.config_clk_src_clk_clk                         (config_clk_src_clk_clk)                                //   input,   width = 1,                       config_clk_src_clk.clk
	);

	system_manager_altera_mm_interconnect_1920_ssubmtq mm_interconnect_1 (
		.reg_bridge_0_m0_address                        (reg_bridge_0_m0_address),                         //   input,  width = 11,                          reg_bridge_0_m0.address
		.reg_bridge_0_m0_waitrequest                    (reg_bridge_0_m0_waitrequest),                     //  output,   width = 1,                                         .waitrequest
		.reg_bridge_0_m0_burstcount                     (reg_bridge_0_m0_burstcount),                      //   input,   width = 1,                                         .burstcount
		.reg_bridge_0_m0_byteenable                     (reg_bridge_0_m0_byteenable),                      //   input,   width = 4,                                         .byteenable
		.reg_bridge_0_m0_read                           (reg_bridge_0_m0_read),                            //   input,   width = 1,                                         .read
		.reg_bridge_0_m0_readdata                       (reg_bridge_0_m0_readdata),                        //  output,  width = 32,                                         .readdata
		.reg_bridge_0_m0_readdatavalid                  (reg_bridge_0_m0_readdatavalid),                   //  output,   width = 1,                                         .readdatavalid
		.reg_bridge_0_m0_write                          (reg_bridge_0_m0_write),                           //   input,   width = 1,                                         .write
		.reg_bridge_0_m0_writedata                      (reg_bridge_0_m0_writedata),                       //   input,  width = 32,                                         .writedata
		.reg_bridge_0_m0_debugaccess                    (reg_bridge_0_m0_debugaccess),                     //   input,   width = 1,                                         .debugaccess
		.reg_bridge_1_s0_address                        (mm_interconnect_1_reg_bridge_1_s0_address),       //  output,  width = 11,                          reg_bridge_1_s0.address
		.reg_bridge_1_s0_write                          (mm_interconnect_1_reg_bridge_1_s0_write),         //  output,   width = 1,                                         .write
		.reg_bridge_1_s0_read                           (mm_interconnect_1_reg_bridge_1_s0_read),          //  output,   width = 1,                                         .read
		.reg_bridge_1_s0_readdata                       (mm_interconnect_1_reg_bridge_1_s0_readdata),      //   input,  width = 32,                                         .readdata
		.reg_bridge_1_s0_writedata                      (mm_interconnect_1_reg_bridge_1_s0_writedata),     //  output,  width = 32,                                         .writedata
		.reg_bridge_1_s0_burstcount                     (mm_interconnect_1_reg_bridge_1_s0_burstcount),    //  output,   width = 1,                                         .burstcount
		.reg_bridge_1_s0_byteenable                     (mm_interconnect_1_reg_bridge_1_s0_byteenable),    //  output,   width = 4,                                         .byteenable
		.reg_bridge_1_s0_readdatavalid                  (mm_interconnect_1_reg_bridge_1_s0_readdatavalid), //   input,   width = 1,                                         .readdatavalid
		.reg_bridge_1_s0_waitrequest                    (mm_interconnect_1_reg_bridge_1_s0_waitrequest),   //   input,   width = 1,                                         .waitrequest
		.reg_bridge_1_s0_debugaccess                    (mm_interconnect_1_reg_bridge_1_s0_debugaccess),   //  output,   width = 1,                                         .debugaccess
		.reg_bridge_0_reset_reset_bridge_in_reset_reset (~user_clk_src_clk_reset_reset),                   //   input,   width = 1, reg_bridge_0_reset_reset_bridge_in_reset.reset
		.reg_bridge_1_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                  //   input,   width = 1, reg_bridge_1_reset_reset_bridge_in_reset.reset
		.user_clk_src_clk_clk                           (user_clk_src_clk_clk),                            //   input,   width = 1,                         user_clk_src_clk.clk
		.config_clk_src_clk_clk                         (config_clk_src_clk_clk)                           //   input,   width = 1,                       config_clk_src_clk.clk
	);

	system_manager_altera_mm_interconnect_1920_wythply mm_interconnect_2 (
		.system_manager_if_mem_if_address                                      (system_manager_if_mem_if_address),              //   input,  width = 10,                                        system_manager_if_mem_if.address
		.system_manager_if_mem_if_waitrequest                                  (system_manager_if_mem_if_waitrequest),          //  output,   width = 1,                                                                .waitrequest
		.system_manager_if_mem_if_read                                         (system_manager_if_mem_if_read),                 //   input,   width = 1,                                                                .read
		.system_manager_if_mem_if_readdata                                     (system_manager_if_mem_if_readdata),             //  output,  width = 16,                                                                .readdata
		.system_manager_if_mem_if_write                                        (system_manager_if_mem_if_write),                //   input,   width = 1,                                                                .write
		.system_manager_if_mem_if_writedata                                    (system_manager_if_mem_if_writedata),            //   input,  width = 16,                                                                .writedata
		.flash_mem_buf_s2_address                                              (mm_interconnect_2_flash_mem_buf_s2_address),    //  output,   width = 9,                                                flash_mem_buf_s2.address
		.flash_mem_buf_s2_write                                                (mm_interconnect_2_flash_mem_buf_s2_write),      //  output,   width = 1,                                                                .write
		.flash_mem_buf_s2_readdata                                             (mm_interconnect_2_flash_mem_buf_s2_readdata),   //   input,  width = 16,                                                                .readdata
		.flash_mem_buf_s2_writedata                                            (mm_interconnect_2_flash_mem_buf_s2_writedata),  //  output,  width = 16,                                                                .writedata
		.flash_mem_buf_s2_byteenable                                           (mm_interconnect_2_flash_mem_buf_s2_byteenable), //  output,   width = 2,                                                                .byteenable
		.flash_mem_buf_s2_chipselect                                           (mm_interconnect_2_flash_mem_buf_s2_chipselect), //  output,   width = 1,                                                                .chipselect
		.flash_mem_buf_s2_clken                                                (mm_interconnect_2_flash_mem_buf_s2_clken),      //  output,   width = 1,                                                                .clken
		.system_manager_if_mem_if_translator_reset_reset_bridge_in_reset_reset (rst_controller_001_reset_out_reset),            //   input,   width = 1, system_manager_if_mem_if_translator_reset_reset_bridge_in_reset.reset
		.config_clk_src_clk_clk                                                (config_clk_src_clk_clk)                         //   input,   width = 1,                                              config_clk_src_clk.clk
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~config_clk_src_clk_reset_reset),    //   input,  width = 1, reset_in0.reset
		.clk            (config_clk_src_clk_clk),             //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     //  output,  width = 1, reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //  output,  width = 1,          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("both"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~config_clk_src_clk_reset_reset),    //   input,  width = 1, reset_in0.reset
		.clk            (config_clk_src_clk_clk),             //   input,  width = 1,       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), //  output,  width = 1, reset_out.reset
		.reset_req      (),                                   // (terminated),                       
		.reset_req_in0  (1'b0),                               // (terminated),                       
		.reset_in1      (1'b0),                               // (terminated),                       
		.reset_req_in1  (1'b0),                               // (terminated),                       
		.reset_in2      (1'b0),                               // (terminated),                       
		.reset_req_in2  (1'b0),                               // (terminated),                       
		.reset_in3      (1'b0),                               // (terminated),                       
		.reset_req_in3  (1'b0),                               // (terminated),                       
		.reset_in4      (1'b0),                               // (terminated),                       
		.reset_req_in4  (1'b0),                               // (terminated),                       
		.reset_in5      (1'b0),                               // (terminated),                       
		.reset_req_in5  (1'b0),                               // (terminated),                       
		.reset_in6      (1'b0),                               // (terminated),                       
		.reset_req_in6  (1'b0),                               // (terminated),                       
		.reset_in7      (1'b0),                               // (terminated),                       
		.reset_req_in7  (1'b0),                               // (terminated),                       
		.reset_in8      (1'b0),                               // (terminated),                       
		.reset_req_in8  (1'b0),                               // (terminated),                       
		.reset_in9      (1'b0),                               // (terminated),                       
		.reset_req_in9  (1'b0),                               // (terminated),                       
		.reset_in10     (1'b0),                               // (terminated),                       
		.reset_req_in10 (1'b0),                               // (terminated),                       
		.reset_in11     (1'b0),                               // (terminated),                       
		.reset_req_in11 (1'b0),                               // (terminated),                       
		.reset_in12     (1'b0),                               // (terminated),                       
		.reset_req_in12 (1'b0),                               // (terminated),                       
		.reset_in13     (1'b0),                               // (terminated),                       
		.reset_req_in13 (1'b0),                               // (terminated),                       
		.reset_in14     (1'b0),                               // (terminated),                       
		.reset_req_in14 (1'b0),                               // (terminated),                       
		.reset_in15     (1'b0),                               // (terminated),                       
		.reset_req_in15 (1'b0)                                // (terminated),                       
	);

endmodule
