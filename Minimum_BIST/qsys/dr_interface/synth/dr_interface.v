// dr_interface.v

// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module dr_interface (
		input  wire        config_clk_clk,           //     config_clk.clk
		input  wire        config_rstn_reset_n,      //    config_rstn.reset_n
		input  wire        pcie_user_clk_clk,        //  pcie_user_clk.clk
		input  wire        pcie_user_rstn_reset_n,   // pcie_user_rstn.reset_n
		input  wire        avmm_phy_0_waitrequest,   //     avmm_phy_0.waitrequest
		input  wire [31:0] avmm_phy_0_readdata,      //               .readdata
		input  wire        avmm_phy_0_readdatavalid, //               .readdatavalid
		output wire [0:0]  avmm_phy_0_burstcount,    //               .burstcount
		output wire [31:0] avmm_phy_0_writedata,     //               .writedata
		output wire [12:0] avmm_phy_0_address,       //               .address
		output wire        avmm_phy_0_write,         //               .write
		output wire        avmm_phy_0_read,          //               .read
		output wire [3:0]  avmm_phy_0_byteenable,    //               .byteenable
		output wire        avmm_phy_0_debugaccess,   //               .debugaccess
		input  wire        avmm_phy_1_waitrequest,   //     avmm_phy_1.waitrequest
		input  wire [31:0] avmm_phy_1_readdata,      //               .readdata
		input  wire        avmm_phy_1_readdatavalid, //               .readdatavalid
		output wire [0:0]  avmm_phy_1_burstcount,    //               .burstcount
		output wire [31:0] avmm_phy_1_writedata,     //               .writedata
		output wire [12:0] avmm_phy_1_address,       //               .address
		output wire        avmm_phy_1_write,         //               .write
		output wire        avmm_phy_1_read,          //               .read
		output wire [3:0]  avmm_phy_1_byteenable,    //               .byteenable
		output wire        avmm_phy_1_debugaccess,   //               .debugaccess
		input  wire        avmm_phy_2_waitrequest,   //     avmm_phy_2.waitrequest
		input  wire [31:0] avmm_phy_2_readdata,      //               .readdata
		input  wire        avmm_phy_2_readdatavalid, //               .readdatavalid
		output wire [0:0]  avmm_phy_2_burstcount,    //               .burstcount
		output wire [31:0] avmm_phy_2_writedata,     //               .writedata
		output wire [12:0] avmm_phy_2_address,       //               .address
		output wire        avmm_phy_2_write,         //               .write
		output wire        avmm_phy_2_read,          //               .read
		output wire [3:0]  avmm_phy_2_byteenable,    //               .byteenable
		output wire        avmm_phy_2_debugaccess,   //               .debugaccess
		input  wire        avmm_phy_3_waitrequest,   //     avmm_phy_3.waitrequest
		input  wire [31:0] avmm_phy_3_readdata,      //               .readdata
		input  wire        avmm_phy_3_readdatavalid, //               .readdatavalid
		output wire [0:0]  avmm_phy_3_burstcount,    //               .burstcount
		output wire [31:0] avmm_phy_3_writedata,     //               .writedata
		output wire [12:0] avmm_phy_3_address,       //               .address
		output wire        avmm_phy_3_write,         //               .write
		output wire        avmm_phy_3_read,          //               .read
		output wire [3:0]  avmm_phy_3_byteenable,    //               .byteenable
		output wire        avmm_phy_3_debugaccess,   //               .debugaccess
		output wire        avmm_slave_waitrequest,   //     avmm_slave.waitrequest
		output wire [31:0] avmm_slave_readdata,      //               .readdata
		output wire        avmm_slave_readdatavalid, //               .readdatavalid
		input  wire [0:0]  avmm_slave_burstcount,    //               .burstcount
		input  wire [31:0] avmm_slave_writedata,     //               .writedata
		input  wire [17:0] avmm_slave_address,       //               .address
		input  wire        avmm_slave_write,         //               .write
		input  wire        avmm_slave_read,          //               .read
		input  wire [3:0]  avmm_slave_byteenable,    //               .byteenable
		input  wire        avmm_slave_debugaccess    //               .debugaccess
	);

	wire         dr_clk_config_clk_clk;                                 // dr_clk_config:clk_out -> [dr_mm_bridge_phy_0:clk, dr_mm_bridge_phy_1:clk, dr_mm_bridge_phy_2:clk, dr_mm_bridge_phy_3:clk, dr_mm_clock_crossing_bridge:m0_clk, mm_interconnect_0:dr_clk_config_clk_clk]
	wire         dr_clk_pcie_user_clk_clk;                              // dr_clk_pcie_user:clk_out -> dr_mm_clock_crossing_bridge:s0_clk
	wire         dr_clk_config_clk_reset_reset;                         // dr_clk_config:reset_n_out -> [dr_mm_bridge_phy_0:reset, dr_mm_bridge_phy_1:reset, dr_mm_bridge_phy_2:reset, dr_mm_bridge_phy_3:reset, dr_mm_clock_crossing_bridge:m0_reset, mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_reset_reset_bridge_in_reset_reset]
	wire         dr_clk_pcie_user_clk_reset_reset;                      // dr_clk_pcie_user:reset_n_out -> dr_mm_clock_crossing_bridge:s0_reset
	wire         dr_mm_clock_crossing_bridge_m0_waitrequest;            // mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_waitrequest -> dr_mm_clock_crossing_bridge:m0_waitrequest
	wire  [31:0] dr_mm_clock_crossing_bridge_m0_readdata;               // mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_readdata -> dr_mm_clock_crossing_bridge:m0_readdata
	wire         dr_mm_clock_crossing_bridge_m0_debugaccess;            // dr_mm_clock_crossing_bridge:m0_debugaccess -> mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_debugaccess
	wire  [17:0] dr_mm_clock_crossing_bridge_m0_address;                // dr_mm_clock_crossing_bridge:m0_address -> mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_address
	wire         dr_mm_clock_crossing_bridge_m0_read;                   // dr_mm_clock_crossing_bridge:m0_read -> mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_read
	wire   [3:0] dr_mm_clock_crossing_bridge_m0_byteenable;             // dr_mm_clock_crossing_bridge:m0_byteenable -> mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_byteenable
	wire         dr_mm_clock_crossing_bridge_m0_readdatavalid;          // mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_readdatavalid -> dr_mm_clock_crossing_bridge:m0_readdatavalid
	wire  [31:0] dr_mm_clock_crossing_bridge_m0_writedata;              // dr_mm_clock_crossing_bridge:m0_writedata -> mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_writedata
	wire         dr_mm_clock_crossing_bridge_m0_write;                  // dr_mm_clock_crossing_bridge:m0_write -> mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_write
	wire   [0:0] dr_mm_clock_crossing_bridge_m0_burstcount;             // dr_mm_clock_crossing_bridge:m0_burstcount -> mm_interconnect_0:dr_mm_clock_crossing_bridge_m0_burstcount
	wire  [31:0] mm_interconnect_0_dr_mm_bridge_phy_0_s0_readdata;      // dr_mm_bridge_phy_0:s0_readdata -> mm_interconnect_0:dr_mm_bridge_phy_0_s0_readdata
	wire         mm_interconnect_0_dr_mm_bridge_phy_0_s0_waitrequest;   // dr_mm_bridge_phy_0:s0_waitrequest -> mm_interconnect_0:dr_mm_bridge_phy_0_s0_waitrequest
	wire         mm_interconnect_0_dr_mm_bridge_phy_0_s0_debugaccess;   // mm_interconnect_0:dr_mm_bridge_phy_0_s0_debugaccess -> dr_mm_bridge_phy_0:s0_debugaccess
	wire  [12:0] mm_interconnect_0_dr_mm_bridge_phy_0_s0_address;       // mm_interconnect_0:dr_mm_bridge_phy_0_s0_address -> dr_mm_bridge_phy_0:s0_address
	wire         mm_interconnect_0_dr_mm_bridge_phy_0_s0_read;          // mm_interconnect_0:dr_mm_bridge_phy_0_s0_read -> dr_mm_bridge_phy_0:s0_read
	wire   [3:0] mm_interconnect_0_dr_mm_bridge_phy_0_s0_byteenable;    // mm_interconnect_0:dr_mm_bridge_phy_0_s0_byteenable -> dr_mm_bridge_phy_0:s0_byteenable
	wire         mm_interconnect_0_dr_mm_bridge_phy_0_s0_readdatavalid; // dr_mm_bridge_phy_0:s0_readdatavalid -> mm_interconnect_0:dr_mm_bridge_phy_0_s0_readdatavalid
	wire         mm_interconnect_0_dr_mm_bridge_phy_0_s0_write;         // mm_interconnect_0:dr_mm_bridge_phy_0_s0_write -> dr_mm_bridge_phy_0:s0_write
	wire  [31:0] mm_interconnect_0_dr_mm_bridge_phy_0_s0_writedata;     // mm_interconnect_0:dr_mm_bridge_phy_0_s0_writedata -> dr_mm_bridge_phy_0:s0_writedata
	wire   [0:0] mm_interconnect_0_dr_mm_bridge_phy_0_s0_burstcount;    // mm_interconnect_0:dr_mm_bridge_phy_0_s0_burstcount -> dr_mm_bridge_phy_0:s0_burstcount
	wire  [31:0] mm_interconnect_0_dr_mm_bridge_phy_1_s0_readdata;      // dr_mm_bridge_phy_1:s0_readdata -> mm_interconnect_0:dr_mm_bridge_phy_1_s0_readdata
	wire         mm_interconnect_0_dr_mm_bridge_phy_1_s0_waitrequest;   // dr_mm_bridge_phy_1:s0_waitrequest -> mm_interconnect_0:dr_mm_bridge_phy_1_s0_waitrequest
	wire         mm_interconnect_0_dr_mm_bridge_phy_1_s0_debugaccess;   // mm_interconnect_0:dr_mm_bridge_phy_1_s0_debugaccess -> dr_mm_bridge_phy_1:s0_debugaccess
	wire  [12:0] mm_interconnect_0_dr_mm_bridge_phy_1_s0_address;       // mm_interconnect_0:dr_mm_bridge_phy_1_s0_address -> dr_mm_bridge_phy_1:s0_address
	wire         mm_interconnect_0_dr_mm_bridge_phy_1_s0_read;          // mm_interconnect_0:dr_mm_bridge_phy_1_s0_read -> dr_mm_bridge_phy_1:s0_read
	wire   [3:0] mm_interconnect_0_dr_mm_bridge_phy_1_s0_byteenable;    // mm_interconnect_0:dr_mm_bridge_phy_1_s0_byteenable -> dr_mm_bridge_phy_1:s0_byteenable
	wire         mm_interconnect_0_dr_mm_bridge_phy_1_s0_readdatavalid; // dr_mm_bridge_phy_1:s0_readdatavalid -> mm_interconnect_0:dr_mm_bridge_phy_1_s0_readdatavalid
	wire         mm_interconnect_0_dr_mm_bridge_phy_1_s0_write;         // mm_interconnect_0:dr_mm_bridge_phy_1_s0_write -> dr_mm_bridge_phy_1:s0_write
	wire  [31:0] mm_interconnect_0_dr_mm_bridge_phy_1_s0_writedata;     // mm_interconnect_0:dr_mm_bridge_phy_1_s0_writedata -> dr_mm_bridge_phy_1:s0_writedata
	wire   [0:0] mm_interconnect_0_dr_mm_bridge_phy_1_s0_burstcount;    // mm_interconnect_0:dr_mm_bridge_phy_1_s0_burstcount -> dr_mm_bridge_phy_1:s0_burstcount
	wire  [31:0] mm_interconnect_0_dr_mm_bridge_phy_2_s0_readdata;      // dr_mm_bridge_phy_2:s0_readdata -> mm_interconnect_0:dr_mm_bridge_phy_2_s0_readdata
	wire         mm_interconnect_0_dr_mm_bridge_phy_2_s0_waitrequest;   // dr_mm_bridge_phy_2:s0_waitrequest -> mm_interconnect_0:dr_mm_bridge_phy_2_s0_waitrequest
	wire         mm_interconnect_0_dr_mm_bridge_phy_2_s0_debugaccess;   // mm_interconnect_0:dr_mm_bridge_phy_2_s0_debugaccess -> dr_mm_bridge_phy_2:s0_debugaccess
	wire  [12:0] mm_interconnect_0_dr_mm_bridge_phy_2_s0_address;       // mm_interconnect_0:dr_mm_bridge_phy_2_s0_address -> dr_mm_bridge_phy_2:s0_address
	wire         mm_interconnect_0_dr_mm_bridge_phy_2_s0_read;          // mm_interconnect_0:dr_mm_bridge_phy_2_s0_read -> dr_mm_bridge_phy_2:s0_read
	wire   [3:0] mm_interconnect_0_dr_mm_bridge_phy_2_s0_byteenable;    // mm_interconnect_0:dr_mm_bridge_phy_2_s0_byteenable -> dr_mm_bridge_phy_2:s0_byteenable
	wire         mm_interconnect_0_dr_mm_bridge_phy_2_s0_readdatavalid; // dr_mm_bridge_phy_2:s0_readdatavalid -> mm_interconnect_0:dr_mm_bridge_phy_2_s0_readdatavalid
	wire         mm_interconnect_0_dr_mm_bridge_phy_2_s0_write;         // mm_interconnect_0:dr_mm_bridge_phy_2_s0_write -> dr_mm_bridge_phy_2:s0_write
	wire  [31:0] mm_interconnect_0_dr_mm_bridge_phy_2_s0_writedata;     // mm_interconnect_0:dr_mm_bridge_phy_2_s0_writedata -> dr_mm_bridge_phy_2:s0_writedata
	wire   [0:0] mm_interconnect_0_dr_mm_bridge_phy_2_s0_burstcount;    // mm_interconnect_0:dr_mm_bridge_phy_2_s0_burstcount -> dr_mm_bridge_phy_2:s0_burstcount
	wire  [31:0] mm_interconnect_0_dr_mm_bridge_phy_3_s0_readdata;      // dr_mm_bridge_phy_3:s0_readdata -> mm_interconnect_0:dr_mm_bridge_phy_3_s0_readdata
	wire         mm_interconnect_0_dr_mm_bridge_phy_3_s0_waitrequest;   // dr_mm_bridge_phy_3:s0_waitrequest -> mm_interconnect_0:dr_mm_bridge_phy_3_s0_waitrequest
	wire         mm_interconnect_0_dr_mm_bridge_phy_3_s0_debugaccess;   // mm_interconnect_0:dr_mm_bridge_phy_3_s0_debugaccess -> dr_mm_bridge_phy_3:s0_debugaccess
	wire  [12:0] mm_interconnect_0_dr_mm_bridge_phy_3_s0_address;       // mm_interconnect_0:dr_mm_bridge_phy_3_s0_address -> dr_mm_bridge_phy_3:s0_address
	wire         mm_interconnect_0_dr_mm_bridge_phy_3_s0_read;          // mm_interconnect_0:dr_mm_bridge_phy_3_s0_read -> dr_mm_bridge_phy_3:s0_read
	wire   [3:0] mm_interconnect_0_dr_mm_bridge_phy_3_s0_byteenable;    // mm_interconnect_0:dr_mm_bridge_phy_3_s0_byteenable -> dr_mm_bridge_phy_3:s0_byteenable
	wire         mm_interconnect_0_dr_mm_bridge_phy_3_s0_readdatavalid; // dr_mm_bridge_phy_3:s0_readdatavalid -> mm_interconnect_0:dr_mm_bridge_phy_3_s0_readdatavalid
	wire         mm_interconnect_0_dr_mm_bridge_phy_3_s0_write;         // mm_interconnect_0:dr_mm_bridge_phy_3_s0_write -> dr_mm_bridge_phy_3:s0_write
	wire  [31:0] mm_interconnect_0_dr_mm_bridge_phy_3_s0_writedata;     // mm_interconnect_0:dr_mm_bridge_phy_3_s0_writedata -> dr_mm_bridge_phy_3:s0_writedata
	wire   [0:0] mm_interconnect_0_dr_mm_bridge_phy_3_s0_burstcount;    // mm_interconnect_0:dr_mm_bridge_phy_3_s0_burstcount -> dr_mm_bridge_phy_3:s0_burstcount

	dr_clk_config dr_clk_config (
		.in_clk      (config_clk_clk),                //   input,  width = 1,       clk_in.clk
		.reset_n     (config_rstn_reset_n),           //   input,  width = 1, clk_in_reset.reset_n
		.clk_out     (dr_clk_config_clk_clk),         //  output,  width = 1,          clk.clk
		.reset_n_out (dr_clk_config_clk_reset_reset)  //  output,  width = 1,    clk_reset.reset_n
	);

	dr_clk_pcie_user dr_clk_pcie_user (
		.in_clk      (pcie_user_clk_clk),                //   input,  width = 1,       clk_in.clk
		.reset_n     (pcie_user_rstn_reset_n),           //   input,  width = 1, clk_in_reset.reset_n
		.clk_out     (dr_clk_pcie_user_clk_clk),         //  output,  width = 1,          clk.clk
		.reset_n_out (dr_clk_pcie_user_clk_reset_reset)  //  output,  width = 1,    clk_reset.reset_n
	);

	dr_mm_bridge_1 dr_mm_bridge_phy_0 (
		.clk              (dr_clk_config_clk_clk),                                 //   input,   width = 1,   clk.clk
		.reset            (~dr_clk_config_clk_reset_reset),                        //   input,   width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_dr_mm_bridge_phy_0_s0_waitrequest),   //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_dr_mm_bridge_phy_0_s0_readdata),      //  output,  width = 32,      .readdata
		.s0_readdatavalid (mm_interconnect_0_dr_mm_bridge_phy_0_s0_readdatavalid), //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_dr_mm_bridge_phy_0_s0_burstcount),    //   input,   width = 1,      .burstcount
		.s0_writedata     (mm_interconnect_0_dr_mm_bridge_phy_0_s0_writedata),     //   input,  width = 32,      .writedata
		.s0_address       (mm_interconnect_0_dr_mm_bridge_phy_0_s0_address),       //   input,  width = 13,      .address
		.s0_write         (mm_interconnect_0_dr_mm_bridge_phy_0_s0_write),         //   input,   width = 1,      .write
		.s0_read          (mm_interconnect_0_dr_mm_bridge_phy_0_s0_read),          //   input,   width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_dr_mm_bridge_phy_0_s0_byteenable),    //   input,   width = 4,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_dr_mm_bridge_phy_0_s0_debugaccess),   //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (avmm_phy_0_waitrequest),                                //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (avmm_phy_0_readdata),                                   //   input,  width = 32,      .readdata
		.m0_readdatavalid (avmm_phy_0_readdatavalid),                              //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (avmm_phy_0_burstcount),                                 //  output,   width = 1,      .burstcount
		.m0_writedata     (avmm_phy_0_writedata),                                  //  output,  width = 32,      .writedata
		.m0_address       (avmm_phy_0_address),                                    //  output,  width = 13,      .address
		.m0_write         (avmm_phy_0_write),                                      //  output,   width = 1,      .write
		.m0_read          (avmm_phy_0_read),                                       //  output,   width = 1,      .read
		.m0_byteenable    (avmm_phy_0_byteenable),                                 //  output,   width = 4,      .byteenable
		.m0_debugaccess   (avmm_phy_0_debugaccess)                                 //  output,   width = 1,      .debugaccess
	);

	dr_mm_bridge_1 dr_mm_bridge_phy_1 (
		.clk              (dr_clk_config_clk_clk),                                 //   input,   width = 1,   clk.clk
		.reset            (~dr_clk_config_clk_reset_reset),                        //   input,   width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_dr_mm_bridge_phy_1_s0_waitrequest),   //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_dr_mm_bridge_phy_1_s0_readdata),      //  output,  width = 32,      .readdata
		.s0_readdatavalid (mm_interconnect_0_dr_mm_bridge_phy_1_s0_readdatavalid), //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_dr_mm_bridge_phy_1_s0_burstcount),    //   input,   width = 1,      .burstcount
		.s0_writedata     (mm_interconnect_0_dr_mm_bridge_phy_1_s0_writedata),     //   input,  width = 32,      .writedata
		.s0_address       (mm_interconnect_0_dr_mm_bridge_phy_1_s0_address),       //   input,  width = 13,      .address
		.s0_write         (mm_interconnect_0_dr_mm_bridge_phy_1_s0_write),         //   input,   width = 1,      .write
		.s0_read          (mm_interconnect_0_dr_mm_bridge_phy_1_s0_read),          //   input,   width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_dr_mm_bridge_phy_1_s0_byteenable),    //   input,   width = 4,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_dr_mm_bridge_phy_1_s0_debugaccess),   //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (avmm_phy_1_waitrequest),                                //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (avmm_phy_1_readdata),                                   //   input,  width = 32,      .readdata
		.m0_readdatavalid (avmm_phy_1_readdatavalid),                              //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (avmm_phy_1_burstcount),                                 //  output,   width = 1,      .burstcount
		.m0_writedata     (avmm_phy_1_writedata),                                  //  output,  width = 32,      .writedata
		.m0_address       (avmm_phy_1_address),                                    //  output,  width = 13,      .address
		.m0_write         (avmm_phy_1_write),                                      //  output,   width = 1,      .write
		.m0_read          (avmm_phy_1_read),                                       //  output,   width = 1,      .read
		.m0_byteenable    (avmm_phy_1_byteenable),                                 //  output,   width = 4,      .byteenable
		.m0_debugaccess   (avmm_phy_1_debugaccess)                                 //  output,   width = 1,      .debugaccess
	);

	dr_mm_bridge_1 dr_mm_bridge_phy_2 (
		.clk              (dr_clk_config_clk_clk),                                 //   input,   width = 1,   clk.clk
		.reset            (~dr_clk_config_clk_reset_reset),                        //   input,   width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_dr_mm_bridge_phy_2_s0_waitrequest),   //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_dr_mm_bridge_phy_2_s0_readdata),      //  output,  width = 32,      .readdata
		.s0_readdatavalid (mm_interconnect_0_dr_mm_bridge_phy_2_s0_readdatavalid), //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_dr_mm_bridge_phy_2_s0_burstcount),    //   input,   width = 1,      .burstcount
		.s0_writedata     (mm_interconnect_0_dr_mm_bridge_phy_2_s0_writedata),     //   input,  width = 32,      .writedata
		.s0_address       (mm_interconnect_0_dr_mm_bridge_phy_2_s0_address),       //   input,  width = 13,      .address
		.s0_write         (mm_interconnect_0_dr_mm_bridge_phy_2_s0_write),         //   input,   width = 1,      .write
		.s0_read          (mm_interconnect_0_dr_mm_bridge_phy_2_s0_read),          //   input,   width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_dr_mm_bridge_phy_2_s0_byteenable),    //   input,   width = 4,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_dr_mm_bridge_phy_2_s0_debugaccess),   //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (avmm_phy_2_waitrequest),                                //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (avmm_phy_2_readdata),                                   //   input,  width = 32,      .readdata
		.m0_readdatavalid (avmm_phy_2_readdatavalid),                              //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (avmm_phy_2_burstcount),                                 //  output,   width = 1,      .burstcount
		.m0_writedata     (avmm_phy_2_writedata),                                  //  output,  width = 32,      .writedata
		.m0_address       (avmm_phy_2_address),                                    //  output,  width = 13,      .address
		.m0_write         (avmm_phy_2_write),                                      //  output,   width = 1,      .write
		.m0_read          (avmm_phy_2_read),                                       //  output,   width = 1,      .read
		.m0_byteenable    (avmm_phy_2_byteenable),                                 //  output,   width = 4,      .byteenable
		.m0_debugaccess   (avmm_phy_2_debugaccess)                                 //  output,   width = 1,      .debugaccess
	);

	dr_mm_bridge_1 dr_mm_bridge_phy_3 (
		.clk              (dr_clk_config_clk_clk),                                 //   input,   width = 1,   clk.clk
		.reset            (~dr_clk_config_clk_reset_reset),                        //   input,   width = 1, reset.reset
		.s0_waitrequest   (mm_interconnect_0_dr_mm_bridge_phy_3_s0_waitrequest),   //  output,   width = 1,    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_dr_mm_bridge_phy_3_s0_readdata),      //  output,  width = 32,      .readdata
		.s0_readdatavalid (mm_interconnect_0_dr_mm_bridge_phy_3_s0_readdatavalid), //  output,   width = 1,      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_dr_mm_bridge_phy_3_s0_burstcount),    //   input,   width = 1,      .burstcount
		.s0_writedata     (mm_interconnect_0_dr_mm_bridge_phy_3_s0_writedata),     //   input,  width = 32,      .writedata
		.s0_address       (mm_interconnect_0_dr_mm_bridge_phy_3_s0_address),       //   input,  width = 13,      .address
		.s0_write         (mm_interconnect_0_dr_mm_bridge_phy_3_s0_write),         //   input,   width = 1,      .write
		.s0_read          (mm_interconnect_0_dr_mm_bridge_phy_3_s0_read),          //   input,   width = 1,      .read
		.s0_byteenable    (mm_interconnect_0_dr_mm_bridge_phy_3_s0_byteenable),    //   input,   width = 4,      .byteenable
		.s0_debugaccess   (mm_interconnect_0_dr_mm_bridge_phy_3_s0_debugaccess),   //   input,   width = 1,      .debugaccess
		.m0_waitrequest   (avmm_phy_3_waitrequest),                                //   input,   width = 1,    m0.waitrequest
		.m0_readdata      (avmm_phy_3_readdata),                                   //   input,  width = 32,      .readdata
		.m0_readdatavalid (avmm_phy_3_readdatavalid),                              //   input,   width = 1,      .readdatavalid
		.m0_burstcount    (avmm_phy_3_burstcount),                                 //  output,   width = 1,      .burstcount
		.m0_writedata     (avmm_phy_3_writedata),                                  //  output,  width = 32,      .writedata
		.m0_address       (avmm_phy_3_address),                                    //  output,  width = 13,      .address
		.m0_write         (avmm_phy_3_write),                                      //  output,   width = 1,      .write
		.m0_read          (avmm_phy_3_read),                                       //  output,   width = 1,      .read
		.m0_byteenable    (avmm_phy_3_byteenable),                                 //  output,   width = 4,      .byteenable
		.m0_debugaccess   (avmm_phy_3_debugaccess)                                 //  output,   width = 1,      .debugaccess
	);

	dr_mm_clock_crossing_bridge dr_mm_clock_crossing_bridge (
		.m0_clk           (dr_clk_config_clk_clk),                        //   input,   width = 1,   m0_clk.clk
		.m0_reset         (~dr_clk_config_clk_reset_reset),               //   input,   width = 1, m0_reset.reset
		.s0_clk           (dr_clk_pcie_user_clk_clk),                     //   input,   width = 1,   s0_clk.clk
		.s0_reset         (~dr_clk_pcie_user_clk_reset_reset),            //   input,   width = 1, s0_reset.reset
		.s0_waitrequest   (avmm_slave_waitrequest),                       //  output,   width = 1,       s0.waitrequest
		.s0_readdata      (avmm_slave_readdata),                          //  output,  width = 32,         .readdata
		.s0_readdatavalid (avmm_slave_readdatavalid),                     //  output,   width = 1,         .readdatavalid
		.s0_burstcount    (avmm_slave_burstcount),                        //   input,   width = 1,         .burstcount
		.s0_writedata     (avmm_slave_writedata),                         //   input,  width = 32,         .writedata
		.s0_address       (avmm_slave_address),                           //   input,  width = 18,         .address
		.s0_write         (avmm_slave_write),                             //   input,   width = 1,         .write
		.s0_read          (avmm_slave_read),                              //   input,   width = 1,         .read
		.s0_byteenable    (avmm_slave_byteenable),                        //   input,   width = 4,         .byteenable
		.s0_debugaccess   (avmm_slave_debugaccess),                       //   input,   width = 1,         .debugaccess
		.m0_waitrequest   (dr_mm_clock_crossing_bridge_m0_waitrequest),   //   input,   width = 1,       m0.waitrequest
		.m0_readdata      (dr_mm_clock_crossing_bridge_m0_readdata),      //   input,  width = 32,         .readdata
		.m0_readdatavalid (dr_mm_clock_crossing_bridge_m0_readdatavalid), //   input,   width = 1,         .readdatavalid
		.m0_burstcount    (dr_mm_clock_crossing_bridge_m0_burstcount),    //  output,   width = 1,         .burstcount
		.m0_writedata     (dr_mm_clock_crossing_bridge_m0_writedata),     //  output,  width = 32,         .writedata
		.m0_address       (dr_mm_clock_crossing_bridge_m0_address),       //  output,  width = 18,         .address
		.m0_write         (dr_mm_clock_crossing_bridge_m0_write),         //  output,   width = 1,         .write
		.m0_read          (dr_mm_clock_crossing_bridge_m0_read),          //  output,   width = 1,         .read
		.m0_byteenable    (dr_mm_clock_crossing_bridge_m0_byteenable),    //  output,   width = 4,         .byteenable
		.m0_debugaccess   (dr_mm_clock_crossing_bridge_m0_debugaccess)    //  output,   width = 1,         .debugaccess
	);

	dr_interface_altera_mm_interconnect_1920_syihjaq mm_interconnect_0 (
		.dr_mm_clock_crossing_bridge_m0_address                           (dr_mm_clock_crossing_bridge_m0_address),                //   input,  width = 18,                             dr_mm_clock_crossing_bridge_m0.address
		.dr_mm_clock_crossing_bridge_m0_waitrequest                       (dr_mm_clock_crossing_bridge_m0_waitrequest),            //  output,   width = 1,                                                           .waitrequest
		.dr_mm_clock_crossing_bridge_m0_burstcount                        (dr_mm_clock_crossing_bridge_m0_burstcount),             //   input,   width = 1,                                                           .burstcount
		.dr_mm_clock_crossing_bridge_m0_byteenable                        (dr_mm_clock_crossing_bridge_m0_byteenable),             //   input,   width = 4,                                                           .byteenable
		.dr_mm_clock_crossing_bridge_m0_read                              (dr_mm_clock_crossing_bridge_m0_read),                   //   input,   width = 1,                                                           .read
		.dr_mm_clock_crossing_bridge_m0_readdata                          (dr_mm_clock_crossing_bridge_m0_readdata),               //  output,  width = 32,                                                           .readdata
		.dr_mm_clock_crossing_bridge_m0_readdatavalid                     (dr_mm_clock_crossing_bridge_m0_readdatavalid),          //  output,   width = 1,                                                           .readdatavalid
		.dr_mm_clock_crossing_bridge_m0_write                             (dr_mm_clock_crossing_bridge_m0_write),                  //   input,   width = 1,                                                           .write
		.dr_mm_clock_crossing_bridge_m0_writedata                         (dr_mm_clock_crossing_bridge_m0_writedata),              //   input,  width = 32,                                                           .writedata
		.dr_mm_clock_crossing_bridge_m0_debugaccess                       (dr_mm_clock_crossing_bridge_m0_debugaccess),            //   input,   width = 1,                                                           .debugaccess
		.dr_mm_bridge_phy_0_s0_address                                    (mm_interconnect_0_dr_mm_bridge_phy_0_s0_address),       //  output,  width = 13,                                      dr_mm_bridge_phy_0_s0.address
		.dr_mm_bridge_phy_0_s0_write                                      (mm_interconnect_0_dr_mm_bridge_phy_0_s0_write),         //  output,   width = 1,                                                           .write
		.dr_mm_bridge_phy_0_s0_read                                       (mm_interconnect_0_dr_mm_bridge_phy_0_s0_read),          //  output,   width = 1,                                                           .read
		.dr_mm_bridge_phy_0_s0_readdata                                   (mm_interconnect_0_dr_mm_bridge_phy_0_s0_readdata),      //   input,  width = 32,                                                           .readdata
		.dr_mm_bridge_phy_0_s0_writedata                                  (mm_interconnect_0_dr_mm_bridge_phy_0_s0_writedata),     //  output,  width = 32,                                                           .writedata
		.dr_mm_bridge_phy_0_s0_burstcount                                 (mm_interconnect_0_dr_mm_bridge_phy_0_s0_burstcount),    //  output,   width = 1,                                                           .burstcount
		.dr_mm_bridge_phy_0_s0_byteenable                                 (mm_interconnect_0_dr_mm_bridge_phy_0_s0_byteenable),    //  output,   width = 4,                                                           .byteenable
		.dr_mm_bridge_phy_0_s0_readdatavalid                              (mm_interconnect_0_dr_mm_bridge_phy_0_s0_readdatavalid), //   input,   width = 1,                                                           .readdatavalid
		.dr_mm_bridge_phy_0_s0_waitrequest                                (mm_interconnect_0_dr_mm_bridge_phy_0_s0_waitrequest),   //   input,   width = 1,                                                           .waitrequest
		.dr_mm_bridge_phy_0_s0_debugaccess                                (mm_interconnect_0_dr_mm_bridge_phy_0_s0_debugaccess),   //  output,   width = 1,                                                           .debugaccess
		.dr_mm_bridge_phy_1_s0_address                                    (mm_interconnect_0_dr_mm_bridge_phy_1_s0_address),       //  output,  width = 13,                                      dr_mm_bridge_phy_1_s0.address
		.dr_mm_bridge_phy_1_s0_write                                      (mm_interconnect_0_dr_mm_bridge_phy_1_s0_write),         //  output,   width = 1,                                                           .write
		.dr_mm_bridge_phy_1_s0_read                                       (mm_interconnect_0_dr_mm_bridge_phy_1_s0_read),          //  output,   width = 1,                                                           .read
		.dr_mm_bridge_phy_1_s0_readdata                                   (mm_interconnect_0_dr_mm_bridge_phy_1_s0_readdata),      //   input,  width = 32,                                                           .readdata
		.dr_mm_bridge_phy_1_s0_writedata                                  (mm_interconnect_0_dr_mm_bridge_phy_1_s0_writedata),     //  output,  width = 32,                                                           .writedata
		.dr_mm_bridge_phy_1_s0_burstcount                                 (mm_interconnect_0_dr_mm_bridge_phy_1_s0_burstcount),    //  output,   width = 1,                                                           .burstcount
		.dr_mm_bridge_phy_1_s0_byteenable                                 (mm_interconnect_0_dr_mm_bridge_phy_1_s0_byteenable),    //  output,   width = 4,                                                           .byteenable
		.dr_mm_bridge_phy_1_s0_readdatavalid                              (mm_interconnect_0_dr_mm_bridge_phy_1_s0_readdatavalid), //   input,   width = 1,                                                           .readdatavalid
		.dr_mm_bridge_phy_1_s0_waitrequest                                (mm_interconnect_0_dr_mm_bridge_phy_1_s0_waitrequest),   //   input,   width = 1,                                                           .waitrequest
		.dr_mm_bridge_phy_1_s0_debugaccess                                (mm_interconnect_0_dr_mm_bridge_phy_1_s0_debugaccess),   //  output,   width = 1,                                                           .debugaccess
		.dr_mm_bridge_phy_2_s0_address                                    (mm_interconnect_0_dr_mm_bridge_phy_2_s0_address),       //  output,  width = 13,                                      dr_mm_bridge_phy_2_s0.address
		.dr_mm_bridge_phy_2_s0_write                                      (mm_interconnect_0_dr_mm_bridge_phy_2_s0_write),         //  output,   width = 1,                                                           .write
		.dr_mm_bridge_phy_2_s0_read                                       (mm_interconnect_0_dr_mm_bridge_phy_2_s0_read),          //  output,   width = 1,                                                           .read
		.dr_mm_bridge_phy_2_s0_readdata                                   (mm_interconnect_0_dr_mm_bridge_phy_2_s0_readdata),      //   input,  width = 32,                                                           .readdata
		.dr_mm_bridge_phy_2_s0_writedata                                  (mm_interconnect_0_dr_mm_bridge_phy_2_s0_writedata),     //  output,  width = 32,                                                           .writedata
		.dr_mm_bridge_phy_2_s0_burstcount                                 (mm_interconnect_0_dr_mm_bridge_phy_2_s0_burstcount),    //  output,   width = 1,                                                           .burstcount
		.dr_mm_bridge_phy_2_s0_byteenable                                 (mm_interconnect_0_dr_mm_bridge_phy_2_s0_byteenable),    //  output,   width = 4,                                                           .byteenable
		.dr_mm_bridge_phy_2_s0_readdatavalid                              (mm_interconnect_0_dr_mm_bridge_phy_2_s0_readdatavalid), //   input,   width = 1,                                                           .readdatavalid
		.dr_mm_bridge_phy_2_s0_waitrequest                                (mm_interconnect_0_dr_mm_bridge_phy_2_s0_waitrequest),   //   input,   width = 1,                                                           .waitrequest
		.dr_mm_bridge_phy_2_s0_debugaccess                                (mm_interconnect_0_dr_mm_bridge_phy_2_s0_debugaccess),   //  output,   width = 1,                                                           .debugaccess
		.dr_mm_bridge_phy_3_s0_address                                    (mm_interconnect_0_dr_mm_bridge_phy_3_s0_address),       //  output,  width = 13,                                      dr_mm_bridge_phy_3_s0.address
		.dr_mm_bridge_phy_3_s0_write                                      (mm_interconnect_0_dr_mm_bridge_phy_3_s0_write),         //  output,   width = 1,                                                           .write
		.dr_mm_bridge_phy_3_s0_read                                       (mm_interconnect_0_dr_mm_bridge_phy_3_s0_read),          //  output,   width = 1,                                                           .read
		.dr_mm_bridge_phy_3_s0_readdata                                   (mm_interconnect_0_dr_mm_bridge_phy_3_s0_readdata),      //   input,  width = 32,                                                           .readdata
		.dr_mm_bridge_phy_3_s0_writedata                                  (mm_interconnect_0_dr_mm_bridge_phy_3_s0_writedata),     //  output,  width = 32,                                                           .writedata
		.dr_mm_bridge_phy_3_s0_burstcount                                 (mm_interconnect_0_dr_mm_bridge_phy_3_s0_burstcount),    //  output,   width = 1,                                                           .burstcount
		.dr_mm_bridge_phy_3_s0_byteenable                                 (mm_interconnect_0_dr_mm_bridge_phy_3_s0_byteenable),    //  output,   width = 4,                                                           .byteenable
		.dr_mm_bridge_phy_3_s0_readdatavalid                              (mm_interconnect_0_dr_mm_bridge_phy_3_s0_readdatavalid), //   input,   width = 1,                                                           .readdatavalid
		.dr_mm_bridge_phy_3_s0_waitrequest                                (mm_interconnect_0_dr_mm_bridge_phy_3_s0_waitrequest),   //   input,   width = 1,                                                           .waitrequest
		.dr_mm_bridge_phy_3_s0_debugaccess                                (mm_interconnect_0_dr_mm_bridge_phy_3_s0_debugaccess),   //  output,   width = 1,                                                           .debugaccess
		.dr_mm_clock_crossing_bridge_m0_reset_reset_bridge_in_reset_reset (~dr_clk_config_clk_reset_reset),                        //   input,   width = 1, dr_mm_clock_crossing_bridge_m0_reset_reset_bridge_in_reset.reset
		.dr_clk_config_clk_clk                                            (dr_clk_config_clk_clk)                                  //   input,   width = 1,                                          dr_clk_config_clk.clk
	);

endmodule
