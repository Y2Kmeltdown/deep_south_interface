// system_manager_system_manager_if_0.v

// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module system_manager_system_manager_if_0 (
		input  wire        clk,                    //                    clk.clk
		input  wire        rst,                    //            Reset_Input.reset
		input  wire        pll_clk,                //                pll_clk.clk
		inout  wire [7:0]  conf_d,                 //                 conf_d.conf_d
		output wire        soft_reconfigure_req_n, // soft_reconfigure_req_n.soft_reconfigure_req_n
		output wire [9:0]  d_address,              //                 mem_if.address
		output wire        d_read,                 //                       .read
		output wire        d_write,                //                       .write
		input  wire [15:0] d_readdata,             //                       .readdata
		output wire [15:0] d_writedata,            //                       .writedata
		input  wire        d_waitrequest,          //                       .waitrequest
		input  wire [7:0]  c_address,              //                 reg_if.address
		input  wire        c_read,                 //                       .read
		input  wire        c_write,                //                       .write
		output wire [31:0] c_readdata,             //                       .readdata
		input  wire [31:0] c_writedata,            //                       .writedata
		output wire [3:0]  conf_c_out,             //             conf_c_out.conf_c_out
		input  wire [3:0]  conf_c_in               //              conf_c_in.conf_c_in
	);

	sys_man_if system_manager_if_0 (
		.clk                    (clk),                    //   input,   width = 1,                    clk.clk
		.rst                    (rst),                    //   input,   width = 1,            Reset_Input.reset
		.pll_clk                (pll_clk),                //   input,   width = 1,                pll_clk.clk
		.conf_d                 (conf_d),                 //   inout,   width = 8,                 conf_d.conf_d
		.soft_reconfigure_req_n (soft_reconfigure_req_n), //  output,   width = 1, soft_reconfigure_req_n.soft_reconfigure_req_n
		.d_address              (d_address),              //  output,  width = 10,                 mem_if.address
		.d_read                 (d_read),                 //  output,   width = 1,                       .read
		.d_write                (d_write),                //  output,   width = 1,                       .write
		.d_readdata             (d_readdata),             //   input,  width = 16,                       .readdata
		.d_writedata            (d_writedata),            //  output,  width = 16,                       .writedata
		.d_waitrequest          (d_waitrequest),          //   input,   width = 1,                       .waitrequest
		.c_address              (c_address),              //   input,   width = 8,                 reg_if.address
		.c_read                 (c_read),                 //   input,   width = 1,                       .read
		.c_write                (c_write),                //   input,   width = 1,                       .write
		.c_readdata             (c_readdata),             //  output,  width = 32,                       .readdata
		.c_writedata            (c_writedata),            //   input,  width = 32,                       .writedata
		.conf_c_out             (conf_c_out),             //  output,   width = 4,             conf_c_out.conf_c_out
		.conf_c_in              (conf_c_in)               //   input,   width = 4,              conf_c_in.conf_c_in
	);

endmodule
