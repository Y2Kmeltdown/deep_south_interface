// ed_synth.v

// Generated using ACDS version 19.4 64

`timescale 1 ps / 1 ps
module ed_synth (
		input  wire       bottom_core_clk_iopll_reset_reset,       //  bottom_core_clk_iopll_reset.reset
		input  wire       bottom_core_clk_iopll_refclk_clk,        // bottom_core_clk_iopll_refclk.clk
		input  wire       bottom_pll_ref_clk_clk,                  //           bottom_pll_ref_clk.clk
		input  wire       bottom_wmcrst_n_in_reset_n,              //           bottom_wmcrst_n_in.reset_n
		input  wire       bottom_only_reset_in_reset,              //         bottom_only_reset_in.reset
		input  wire       bottom_m2u_bridge_cattrip,               //            bottom_m2u_bridge.cattrip
		input  wire [2:0] bottom_m2u_bridge_temp,                  //                             .temp
		input  wire [7:0] bottom_m2u_bridge_wso,                   //                             .wso
		output wire       bottom_m2u_bridge_reset_n,               //                             .reset_n
		output wire       bottom_m2u_bridge_wrst_n,                //                             .wrst_n
		output wire       bottom_m2u_bridge_wrck,                  //                             .wrck
		output wire       bottom_m2u_bridge_shiftwr,               //                             .shiftwr
		output wire       bottom_m2u_bridge_capturewr,             //                             .capturewr
		output wire       bottom_m2u_bridge_updatewr,              //                             .updatewr
		output wire       bottom_m2u_bridge_selectwir,             //                             .selectwir
		output wire       bottom_m2u_bridge_wsi,                   //                             .wsi
		input  wire       top_pll_ref_clk_clk,                     //              top_pll_ref_clk.clk
		input  wire       top_wmcrst_n_in_reset_n,                 //              top_wmcrst_n_in.reset_n
		input  wire       top_only_reset_in_reset,                 //            top_only_reset_in.reset
		input  wire       top_m2u_bridge_cattrip,                  //               top_m2u_bridge.cattrip
		input  wire [2:0] top_m2u_bridge_temp,                     //                             .temp
		input  wire [7:0] top_m2u_bridge_wso,                      //                             .wso
		output wire       top_m2u_bridge_reset_n,                  //                             .reset_n
		output wire       top_m2u_bridge_wrst_n,                   //                             .wrst_n
		output wire       top_m2u_bridge_wrck,                     //                             .wrck
		output wire       top_m2u_bridge_shiftwr,                  //                             .shiftwr
		output wire       top_m2u_bridge_capturewr,                //                             .capturewr
		output wire       top_m2u_bridge_updatewr,                 //                             .updatewr
		output wire       top_m2u_bridge_selectwir,                //                             .selectwir
		output wire       top_m2u_bridge_wsi,                      //                             .wsi
		output wire       tg_bottom0_0_status_traffic_gen_pass,    //          tg_bottom0_0_status.traffic_gen_pass
		output wire       tg_bottom0_0_status_traffic_gen_fail,    //                             .traffic_gen_fail
		output wire       tg_bottom0_0_status_traffic_gen_timeout, //                             .traffic_gen_timeout
		output wire       tg_bottom0_1_status_traffic_gen_pass,    //          tg_bottom0_1_status.traffic_gen_pass
		output wire       tg_bottom0_1_status_traffic_gen_fail,    //                             .traffic_gen_fail
		output wire       tg_bottom0_1_status_traffic_gen_timeout, //                             .traffic_gen_timeout
		output wire       tg_top0_0_status_traffic_gen_pass,       //             tg_top0_0_status.traffic_gen_pass
		output wire       tg_top0_0_status_traffic_gen_fail,       //                             .traffic_gen_fail
		output wire       tg_top0_0_status_traffic_gen_timeout,    //                             .traffic_gen_timeout
		output wire       tg_top0_1_status_traffic_gen_pass,       //             tg_top0_1_status.traffic_gen_pass
		output wire       tg_top0_1_status_traffic_gen_fail,       //                             .traffic_gen_fail
		output wire       tg_top0_1_status_traffic_gen_timeout,    //                             .traffic_gen_timeout
		input  wire       top_core_clk_iopll_reset_reset,          //     top_core_clk_iopll_reset.reset
		input  wire       top_core_clk_iopll_ref_clk_clk           //   top_core_clk_iopll_ref_clk.clk
	);

	wire    [1:0] tg_top0_0_axi_awburst;                                 // tg_top0_0:awburst -> hbm_top_example_design:axi_0_0_awburst
	wire    [0:0] tg_top0_0_axi_awuser;                                  // tg_top0_0:awuser_ap -> hbm_top_example_design:axi_0_0_awuser
	wire    [7:0] tg_top0_0_axi_arlen;                                   // tg_top0_0:arlen -> hbm_top_example_design:axi_0_0_arlen
	wire    [3:0] tg_top0_0_axi_arqos;                                   // tg_top0_0:arqos -> hbm_top_example_design:axi_0_0_arqos
	wire   [31:0] tg_top0_0_axi_wstrb;                                   // tg_top0_0:wstrb -> hbm_top_example_design:axi_0_0_wstrb
	wire          tg_top0_0_axi_wready;                                  // hbm_top_example_design:axi_0_0_wready -> tg_top0_0:wready
	wire    [8:0] tg_top0_0_axi_rid;                                     // hbm_top_example_design:axi_0_0_rid -> tg_top0_0:rid
	wire          tg_top0_0_axi_rready;                                  // tg_top0_0:rready -> hbm_top_example_design:axi_0_0_rready
	wire    [7:0] tg_top0_0_axi_awlen;                                   // tg_top0_0:awlen -> hbm_top_example_design:axi_0_0_awlen
	wire    [3:0] tg_top0_0_axi_awqos;                                   // tg_top0_0:awqos -> hbm_top_example_design:axi_0_0_awqos
	wire          tg_top0_0_axi_wvalid;                                  // tg_top0_0:wvalid -> hbm_top_example_design:axi_0_0_wvalid
	wire   [28:0] tg_top0_0_axi_araddr;                                  // tg_top0_0:araddr -> hbm_top_example_design:axi_0_0_araddr
	wire    [2:0] tg_top0_0_axi_arprot;                                  // tg_top0_0:arprot -> hbm_top_example_design:axi_0_0_arprot
	wire    [2:0] tg_top0_0_axi_awprot;                                  // tg_top0_0:awprot -> hbm_top_example_design:axi_0_0_awprot
	wire  [255:0] tg_top0_0_axi_wdata;                                   // tg_top0_0:wdata -> hbm_top_example_design:axi_0_0_wdata
	wire          tg_top0_0_axi_arvalid;                                 // tg_top0_0:arvalid -> hbm_top_example_design:axi_0_0_arvalid
	wire    [8:0] tg_top0_0_axi_arid;                                    // tg_top0_0:arid -> hbm_top_example_design:axi_0_0_arid
	wire   [28:0] tg_top0_0_axi_awaddr;                                  // tg_top0_0:awaddr -> hbm_top_example_design:axi_0_0_awaddr
	wire    [1:0] tg_top0_0_axi_bresp;                                   // hbm_top_example_design:axi_0_0_bresp -> tg_top0_0:bresp
	wire          tg_top0_0_axi_arready;                                 // hbm_top_example_design:axi_0_0_arready -> tg_top0_0:arready
	wire  [255:0] tg_top0_0_axi_rdata;                                   // hbm_top_example_design:axi_0_0_rdata -> tg_top0_0:rdata
	wire          tg_top0_0_axi_awready;                                 // hbm_top_example_design:axi_0_0_awready -> tg_top0_0:awready
	wire    [1:0] tg_top0_0_axi_arburst;                                 // tg_top0_0:arburst -> hbm_top_example_design:axi_0_0_arburst
	wire    [2:0] tg_top0_0_axi_arsize;                                  // tg_top0_0:arsize -> hbm_top_example_design:axi_0_0_arsize
	wire          tg_top0_0_axi_bready;                                  // tg_top0_0:bready -> hbm_top_example_design:axi_0_0_bready
	wire          tg_top0_0_axi_rlast;                                   // hbm_top_example_design:axi_0_0_rlast -> tg_top0_0:rlast
	wire          tg_top0_0_axi_wlast;                                   // tg_top0_0:wlast -> hbm_top_example_design:axi_0_0_wlast
	wire    [1:0] tg_top0_0_axi_rresp;                                   // hbm_top_example_design:axi_0_0_rresp -> tg_top0_0:rresp
	wire    [8:0] tg_top0_0_axi_awid;                                    // tg_top0_0:awid -> hbm_top_example_design:axi_0_0_awid
	wire    [8:0] tg_top0_0_axi_bid;                                     // hbm_top_example_design:axi_0_0_bid -> tg_top0_0:bid
	wire          tg_top0_0_axi_bvalid;                                  // hbm_top_example_design:axi_0_0_bvalid -> tg_top0_0:bvalid
	wire    [2:0] tg_top0_0_axi_awsize;                                  // tg_top0_0:awsize -> hbm_top_example_design:axi_0_0_awsize
	wire          tg_top0_0_axi_awvalid;                                 // tg_top0_0:awvalid -> hbm_top_example_design:axi_0_0_awvalid
	wire    [0:0] tg_top0_0_axi_aruser;                                  // tg_top0_0:aruser_ap -> hbm_top_example_design:axi_0_0_aruser
	wire          tg_top0_0_axi_rvalid;                                  // hbm_top_example_design:axi_0_0_rvalid -> tg_top0_0:rvalid
	wire    [1:0] tg_bottom0_0_axi_awburst;                              // tg_bottom0_0:awburst -> hbm_bottom_example_design:axi_0_0_awburst
	wire    [0:0] tg_bottom0_0_axi_awuser;                               // tg_bottom0_0:awuser_ap -> hbm_bottom_example_design:axi_0_0_awuser
	wire    [7:0] tg_bottom0_0_axi_arlen;                                // tg_bottom0_0:arlen -> hbm_bottom_example_design:axi_0_0_arlen
	wire    [3:0] tg_bottom0_0_axi_arqos;                                // tg_bottom0_0:arqos -> hbm_bottom_example_design:axi_0_0_arqos
	wire   [31:0] tg_bottom0_0_axi_wstrb;                                // tg_bottom0_0:wstrb -> hbm_bottom_example_design:axi_0_0_wstrb
	wire          tg_bottom0_0_axi_wready;                               // hbm_bottom_example_design:axi_0_0_wready -> tg_bottom0_0:wready
	wire    [8:0] tg_bottom0_0_axi_rid;                                  // hbm_bottom_example_design:axi_0_0_rid -> tg_bottom0_0:rid
	wire          tg_bottom0_0_axi_rready;                               // tg_bottom0_0:rready -> hbm_bottom_example_design:axi_0_0_rready
	wire    [7:0] tg_bottom0_0_axi_awlen;                                // tg_bottom0_0:awlen -> hbm_bottom_example_design:axi_0_0_awlen
	wire    [3:0] tg_bottom0_0_axi_awqos;                                // tg_bottom0_0:awqos -> hbm_bottom_example_design:axi_0_0_awqos
	wire          tg_bottom0_0_axi_wvalid;                               // tg_bottom0_0:wvalid -> hbm_bottom_example_design:axi_0_0_wvalid
	wire   [28:0] tg_bottom0_0_axi_araddr;                               // tg_bottom0_0:araddr -> hbm_bottom_example_design:axi_0_0_araddr
	wire    [2:0] tg_bottom0_0_axi_arprot;                               // tg_bottom0_0:arprot -> hbm_bottom_example_design:axi_0_0_arprot
	wire    [2:0] tg_bottom0_0_axi_awprot;                               // tg_bottom0_0:awprot -> hbm_bottom_example_design:axi_0_0_awprot
	wire  [255:0] tg_bottom0_0_axi_wdata;                                // tg_bottom0_0:wdata -> hbm_bottom_example_design:axi_0_0_wdata
	wire          tg_bottom0_0_axi_arvalid;                              // tg_bottom0_0:arvalid -> hbm_bottom_example_design:axi_0_0_arvalid
	wire    [8:0] tg_bottom0_0_axi_arid;                                 // tg_bottom0_0:arid -> hbm_bottom_example_design:axi_0_0_arid
	wire   [28:0] tg_bottom0_0_axi_awaddr;                               // tg_bottom0_0:awaddr -> hbm_bottom_example_design:axi_0_0_awaddr
	wire    [1:0] tg_bottom0_0_axi_bresp;                                // hbm_bottom_example_design:axi_0_0_bresp -> tg_bottom0_0:bresp
	wire          tg_bottom0_0_axi_arready;                              // hbm_bottom_example_design:axi_0_0_arready -> tg_bottom0_0:arready
	wire  [255:0] tg_bottom0_0_axi_rdata;                                // hbm_bottom_example_design:axi_0_0_rdata -> tg_bottom0_0:rdata
	wire          tg_bottom0_0_axi_awready;                              // hbm_bottom_example_design:axi_0_0_awready -> tg_bottom0_0:awready
	wire    [1:0] tg_bottom0_0_axi_arburst;                              // tg_bottom0_0:arburst -> hbm_bottom_example_design:axi_0_0_arburst
	wire    [2:0] tg_bottom0_0_axi_arsize;                               // tg_bottom0_0:arsize -> hbm_bottom_example_design:axi_0_0_arsize
	wire          tg_bottom0_0_axi_bready;                               // tg_bottom0_0:bready -> hbm_bottom_example_design:axi_0_0_bready
	wire          tg_bottom0_0_axi_rlast;                                // hbm_bottom_example_design:axi_0_0_rlast -> tg_bottom0_0:rlast
	wire          tg_bottom0_0_axi_wlast;                                // tg_bottom0_0:wlast -> hbm_bottom_example_design:axi_0_0_wlast
	wire    [1:0] tg_bottom0_0_axi_rresp;                                // hbm_bottom_example_design:axi_0_0_rresp -> tg_bottom0_0:rresp
	wire    [8:0] tg_bottom0_0_axi_awid;                                 // tg_bottom0_0:awid -> hbm_bottom_example_design:axi_0_0_awid
	wire    [8:0] tg_bottom0_0_axi_bid;                                  // hbm_bottom_example_design:axi_0_0_bid -> tg_bottom0_0:bid
	wire          tg_bottom0_0_axi_bvalid;                               // hbm_bottom_example_design:axi_0_0_bvalid -> tg_bottom0_0:bvalid
	wire    [2:0] tg_bottom0_0_axi_awsize;                               // tg_bottom0_0:awsize -> hbm_bottom_example_design:axi_0_0_awsize
	wire          tg_bottom0_0_axi_awvalid;                              // tg_bottom0_0:awvalid -> hbm_bottom_example_design:axi_0_0_awvalid
	wire    [0:0] tg_bottom0_0_axi_aruser;                               // tg_bottom0_0:aruser_ap -> hbm_bottom_example_design:axi_0_0_aruser
	wire          tg_bottom0_0_axi_rvalid;                               // hbm_bottom_example_design:axi_0_0_rvalid -> tg_bottom0_0:rvalid
	wire    [1:0] tg_top0_1_axi_awburst;                                 // tg_top0_1:awburst -> hbm_top_example_design:axi_0_1_awburst
	wire    [0:0] tg_top0_1_axi_awuser;                                  // tg_top0_1:awuser_ap -> hbm_top_example_design:axi_0_1_awuser
	wire    [7:0] tg_top0_1_axi_arlen;                                   // tg_top0_1:arlen -> hbm_top_example_design:axi_0_1_arlen
	wire    [3:0] tg_top0_1_axi_arqos;                                   // tg_top0_1:arqos -> hbm_top_example_design:axi_0_1_arqos
	wire   [31:0] tg_top0_1_axi_wstrb;                                   // tg_top0_1:wstrb -> hbm_top_example_design:axi_0_1_wstrb
	wire          tg_top0_1_axi_wready;                                  // hbm_top_example_design:axi_0_1_wready -> tg_top0_1:wready
	wire    [8:0] tg_top0_1_axi_rid;                                     // hbm_top_example_design:axi_0_1_rid -> tg_top0_1:rid
	wire          tg_top0_1_axi_rready;                                  // tg_top0_1:rready -> hbm_top_example_design:axi_0_1_rready
	wire    [7:0] tg_top0_1_axi_awlen;                                   // tg_top0_1:awlen -> hbm_top_example_design:axi_0_1_awlen
	wire    [3:0] tg_top0_1_axi_awqos;                                   // tg_top0_1:awqos -> hbm_top_example_design:axi_0_1_awqos
	wire          tg_top0_1_axi_wvalid;                                  // tg_top0_1:wvalid -> hbm_top_example_design:axi_0_1_wvalid
	wire   [28:0] tg_top0_1_axi_araddr;                                  // tg_top0_1:araddr -> hbm_top_example_design:axi_0_1_araddr
	wire    [2:0] tg_top0_1_axi_arprot;                                  // tg_top0_1:arprot -> hbm_top_example_design:axi_0_1_arprot
	wire    [2:0] tg_top0_1_axi_awprot;                                  // tg_top0_1:awprot -> hbm_top_example_design:axi_0_1_awprot
	wire  [255:0] tg_top0_1_axi_wdata;                                   // tg_top0_1:wdata -> hbm_top_example_design:axi_0_1_wdata
	wire          tg_top0_1_axi_arvalid;                                 // tg_top0_1:arvalid -> hbm_top_example_design:axi_0_1_arvalid
	wire    [8:0] tg_top0_1_axi_arid;                                    // tg_top0_1:arid -> hbm_top_example_design:axi_0_1_arid
	wire   [28:0] tg_top0_1_axi_awaddr;                                  // tg_top0_1:awaddr -> hbm_top_example_design:axi_0_1_awaddr
	wire    [1:0] tg_top0_1_axi_bresp;                                   // hbm_top_example_design:axi_0_1_bresp -> tg_top0_1:bresp
	wire          tg_top0_1_axi_arready;                                 // hbm_top_example_design:axi_0_1_arready -> tg_top0_1:arready
	wire  [255:0] tg_top0_1_axi_rdata;                                   // hbm_top_example_design:axi_0_1_rdata -> tg_top0_1:rdata
	wire          tg_top0_1_axi_awready;                                 // hbm_top_example_design:axi_0_1_awready -> tg_top0_1:awready
	wire    [1:0] tg_top0_1_axi_arburst;                                 // tg_top0_1:arburst -> hbm_top_example_design:axi_0_1_arburst
	wire    [2:0] tg_top0_1_axi_arsize;                                  // tg_top0_1:arsize -> hbm_top_example_design:axi_0_1_arsize
	wire          tg_top0_1_axi_bready;                                  // tg_top0_1:bready -> hbm_top_example_design:axi_0_1_bready
	wire          tg_top0_1_axi_rlast;                                   // hbm_top_example_design:axi_0_1_rlast -> tg_top0_1:rlast
	wire          tg_top0_1_axi_wlast;                                   // tg_top0_1:wlast -> hbm_top_example_design:axi_0_1_wlast
	wire    [1:0] tg_top0_1_axi_rresp;                                   // hbm_top_example_design:axi_0_1_rresp -> tg_top0_1:rresp
	wire    [8:0] tg_top0_1_axi_awid;                                    // tg_top0_1:awid -> hbm_top_example_design:axi_0_1_awid
	wire    [8:0] tg_top0_1_axi_bid;                                     // hbm_top_example_design:axi_0_1_bid -> tg_top0_1:bid
	wire          tg_top0_1_axi_bvalid;                                  // hbm_top_example_design:axi_0_1_bvalid -> tg_top0_1:bvalid
	wire    [2:0] tg_top0_1_axi_awsize;                                  // tg_top0_1:awsize -> hbm_top_example_design:axi_0_1_awsize
	wire          tg_top0_1_axi_awvalid;                                 // tg_top0_1:awvalid -> hbm_top_example_design:axi_0_1_awvalid
	wire    [0:0] tg_top0_1_axi_aruser;                                  // tg_top0_1:aruser_ap -> hbm_top_example_design:axi_0_1_aruser
	wire          tg_top0_1_axi_rvalid;                                  // hbm_top_example_design:axi_0_1_rvalid -> tg_top0_1:rvalid
	wire    [1:0] tg_bottom0_1_axi_awburst;                              // tg_bottom0_1:awburst -> hbm_bottom_example_design:axi_0_1_awburst
	wire    [0:0] tg_bottom0_1_axi_awuser;                               // tg_bottom0_1:awuser_ap -> hbm_bottom_example_design:axi_0_1_awuser
	wire    [7:0] tg_bottom0_1_axi_arlen;                                // tg_bottom0_1:arlen -> hbm_bottom_example_design:axi_0_1_arlen
	wire    [3:0] tg_bottom0_1_axi_arqos;                                // tg_bottom0_1:arqos -> hbm_bottom_example_design:axi_0_1_arqos
	wire   [31:0] tg_bottom0_1_axi_wstrb;                                // tg_bottom0_1:wstrb -> hbm_bottom_example_design:axi_0_1_wstrb
	wire          tg_bottom0_1_axi_wready;                               // hbm_bottom_example_design:axi_0_1_wready -> tg_bottom0_1:wready
	wire    [8:0] tg_bottom0_1_axi_rid;                                  // hbm_bottom_example_design:axi_0_1_rid -> tg_bottom0_1:rid
	wire          tg_bottom0_1_axi_rready;                               // tg_bottom0_1:rready -> hbm_bottom_example_design:axi_0_1_rready
	wire    [7:0] tg_bottom0_1_axi_awlen;                                // tg_bottom0_1:awlen -> hbm_bottom_example_design:axi_0_1_awlen
	wire    [3:0] tg_bottom0_1_axi_awqos;                                // tg_bottom0_1:awqos -> hbm_bottom_example_design:axi_0_1_awqos
	wire          tg_bottom0_1_axi_wvalid;                               // tg_bottom0_1:wvalid -> hbm_bottom_example_design:axi_0_1_wvalid
	wire   [28:0] tg_bottom0_1_axi_araddr;                               // tg_bottom0_1:araddr -> hbm_bottom_example_design:axi_0_1_araddr
	wire    [2:0] tg_bottom0_1_axi_arprot;                               // tg_bottom0_1:arprot -> hbm_bottom_example_design:axi_0_1_arprot
	wire    [2:0] tg_bottom0_1_axi_awprot;                               // tg_bottom0_1:awprot -> hbm_bottom_example_design:axi_0_1_awprot
	wire  [255:0] tg_bottom0_1_axi_wdata;                                // tg_bottom0_1:wdata -> hbm_bottom_example_design:axi_0_1_wdata
	wire          tg_bottom0_1_axi_arvalid;                              // tg_bottom0_1:arvalid -> hbm_bottom_example_design:axi_0_1_arvalid
	wire    [8:0] tg_bottom0_1_axi_arid;                                 // tg_bottom0_1:arid -> hbm_bottom_example_design:axi_0_1_arid
	wire   [28:0] tg_bottom0_1_axi_awaddr;                               // tg_bottom0_1:awaddr -> hbm_bottom_example_design:axi_0_1_awaddr
	wire    [1:0] tg_bottom0_1_axi_bresp;                                // hbm_bottom_example_design:axi_0_1_bresp -> tg_bottom0_1:bresp
	wire          tg_bottom0_1_axi_arready;                              // hbm_bottom_example_design:axi_0_1_arready -> tg_bottom0_1:arready
	wire  [255:0] tg_bottom0_1_axi_rdata;                                // hbm_bottom_example_design:axi_0_1_rdata -> tg_bottom0_1:rdata
	wire          tg_bottom0_1_axi_awready;                              // hbm_bottom_example_design:axi_0_1_awready -> tg_bottom0_1:awready
	wire    [1:0] tg_bottom0_1_axi_arburst;                              // tg_bottom0_1:arburst -> hbm_bottom_example_design:axi_0_1_arburst
	wire    [2:0] tg_bottom0_1_axi_arsize;                               // tg_bottom0_1:arsize -> hbm_bottom_example_design:axi_0_1_arsize
	wire          tg_bottom0_1_axi_bready;                               // tg_bottom0_1:bready -> hbm_bottom_example_design:axi_0_1_bready
	wire          tg_bottom0_1_axi_rlast;                                // hbm_bottom_example_design:axi_0_1_rlast -> tg_bottom0_1:rlast
	wire          tg_bottom0_1_axi_wlast;                                // tg_bottom0_1:wlast -> hbm_bottom_example_design:axi_0_1_wlast
	wire    [1:0] tg_bottom0_1_axi_rresp;                                // hbm_bottom_example_design:axi_0_1_rresp -> tg_bottom0_1:rresp
	wire    [8:0] tg_bottom0_1_axi_awid;                                 // tg_bottom0_1:awid -> hbm_bottom_example_design:axi_0_1_awid
	wire    [8:0] tg_bottom0_1_axi_bid;                                  // hbm_bottom_example_design:axi_0_1_bid -> tg_bottom0_1:bid
	wire          tg_bottom0_1_axi_bvalid;                               // hbm_bottom_example_design:axi_0_1_bvalid -> tg_bottom0_1:bvalid
	wire    [2:0] tg_bottom0_1_axi_awsize;                               // tg_bottom0_1:awsize -> hbm_bottom_example_design:axi_0_1_awsize
	wire          tg_bottom0_1_axi_awvalid;                              // tg_bottom0_1:awvalid -> hbm_bottom_example_design:axi_0_1_awvalid
	wire    [0:0] tg_bottom0_1_axi_aruser;                               // tg_bottom0_1:aruser_ap -> hbm_bottom_example_design:axi_0_1_aruser
	wire          tg_bottom0_1_axi_rvalid;                               // hbm_bottom_example_design:axi_0_1_rvalid -> tg_bottom0_1:rvalid
	wire          top_core_clk_iopll_outclk0_clk;                        // top_core_clk_iopll:outclk_0 -> hbm_top_example_design:ext_core_clk
	wire          bottom_core_clk_iopll_outclk0_clk;                     // bottom_core_clk_iopll:outclk_0 -> hbm_bottom_example_design:ext_core_clk
	wire          hbm_top_example_design_wmc_clk_0_clk;                  // hbm_top_example_design:wmc_clk_0_clk -> [tg_top0_0:wmc_clk_in, tg_top0_1:wmc_clk_in]
	wire          hbm_bottom_example_design_wmc_clk_0_clk;               // hbm_bottom_example_design:wmc_clk_0_clk -> [tg_bottom0_0:wmc_clk_in, tg_bottom0_1:wmc_clk_in]
	wire    [1:0] tg_top0_0_apb_ur_pstrb;                                // tg_top0_0:ur_pstrb -> hbm_top_example_design:apb_0_ur_pstrb
	wire   [15:0] tg_top0_0_apb_ur_pwdata;                               // tg_top0_0:ur_pwdata -> hbm_top_example_design:apb_0_ur_pwdata
	wire          tg_top0_0_apb_ur_penable;                              // tg_top0_0:ur_penable -> hbm_top_example_design:apb_0_ur_penable
	wire   [15:0] tg_top0_0_apb_ur_paddr;                                // tg_top0_0:ur_paddr -> hbm_top_example_design:apb_0_ur_paddr
	wire          tg_top0_0_apb_ur_psel;                                 // tg_top0_0:ur_psel -> hbm_top_example_design:apb_0_ur_psel
	wire          tg_top0_0_apb_ur_pwrite;                               // tg_top0_0:ur_pwrite -> hbm_top_example_design:apb_0_ur_pwrite
	wire          hbm_top_example_design_apb_0_ur_prready;               // hbm_top_example_design:apb_0_ur_prready -> tg_top0_0:ur_prready
	wire   [15:0] hbm_top_example_design_apb_0_ur_prdata;                // hbm_top_example_design:apb_0_ur_prdata -> tg_top0_0:ur_prdata
	wire    [1:0] tg_bottom0_0_apb_ur_pstrb;                             // tg_bottom0_0:ur_pstrb -> hbm_bottom_example_design:apb_0_ur_pstrb
	wire   [15:0] tg_bottom0_0_apb_ur_pwdata;                            // tg_bottom0_0:ur_pwdata -> hbm_bottom_example_design:apb_0_ur_pwdata
	wire          tg_bottom0_0_apb_ur_penable;                           // tg_bottom0_0:ur_penable -> hbm_bottom_example_design:apb_0_ur_penable
	wire   [15:0] tg_bottom0_0_apb_ur_paddr;                             // tg_bottom0_0:ur_paddr -> hbm_bottom_example_design:apb_0_ur_paddr
	wire          tg_bottom0_0_apb_ur_psel;                              // tg_bottom0_0:ur_psel -> hbm_bottom_example_design:apb_0_ur_psel
	wire          tg_bottom0_0_apb_ur_pwrite;                            // tg_bottom0_0:ur_pwrite -> hbm_bottom_example_design:apb_0_ur_pwrite
	wire          hbm_bottom_example_design_apb_0_ur_prready;            // hbm_bottom_example_design:apb_0_ur_prready -> tg_bottom0_0:ur_prready
	wire   [15:0] hbm_bottom_example_design_apb_0_ur_prdata;             // hbm_bottom_example_design:apb_0_ur_prdata -> tg_bottom0_0:ur_prdata
	wire          hbm_top_example_design_axi_extra_0_0_ruser_err_dbe;    // hbm_top_example_design:axi_extra_0_0_ruser_err_dbe -> tg_top0_0:ruser_err_dbe
	wire   [31:0] hbm_top_example_design_axi_extra_0_0_ruser_data;       // hbm_top_example_design:axi_extra_0_0_ruser_data -> tg_top0_0:ruser_data
	wire    [3:0] tg_top0_0_axi_extra_wuser_strb;                        // tg_top0_0:wuser_strb -> hbm_top_example_design:axi_extra_0_0_wuser_strb
	wire   [31:0] tg_top0_0_axi_extra_wuser_data;                        // tg_top0_0:wuser_data -> hbm_top_example_design:axi_extra_0_0_wuser_data
	wire          hbm_bottom_example_design_axi_extra_0_0_ruser_err_dbe; // hbm_bottom_example_design:axi_extra_0_0_ruser_err_dbe -> tg_bottom0_1:ruser_err_dbe
	wire   [31:0] hbm_bottom_example_design_axi_extra_0_0_ruser_data;    // hbm_bottom_example_design:axi_extra_0_0_ruser_data -> tg_bottom0_1:ruser_data
	wire    [3:0] tg_bottom0_1_axi_extra_wuser_strb;                     // tg_bottom0_1:wuser_strb -> hbm_bottom_example_design:axi_extra_0_0_wuser_strb
	wire   [31:0] tg_bottom0_1_axi_extra_wuser_data;                     // tg_bottom0_1:wuser_data -> hbm_bottom_example_design:axi_extra_0_0_wuser_data
	wire          hbm_top_example_design_axi_extra_0_1_ruser_err_dbe;    // hbm_top_example_design:axi_extra_0_1_ruser_err_dbe -> tg_top0_1:ruser_err_dbe
	wire   [31:0] hbm_top_example_design_axi_extra_0_1_ruser_data;       // hbm_top_example_design:axi_extra_0_1_ruser_data -> tg_top0_1:ruser_data
	wire    [3:0] tg_top0_1_axi_extra_wuser_strb;                        // tg_top0_1:wuser_strb -> hbm_top_example_design:axi_extra_0_1_wuser_strb
	wire   [31:0] tg_top0_1_axi_extra_wuser_data;                        // tg_top0_1:wuser_data -> hbm_top_example_design:axi_extra_0_1_wuser_data
	wire          top_core_clk_iopll_locked_export;                      // top_core_clk_iopll:locked -> hbm_top_example_design:ext_core_clk_locked
	wire          bottom_core_clk_iopll_locked_export;                   // bottom_core_clk_iopll:locked -> hbm_bottom_example_design:ext_core_clk_locked
	wire          hbm_top_example_design_wmcrst_n_0_reset;               // hbm_top_example_design:wmcrst_n_0_reset_n -> [tg_top0_0:wmcrst_n_in, tg_top0_1:wmcrst_n_in]
	wire          hbm_bottom_example_design_wmcrst_n_0_reset;            // hbm_bottom_example_design:wmcrst_n_0_reset_n -> [tg_bottom0_0:wmcrst_n_in, tg_bottom0_1:wmcrst_n_in]

	bottom_core_clk_iopll bottom_core_clk_iopll (
		.rst      (bottom_core_clk_iopll_reset_reset),   //   input,  width = 1,   reset.reset
		.refclk   (bottom_core_clk_iopll_refclk_clk),    //   input,  width = 1,  refclk.clk
		.locked   (bottom_core_clk_iopll_locked_export), //  output,  width = 1,  locked.export
		.outclk_0 (bottom_core_clk_iopll_outclk0_clk)    //  output,  width = 1, outclk0.clk
	);

	hbm_bottom_example_design hbm_bottom_example_design (
		.pll_ref_clk                 (bottom_pll_ref_clk_clk),                                //   input,    width = 1,         pll_ref_clk.clk
		.ext_core_clk                (bottom_core_clk_iopll_outclk0_clk),                     //   input,    width = 1,        ext_core_clk.clk
		.ext_core_clk_locked         (bottom_core_clk_iopll_locked_export),                   //   input,    width = 1, ext_core_clk_locked.export
		.wmcrst_n_in                 (bottom_wmcrst_n_in_reset_n),                            //   input,    width = 1,         wmcrst_n_in.reset_n
		.hbm_only_reset_in           (bottom_only_reset_in_reset),                            //   input,    width = 1,   hbm_only_reset_in.reset
		.local_cal_success           (),                                                      //  output,    width = 1,              status.local_cal_success
		.local_cal_fail              (),                                                      //  output,    width = 1,                    .local_cal_fail
		.cal_lat                     (),                                                      //  output,    width = 3,             cal_lat.cal_lat
		.ck_t_0                      (),                                                      //  output,    width = 1,               mem_0.ck_t
		.ck_c_0                      (),                                                      //  output,    width = 1,                    .ck_c
		.cke_0                       (),                                                      //  output,    width = 1,                    .cke
		.c_0                         (),                                                      //  output,    width = 8,                    .c
		.r_0                         (),                                                      //  output,    width = 6,                    .r
		.dq_0                        (),                                                      //   inout,  width = 128,                    .dq
		.dm_0                        (),                                                      //   inout,   width = 16,                    .dm
		.dbi_0                       (),                                                      //   inout,   width = 16,                    .dbi
		.par_0                       (),                                                      //   inout,    width = 4,                    .par
		.derr_0                      (),                                                      //   inout,    width = 4,                    .derr
		.rdqs_t_0                    (),                                                      //   input,    width = 4,                    .rdqs_t
		.rdqs_c_0                    (),                                                      //   input,    width = 4,                    .rdqs_c
		.wdqs_t_0                    (),                                                      //  output,    width = 4,                    .wdqs_t
		.wdqs_c_0                    (),                                                      //  output,    width = 4,                    .wdqs_c
		.rd_0                        (),                                                      //   inout,    width = 8,                    .rd
		.rr_0                        (),                                                      //  output,    width = 1,                    .rr
		.rc_0                        (),                                                      //  output,    width = 1,                    .rc
		.aerr_0                      (),                                                      //   input,    width = 1,                    .aerr
		.cattrip                     (bottom_m2u_bridge_cattrip),                             //   input,    width = 1,          m2u_bridge.cattrip
		.temp                        (bottom_m2u_bridge_temp),                                //   input,    width = 3,                    .temp
		.wso                         (bottom_m2u_bridge_wso),                                 //   input,    width = 8,                    .wso
		.reset_n                     (bottom_m2u_bridge_reset_n),                             //  output,    width = 1,                    .reset_n
		.wrst_n                      (bottom_m2u_bridge_wrst_n),                              //  output,    width = 1,                    .wrst_n
		.wrck                        (bottom_m2u_bridge_wrck),                                //  output,    width = 1,                    .wrck
		.shiftwr                     (bottom_m2u_bridge_shiftwr),                             //  output,    width = 1,                    .shiftwr
		.capturewr                   (bottom_m2u_bridge_capturewr),                           //  output,    width = 1,                    .capturewr
		.updatewr                    (bottom_m2u_bridge_updatewr),                            //  output,    width = 1,                    .updatewr
		.selectwir                   (bottom_m2u_bridge_selectwir),                           //  output,    width = 1,                    .selectwir
		.wsi                         (bottom_m2u_bridge_wsi),                                 //  output,    width = 1,                    .wsi
		.wmc_clk_0_clk               (hbm_bottom_example_design_wmc_clk_0_clk),               //  output,    width = 1,           wmc_clk_0.clk
		.phy_clk_0_clk               (),                                                      //  output,    width = 1,           phy_clk_0.clk
		.wmcrst_n_0_reset_n          (hbm_bottom_example_design_wmcrst_n_0_reset),            //  output,    width = 1,          wmcrst_n_0.reset_n
		.axi_0_1_awid                (tg_bottom0_1_axi_awid),                                 //   input,    width = 9,             axi_0_1.awid
		.axi_0_1_awaddr              (tg_bottom0_1_axi_awaddr),                               //   input,   width = 29,                    .awaddr
		.axi_0_1_awlen               (tg_bottom0_1_axi_awlen),                                //   input,    width = 8,                    .awlen
		.axi_0_1_awsize              (tg_bottom0_1_axi_awsize),                               //   input,    width = 3,                    .awsize
		.axi_0_1_awburst             (tg_bottom0_1_axi_awburst),                              //   input,    width = 2,                    .awburst
		.axi_0_1_awprot              (tg_bottom0_1_axi_awprot),                               //   input,    width = 3,                    .awprot
		.axi_0_1_awqos               (tg_bottom0_1_axi_awqos),                                //   input,    width = 4,                    .awqos
		.axi_0_1_awuser              (tg_bottom0_1_axi_awuser),                               //   input,    width = 1,                    .awuser
		.axi_0_1_awvalid             (tg_bottom0_1_axi_awvalid),                              //   input,    width = 1,                    .awvalid
		.axi_0_1_awready             (tg_bottom0_1_axi_awready),                              //  output,    width = 1,                    .awready
		.axi_0_1_wdata               (tg_bottom0_1_axi_wdata),                                //   input,  width = 256,                    .wdata
		.axi_0_1_wstrb               (tg_bottom0_1_axi_wstrb),                                //   input,   width = 32,                    .wstrb
		.axi_0_1_wlast               (tg_bottom0_1_axi_wlast),                                //   input,    width = 1,                    .wlast
		.axi_0_1_wvalid              (tg_bottom0_1_axi_wvalid),                               //   input,    width = 1,                    .wvalid
		.axi_0_1_wready              (tg_bottom0_1_axi_wready),                               //  output,    width = 1,                    .wready
		.axi_0_1_bid                 (tg_bottom0_1_axi_bid),                                  //  output,    width = 9,                    .bid
		.axi_0_1_bresp               (tg_bottom0_1_axi_bresp),                                //  output,    width = 2,                    .bresp
		.axi_0_1_bvalid              (tg_bottom0_1_axi_bvalid),                               //  output,    width = 1,                    .bvalid
		.axi_0_1_bready              (tg_bottom0_1_axi_bready),                               //   input,    width = 1,                    .bready
		.axi_0_1_arid                (tg_bottom0_1_axi_arid),                                 //   input,    width = 9,                    .arid
		.axi_0_1_araddr              (tg_bottom0_1_axi_araddr),                               //   input,   width = 29,                    .araddr
		.axi_0_1_arlen               (tg_bottom0_1_axi_arlen),                                //   input,    width = 8,                    .arlen
		.axi_0_1_arsize              (tg_bottom0_1_axi_arsize),                               //   input,    width = 3,                    .arsize
		.axi_0_1_arburst             (tg_bottom0_1_axi_arburst),                              //   input,    width = 2,                    .arburst
		.axi_0_1_arprot              (tg_bottom0_1_axi_arprot),                               //   input,    width = 3,                    .arprot
		.axi_0_1_arqos               (tg_bottom0_1_axi_arqos),                                //   input,    width = 4,                    .arqos
		.axi_0_1_aruser              (tg_bottom0_1_axi_aruser),                               //   input,    width = 1,                    .aruser
		.axi_0_1_arvalid             (tg_bottom0_1_axi_arvalid),                              //   input,    width = 1,                    .arvalid
		.axi_0_1_arready             (tg_bottom0_1_axi_arready),                              //  output,    width = 1,                    .arready
		.axi_0_1_rid                 (tg_bottom0_1_axi_rid),                                  //  output,    width = 9,                    .rid
		.axi_0_1_rdata               (tg_bottom0_1_axi_rdata),                                //  output,  width = 256,                    .rdata
		.axi_0_1_rresp               (tg_bottom0_1_axi_rresp),                                //  output,    width = 2,                    .rresp
		.axi_0_1_rlast               (tg_bottom0_1_axi_rlast),                                //  output,    width = 1,                    .rlast
		.axi_0_1_rvalid              (tg_bottom0_1_axi_rvalid),                               //  output,    width = 1,                    .rvalid
		.axi_0_1_rready              (tg_bottom0_1_axi_rready),                               //   input,    width = 1,                    .rready
		.axi_0_0_awid                (tg_bottom0_0_axi_awid),                                 //   input,    width = 9,             axi_0_0.awid
		.axi_0_0_awaddr              (tg_bottom0_0_axi_awaddr),                               //   input,   width = 29,                    .awaddr
		.axi_0_0_awlen               (tg_bottom0_0_axi_awlen),                                //   input,    width = 8,                    .awlen
		.axi_0_0_awsize              (tg_bottom0_0_axi_awsize),                               //   input,    width = 3,                    .awsize
		.axi_0_0_awburst             (tg_bottom0_0_axi_awburst),                              //   input,    width = 2,                    .awburst
		.axi_0_0_awprot              (tg_bottom0_0_axi_awprot),                               //   input,    width = 3,                    .awprot
		.axi_0_0_awqos               (tg_bottom0_0_axi_awqos),                                //   input,    width = 4,                    .awqos
		.axi_0_0_awuser              (tg_bottom0_0_axi_awuser),                               //   input,    width = 1,                    .awuser
		.axi_0_0_awvalid             (tg_bottom0_0_axi_awvalid),                              //   input,    width = 1,                    .awvalid
		.axi_0_0_awready             (tg_bottom0_0_axi_awready),                              //  output,    width = 1,                    .awready
		.axi_0_0_wdata               (tg_bottom0_0_axi_wdata),                                //   input,  width = 256,                    .wdata
		.axi_0_0_wstrb               (tg_bottom0_0_axi_wstrb),                                //   input,   width = 32,                    .wstrb
		.axi_0_0_wlast               (tg_bottom0_0_axi_wlast),                                //   input,    width = 1,                    .wlast
		.axi_0_0_wvalid              (tg_bottom0_0_axi_wvalid),                               //   input,    width = 1,                    .wvalid
		.axi_0_0_wready              (tg_bottom0_0_axi_wready),                               //  output,    width = 1,                    .wready
		.axi_0_0_bid                 (tg_bottom0_0_axi_bid),                                  //  output,    width = 9,                    .bid
		.axi_0_0_bresp               (tg_bottom0_0_axi_bresp),                                //  output,    width = 2,                    .bresp
		.axi_0_0_bvalid              (tg_bottom0_0_axi_bvalid),                               //  output,    width = 1,                    .bvalid
		.axi_0_0_bready              (tg_bottom0_0_axi_bready),                               //   input,    width = 1,                    .bready
		.axi_0_0_arid                (tg_bottom0_0_axi_arid),                                 //   input,    width = 9,                    .arid
		.axi_0_0_araddr              (tg_bottom0_0_axi_araddr),                               //   input,   width = 29,                    .araddr
		.axi_0_0_arlen               (tg_bottom0_0_axi_arlen),                                //   input,    width = 8,                    .arlen
		.axi_0_0_arsize              (tg_bottom0_0_axi_arsize),                               //   input,    width = 3,                    .arsize
		.axi_0_0_arburst             (tg_bottom0_0_axi_arburst),                              //   input,    width = 2,                    .arburst
		.axi_0_0_arprot              (tg_bottom0_0_axi_arprot),                               //   input,    width = 3,                    .arprot
		.axi_0_0_arqos               (tg_bottom0_0_axi_arqos),                                //   input,    width = 4,                    .arqos
		.axi_0_0_aruser              (tg_bottom0_0_axi_aruser),                               //   input,    width = 1,                    .aruser
		.axi_0_0_arvalid             (tg_bottom0_0_axi_arvalid),                              //   input,    width = 1,                    .arvalid
		.axi_0_0_arready             (tg_bottom0_0_axi_arready),                              //  output,    width = 1,                    .arready
		.axi_0_0_rid                 (tg_bottom0_0_axi_rid),                                  //  output,    width = 9,                    .rid
		.axi_0_0_rdata               (tg_bottom0_0_axi_rdata),                                //  output,  width = 256,                    .rdata
		.axi_0_0_rresp               (tg_bottom0_0_axi_rresp),                                //  output,    width = 2,                    .rresp
		.axi_0_0_rlast               (tg_bottom0_0_axi_rlast),                                //  output,    width = 1,                    .rlast
		.axi_0_0_rvalid              (tg_bottom0_0_axi_rvalid),                               //  output,    width = 1,                    .rvalid
		.axi_0_0_rready              (tg_bottom0_0_axi_rready),                               //   input,    width = 1,                    .rready
		.axi_extra_0_1_ruser_err_dbe (),                                                      //  output,    width = 1,       axi_extra_0_1.ruser_err_dbe
		.axi_extra_0_1_ruser_data    (),                                                      //  output,   width = 32,                    .ruser_data
		.axi_extra_0_1_wuser_data    (),                                                      //   input,   width = 32,                    .wuser_data
		.axi_extra_0_1_wuser_strb    (),                                                      //   input,    width = 4,                    .wuser_strb
		.axi_extra_0_0_ruser_err_dbe (hbm_bottom_example_design_axi_extra_0_0_ruser_err_dbe), //  output,    width = 1,       axi_extra_0_0.ruser_err_dbe
		.axi_extra_0_0_ruser_data    (hbm_bottom_example_design_axi_extra_0_0_ruser_data),    //  output,   width = 32,                    .ruser_data
		.axi_extra_0_0_wuser_data    (tg_bottom0_1_axi_extra_wuser_data),                     //   input,   width = 32,                    .wuser_data
		.axi_extra_0_0_wuser_strb    (tg_bottom0_1_axi_extra_wuser_strb),                     //   input,    width = 4,                    .wuser_strb
		.apb_0_ur_paddr              (tg_bottom0_0_apb_ur_paddr),                             //   input,   width = 16,               apb_0.ur_paddr
		.apb_0_ur_psel               (tg_bottom0_0_apb_ur_psel),                              //   input,    width = 1,                    .ur_psel
		.apb_0_ur_penable            (tg_bottom0_0_apb_ur_penable),                           //   input,    width = 1,                    .ur_penable
		.apb_0_ur_pwrite             (tg_bottom0_0_apb_ur_pwrite),                            //   input,    width = 1,                    .ur_pwrite
		.apb_0_ur_pwdata             (tg_bottom0_0_apb_ur_pwdata),                            //   input,   width = 16,                    .ur_pwdata
		.apb_0_ur_pstrb              (tg_bottom0_0_apb_ur_pstrb),                             //   input,    width = 2,                    .ur_pstrb
		.apb_0_ur_prready            (hbm_bottom_example_design_apb_0_ur_prready),            //  output,    width = 1,                    .ur_prready
		.apb_0_ur_prdata             (hbm_bottom_example_design_apb_0_ur_prdata)              //  output,   width = 16,                    .ur_prdata
	);

	hbm_top_example_design hbm_top_example_design (
		.pll_ref_clk                 (top_pll_ref_clk_clk),                                //   input,    width = 1,         pll_ref_clk.clk
		.ext_core_clk                (top_core_clk_iopll_outclk0_clk),                     //   input,    width = 1,        ext_core_clk.clk
		.ext_core_clk_locked         (top_core_clk_iopll_locked_export),                   //   input,    width = 1, ext_core_clk_locked.export
		.wmcrst_n_in                 (top_wmcrst_n_in_reset_n),                            //   input,    width = 1,         wmcrst_n_in.reset_n
		.hbm_only_reset_in           (top_only_reset_in_reset),                            //   input,    width = 1,   hbm_only_reset_in.reset
		.local_cal_success           (),                                                   //  output,    width = 1,              status.local_cal_success
		.local_cal_fail              (),                                                   //  output,    width = 1,                    .local_cal_fail
		.cal_lat                     (),                                                   //  output,    width = 3,             cal_lat.cal_lat
		.ck_t_0                      (),                                                   //  output,    width = 1,               mem_0.ck_t
		.ck_c_0                      (),                                                   //  output,    width = 1,                    .ck_c
		.cke_0                       (),                                                   //  output,    width = 1,                    .cke
		.c_0                         (),                                                   //  output,    width = 8,                    .c
		.r_0                         (),                                                   //  output,    width = 6,                    .r
		.dq_0                        (),                                                   //   inout,  width = 128,                    .dq
		.dm_0                        (),                                                   //   inout,   width = 16,                    .dm
		.dbi_0                       (),                                                   //   inout,   width = 16,                    .dbi
		.par_0                       (),                                                   //   inout,    width = 4,                    .par
		.derr_0                      (),                                                   //   inout,    width = 4,                    .derr
		.rdqs_t_0                    (),                                                   //   input,    width = 4,                    .rdqs_t
		.rdqs_c_0                    (),                                                   //   input,    width = 4,                    .rdqs_c
		.wdqs_t_0                    (),                                                   //  output,    width = 4,                    .wdqs_t
		.wdqs_c_0                    (),                                                   //  output,    width = 4,                    .wdqs_c
		.rd_0                        (),                                                   //   inout,    width = 8,                    .rd
		.rr_0                        (),                                                   //  output,    width = 1,                    .rr
		.rc_0                        (),                                                   //  output,    width = 1,                    .rc
		.aerr_0                      (),                                                   //   input,    width = 1,                    .aerr
		.cattrip                     (top_m2u_bridge_cattrip),                             //   input,    width = 1,          m2u_bridge.cattrip
		.temp                        (top_m2u_bridge_temp),                                //   input,    width = 3,                    .temp
		.wso                         (top_m2u_bridge_wso),                                 //   input,    width = 8,                    .wso
		.reset_n                     (top_m2u_bridge_reset_n),                             //  output,    width = 1,                    .reset_n
		.wrst_n                      (top_m2u_bridge_wrst_n),                              //  output,    width = 1,                    .wrst_n
		.wrck                        (top_m2u_bridge_wrck),                                //  output,    width = 1,                    .wrck
		.shiftwr                     (top_m2u_bridge_shiftwr),                             //  output,    width = 1,                    .shiftwr
		.capturewr                   (top_m2u_bridge_capturewr),                           //  output,    width = 1,                    .capturewr
		.updatewr                    (top_m2u_bridge_updatewr),                            //  output,    width = 1,                    .updatewr
		.selectwir                   (top_m2u_bridge_selectwir),                           //  output,    width = 1,                    .selectwir
		.wsi                         (top_m2u_bridge_wsi),                                 //  output,    width = 1,                    .wsi
		.wmc_clk_0_clk               (hbm_top_example_design_wmc_clk_0_clk),               //  output,    width = 1,           wmc_clk_0.clk
		.phy_clk_0_clk               (),                                                   //  output,    width = 1,           phy_clk_0.clk
		.wmcrst_n_0_reset_n          (hbm_top_example_design_wmcrst_n_0_reset),            //  output,    width = 1,          wmcrst_n_0.reset_n
		.axi_0_1_awid                (tg_top0_1_axi_awid),                                 //   input,    width = 9,             axi_0_1.awid
		.axi_0_1_awaddr              (tg_top0_1_axi_awaddr),                               //   input,   width = 29,                    .awaddr
		.axi_0_1_awlen               (tg_top0_1_axi_awlen),                                //   input,    width = 8,                    .awlen
		.axi_0_1_awsize              (tg_top0_1_axi_awsize),                               //   input,    width = 3,                    .awsize
		.axi_0_1_awburst             (tg_top0_1_axi_awburst),                              //   input,    width = 2,                    .awburst
		.axi_0_1_awprot              (tg_top0_1_axi_awprot),                               //   input,    width = 3,                    .awprot
		.axi_0_1_awqos               (tg_top0_1_axi_awqos),                                //   input,    width = 4,                    .awqos
		.axi_0_1_awuser              (tg_top0_1_axi_awuser),                               //   input,    width = 1,                    .awuser
		.axi_0_1_awvalid             (tg_top0_1_axi_awvalid),                              //   input,    width = 1,                    .awvalid
		.axi_0_1_awready             (tg_top0_1_axi_awready),                              //  output,    width = 1,                    .awready
		.axi_0_1_wdata               (tg_top0_1_axi_wdata),                                //   input,  width = 256,                    .wdata
		.axi_0_1_wstrb               (tg_top0_1_axi_wstrb),                                //   input,   width = 32,                    .wstrb
		.axi_0_1_wlast               (tg_top0_1_axi_wlast),                                //   input,    width = 1,                    .wlast
		.axi_0_1_wvalid              (tg_top0_1_axi_wvalid),                               //   input,    width = 1,                    .wvalid
		.axi_0_1_wready              (tg_top0_1_axi_wready),                               //  output,    width = 1,                    .wready
		.axi_0_1_bid                 (tg_top0_1_axi_bid),                                  //  output,    width = 9,                    .bid
		.axi_0_1_bresp               (tg_top0_1_axi_bresp),                                //  output,    width = 2,                    .bresp
		.axi_0_1_bvalid              (tg_top0_1_axi_bvalid),                               //  output,    width = 1,                    .bvalid
		.axi_0_1_bready              (tg_top0_1_axi_bready),                               //   input,    width = 1,                    .bready
		.axi_0_1_arid                (tg_top0_1_axi_arid),                                 //   input,    width = 9,                    .arid
		.axi_0_1_araddr              (tg_top0_1_axi_araddr),                               //   input,   width = 29,                    .araddr
		.axi_0_1_arlen               (tg_top0_1_axi_arlen),                                //   input,    width = 8,                    .arlen
		.axi_0_1_arsize              (tg_top0_1_axi_arsize),                               //   input,    width = 3,                    .arsize
		.axi_0_1_arburst             (tg_top0_1_axi_arburst),                              //   input,    width = 2,                    .arburst
		.axi_0_1_arprot              (tg_top0_1_axi_arprot),                               //   input,    width = 3,                    .arprot
		.axi_0_1_arqos               (tg_top0_1_axi_arqos),                                //   input,    width = 4,                    .arqos
		.axi_0_1_aruser              (tg_top0_1_axi_aruser),                               //   input,    width = 1,                    .aruser
		.axi_0_1_arvalid             (tg_top0_1_axi_arvalid),                              //   input,    width = 1,                    .arvalid
		.axi_0_1_arready             (tg_top0_1_axi_arready),                              //  output,    width = 1,                    .arready
		.axi_0_1_rid                 (tg_top0_1_axi_rid),                                  //  output,    width = 9,                    .rid
		.axi_0_1_rdata               (tg_top0_1_axi_rdata),                                //  output,  width = 256,                    .rdata
		.axi_0_1_rresp               (tg_top0_1_axi_rresp),                                //  output,    width = 2,                    .rresp
		.axi_0_1_rlast               (tg_top0_1_axi_rlast),                                //  output,    width = 1,                    .rlast
		.axi_0_1_rvalid              (tg_top0_1_axi_rvalid),                               //  output,    width = 1,                    .rvalid
		.axi_0_1_rready              (tg_top0_1_axi_rready),                               //   input,    width = 1,                    .rready
		.axi_0_0_awid                (tg_top0_0_axi_awid),                                 //   input,    width = 9,             axi_0_0.awid
		.axi_0_0_awaddr              (tg_top0_0_axi_awaddr),                               //   input,   width = 29,                    .awaddr
		.axi_0_0_awlen               (tg_top0_0_axi_awlen),                                //   input,    width = 8,                    .awlen
		.axi_0_0_awsize              (tg_top0_0_axi_awsize),                               //   input,    width = 3,                    .awsize
		.axi_0_0_awburst             (tg_top0_0_axi_awburst),                              //   input,    width = 2,                    .awburst
		.axi_0_0_awprot              (tg_top0_0_axi_awprot),                               //   input,    width = 3,                    .awprot
		.axi_0_0_awqos               (tg_top0_0_axi_awqos),                                //   input,    width = 4,                    .awqos
		.axi_0_0_awuser              (tg_top0_0_axi_awuser),                               //   input,    width = 1,                    .awuser
		.axi_0_0_awvalid             (tg_top0_0_axi_awvalid),                              //   input,    width = 1,                    .awvalid
		.axi_0_0_awready             (tg_top0_0_axi_awready),                              //  output,    width = 1,                    .awready
		.axi_0_0_wdata               (tg_top0_0_axi_wdata),                                //   input,  width = 256,                    .wdata
		.axi_0_0_wstrb               (tg_top0_0_axi_wstrb),                                //   input,   width = 32,                    .wstrb
		.axi_0_0_wlast               (tg_top0_0_axi_wlast),                                //   input,    width = 1,                    .wlast
		.axi_0_0_wvalid              (tg_top0_0_axi_wvalid),                               //   input,    width = 1,                    .wvalid
		.axi_0_0_wready              (tg_top0_0_axi_wready),                               //  output,    width = 1,                    .wready
		.axi_0_0_bid                 (tg_top0_0_axi_bid),                                  //  output,    width = 9,                    .bid
		.axi_0_0_bresp               (tg_top0_0_axi_bresp),                                //  output,    width = 2,                    .bresp
		.axi_0_0_bvalid              (tg_top0_0_axi_bvalid),                               //  output,    width = 1,                    .bvalid
		.axi_0_0_bready              (tg_top0_0_axi_bready),                               //   input,    width = 1,                    .bready
		.axi_0_0_arid                (tg_top0_0_axi_arid),                                 //   input,    width = 9,                    .arid
		.axi_0_0_araddr              (tg_top0_0_axi_araddr),                               //   input,   width = 29,                    .araddr
		.axi_0_0_arlen               (tg_top0_0_axi_arlen),                                //   input,    width = 8,                    .arlen
		.axi_0_0_arsize              (tg_top0_0_axi_arsize),                               //   input,    width = 3,                    .arsize
		.axi_0_0_arburst             (tg_top0_0_axi_arburst),                              //   input,    width = 2,                    .arburst
		.axi_0_0_arprot              (tg_top0_0_axi_arprot),                               //   input,    width = 3,                    .arprot
		.axi_0_0_arqos               (tg_top0_0_axi_arqos),                                //   input,    width = 4,                    .arqos
		.axi_0_0_aruser              (tg_top0_0_axi_aruser),                               //   input,    width = 1,                    .aruser
		.axi_0_0_arvalid             (tg_top0_0_axi_arvalid),                              //   input,    width = 1,                    .arvalid
		.axi_0_0_arready             (tg_top0_0_axi_arready),                              //  output,    width = 1,                    .arready
		.axi_0_0_rid                 (tg_top0_0_axi_rid),                                  //  output,    width = 9,                    .rid
		.axi_0_0_rdata               (tg_top0_0_axi_rdata),                                //  output,  width = 256,                    .rdata
		.axi_0_0_rresp               (tg_top0_0_axi_rresp),                                //  output,    width = 2,                    .rresp
		.axi_0_0_rlast               (tg_top0_0_axi_rlast),                                //  output,    width = 1,                    .rlast
		.axi_0_0_rvalid              (tg_top0_0_axi_rvalid),                               //  output,    width = 1,                    .rvalid
		.axi_0_0_rready              (tg_top0_0_axi_rready),                               //   input,    width = 1,                    .rready
		.axi_extra_0_1_ruser_err_dbe (hbm_top_example_design_axi_extra_0_1_ruser_err_dbe), //  output,    width = 1,       axi_extra_0_1.ruser_err_dbe
		.axi_extra_0_1_ruser_data    (hbm_top_example_design_axi_extra_0_1_ruser_data),    //  output,   width = 32,                    .ruser_data
		.axi_extra_0_1_wuser_data    (tg_top0_1_axi_extra_wuser_data),                     //   input,   width = 32,                    .wuser_data
		.axi_extra_0_1_wuser_strb    (tg_top0_1_axi_extra_wuser_strb),                     //   input,    width = 4,                    .wuser_strb
		.axi_extra_0_0_ruser_err_dbe (hbm_top_example_design_axi_extra_0_0_ruser_err_dbe), //  output,    width = 1,       axi_extra_0_0.ruser_err_dbe
		.axi_extra_0_0_ruser_data    (hbm_top_example_design_axi_extra_0_0_ruser_data),    //  output,   width = 32,                    .ruser_data
		.axi_extra_0_0_wuser_data    (tg_top0_0_axi_extra_wuser_data),                     //   input,   width = 32,                    .wuser_data
		.axi_extra_0_0_wuser_strb    (tg_top0_0_axi_extra_wuser_strb),                     //   input,    width = 4,                    .wuser_strb
		.apb_0_ur_paddr              (tg_top0_0_apb_ur_paddr),                             //   input,   width = 16,               apb_0.ur_paddr
		.apb_0_ur_psel               (tg_top0_0_apb_ur_psel),                              //   input,    width = 1,                    .ur_psel
		.apb_0_ur_penable            (tg_top0_0_apb_ur_penable),                           //   input,    width = 1,                    .ur_penable
		.apb_0_ur_pwrite             (tg_top0_0_apb_ur_pwrite),                            //   input,    width = 1,                    .ur_pwrite
		.apb_0_ur_pwdata             (tg_top0_0_apb_ur_pwdata),                            //   input,   width = 16,                    .ur_pwdata
		.apb_0_ur_pstrb              (tg_top0_0_apb_ur_pstrb),                             //   input,    width = 2,                    .ur_pstrb
		.apb_0_ur_prready            (hbm_top_example_design_apb_0_ur_prready),            //  output,    width = 1,                    .ur_prready
		.apb_0_ur_prdata             (hbm_top_example_design_apb_0_ur_prdata)              //  output,   width = 16,                    .ur_prdata
	);

	tg_bottom0_0 tg_bottom0_0 (
		.wmc_clk_in          (hbm_bottom_example_design_wmc_clk_0_clk),    //   input,    width = 1,  wmc_clk_in.clk
		.wmcrst_n_in         (hbm_bottom_example_design_wmcrst_n_0_reset), //   input,    width = 1, wmcrst_n_in.reset_n
		.ninit_done          (),                                           //   input,    width = 1,  ninit_done.ninit_done
		.awid                (tg_bottom0_0_axi_awid),                      //  output,    width = 9,         axi.awid
		.awaddr              (tg_bottom0_0_axi_awaddr),                    //  output,   width = 29,            .awaddr
		.awlen               (tg_bottom0_0_axi_awlen),                     //  output,    width = 8,            .awlen
		.awsize              (tg_bottom0_0_axi_awsize),                    //  output,    width = 3,            .awsize
		.awburst             (tg_bottom0_0_axi_awburst),                   //  output,    width = 2,            .awburst
		.awprot              (tg_bottom0_0_axi_awprot),                    //  output,    width = 3,            .awprot
		.awqos               (tg_bottom0_0_axi_awqos),                     //  output,    width = 4,            .awqos
		.awuser_ap           (tg_bottom0_0_axi_awuser),                    //  output,    width = 1,            .awuser
		.awvalid             (tg_bottom0_0_axi_awvalid),                   //  output,    width = 1,            .awvalid
		.awready             (tg_bottom0_0_axi_awready),                   //   input,    width = 1,            .awready
		.wdata               (tg_bottom0_0_axi_wdata),                     //  output,  width = 256,            .wdata
		.wstrb               (tg_bottom0_0_axi_wstrb),                     //  output,   width = 32,            .wstrb
		.wlast               (tg_bottom0_0_axi_wlast),                     //  output,    width = 1,            .wlast
		.wvalid              (tg_bottom0_0_axi_wvalid),                    //  output,    width = 1,            .wvalid
		.wready              (tg_bottom0_0_axi_wready),                    //   input,    width = 1,            .wready
		.bid                 (tg_bottom0_0_axi_bid),                       //   input,    width = 9,            .bid
		.bresp               (tg_bottom0_0_axi_bresp),                     //   input,    width = 2,            .bresp
		.bvalid              (tg_bottom0_0_axi_bvalid),                    //   input,    width = 1,            .bvalid
		.bready              (tg_bottom0_0_axi_bready),                    //  output,    width = 1,            .bready
		.arid                (tg_bottom0_0_axi_arid),                      //  output,    width = 9,            .arid
		.araddr              (tg_bottom0_0_axi_araddr),                    //  output,   width = 29,            .araddr
		.arlen               (tg_bottom0_0_axi_arlen),                     //  output,    width = 8,            .arlen
		.arsize              (tg_bottom0_0_axi_arsize),                    //  output,    width = 3,            .arsize
		.arburst             (tg_bottom0_0_axi_arburst),                   //  output,    width = 2,            .arburst
		.arprot              (tg_bottom0_0_axi_arprot),                    //  output,    width = 3,            .arprot
		.arqos               (tg_bottom0_0_axi_arqos),                     //  output,    width = 4,            .arqos
		.aruser_ap           (tg_bottom0_0_axi_aruser),                    //  output,    width = 1,            .aruser
		.arvalid             (tg_bottom0_0_axi_arvalid),                   //  output,    width = 1,            .arvalid
		.arready             (tg_bottom0_0_axi_arready),                   //   input,    width = 1,            .arready
		.rid                 (tg_bottom0_0_axi_rid),                       //   input,    width = 9,            .rid
		.rdata               (tg_bottom0_0_axi_rdata),                     //   input,  width = 256,            .rdata
		.rresp               (tg_bottom0_0_axi_rresp),                     //   input,    width = 2,            .rresp
		.rlast               (tg_bottom0_0_axi_rlast),                     //   input,    width = 1,            .rlast
		.rvalid              (tg_bottom0_0_axi_rvalid),                    //   input,    width = 1,            .rvalid
		.rready              (tg_bottom0_0_axi_rready),                    //  output,    width = 1,            .rready
		.ruser_err_dbe       (),                                           //   input,    width = 1,   axi_extra.ruser_err_dbe
		.ruser_data          (),                                           //   input,   width = 32,            .ruser_data
		.wuser_data          (),                                           //  output,   width = 32,            .wuser_data
		.wuser_strb          (),                                           //  output,    width = 4,            .wuser_strb
		.traffic_gen_pass    (tg_bottom0_0_status_traffic_gen_pass),       //  output,    width = 1,   tg_status.traffic_gen_pass
		.traffic_gen_fail    (tg_bottom0_0_status_traffic_gen_fail),       //  output,    width = 1,            .traffic_gen_fail
		.traffic_gen_timeout (tg_bottom0_0_status_traffic_gen_timeout),    //  output,    width = 1,            .traffic_gen_timeout
		.ur_paddr            (tg_bottom0_0_apb_ur_paddr),                  //  output,   width = 16,         apb.ur_paddr
		.ur_psel             (tg_bottom0_0_apb_ur_psel),                   //  output,    width = 1,            .ur_psel
		.ur_penable          (tg_bottom0_0_apb_ur_penable),                //  output,    width = 1,            .ur_penable
		.ur_pwrite           (tg_bottom0_0_apb_ur_pwrite),                 //  output,    width = 1,            .ur_pwrite
		.ur_pwdata           (tg_bottom0_0_apb_ur_pwdata),                 //  output,   width = 16,            .ur_pwdata
		.ur_pstrb            (tg_bottom0_0_apb_ur_pstrb),                  //  output,    width = 2,            .ur_pstrb
		.ur_prready          (hbm_bottom_example_design_apb_0_ur_prready), //   input,    width = 1,            .ur_prready
		.ur_prdata           (hbm_bottom_example_design_apb_0_ur_prdata)   //   input,   width = 16,            .ur_prdata
	);

	tg_bottom0_1 tg_bottom0_1 (
		.wmc_clk_in          (hbm_bottom_example_design_wmc_clk_0_clk),               //   input,    width = 1,  wmc_clk_in.clk
		.wmcrst_n_in         (hbm_bottom_example_design_wmcrst_n_0_reset),            //   input,    width = 1, wmcrst_n_in.reset_n
		.ninit_done          (),                                                      //   input,    width = 1,  ninit_done.ninit_done
		.awid                (tg_bottom0_1_axi_awid),                                 //  output,    width = 9,         axi.awid
		.awaddr              (tg_bottom0_1_axi_awaddr),                               //  output,   width = 29,            .awaddr
		.awlen               (tg_bottom0_1_axi_awlen),                                //  output,    width = 8,            .awlen
		.awsize              (tg_bottom0_1_axi_awsize),                               //  output,    width = 3,            .awsize
		.awburst             (tg_bottom0_1_axi_awburst),                              //  output,    width = 2,            .awburst
		.awprot              (tg_bottom0_1_axi_awprot),                               //  output,    width = 3,            .awprot
		.awqos               (tg_bottom0_1_axi_awqos),                                //  output,    width = 4,            .awqos
		.awuser_ap           (tg_bottom0_1_axi_awuser),                               //  output,    width = 1,            .awuser
		.awvalid             (tg_bottom0_1_axi_awvalid),                              //  output,    width = 1,            .awvalid
		.awready             (tg_bottom0_1_axi_awready),                              //   input,    width = 1,            .awready
		.wdata               (tg_bottom0_1_axi_wdata),                                //  output,  width = 256,            .wdata
		.wstrb               (tg_bottom0_1_axi_wstrb),                                //  output,   width = 32,            .wstrb
		.wlast               (tg_bottom0_1_axi_wlast),                                //  output,    width = 1,            .wlast
		.wvalid              (tg_bottom0_1_axi_wvalid),                               //  output,    width = 1,            .wvalid
		.wready              (tg_bottom0_1_axi_wready),                               //   input,    width = 1,            .wready
		.bid                 (tg_bottom0_1_axi_bid),                                  //   input,    width = 9,            .bid
		.bresp               (tg_bottom0_1_axi_bresp),                                //   input,    width = 2,            .bresp
		.bvalid              (tg_bottom0_1_axi_bvalid),                               //   input,    width = 1,            .bvalid
		.bready              (tg_bottom0_1_axi_bready),                               //  output,    width = 1,            .bready
		.arid                (tg_bottom0_1_axi_arid),                                 //  output,    width = 9,            .arid
		.araddr              (tg_bottom0_1_axi_araddr),                               //  output,   width = 29,            .araddr
		.arlen               (tg_bottom0_1_axi_arlen),                                //  output,    width = 8,            .arlen
		.arsize              (tg_bottom0_1_axi_arsize),                               //  output,    width = 3,            .arsize
		.arburst             (tg_bottom0_1_axi_arburst),                              //  output,    width = 2,            .arburst
		.arprot              (tg_bottom0_1_axi_arprot),                               //  output,    width = 3,            .arprot
		.arqos               (tg_bottom0_1_axi_arqos),                                //  output,    width = 4,            .arqos
		.aruser_ap           (tg_bottom0_1_axi_aruser),                               //  output,    width = 1,            .aruser
		.arvalid             (tg_bottom0_1_axi_arvalid),                              //  output,    width = 1,            .arvalid
		.arready             (tg_bottom0_1_axi_arready),                              //   input,    width = 1,            .arready
		.rid                 (tg_bottom0_1_axi_rid),                                  //   input,    width = 9,            .rid
		.rdata               (tg_bottom0_1_axi_rdata),                                //   input,  width = 256,            .rdata
		.rresp               (tg_bottom0_1_axi_rresp),                                //   input,    width = 2,            .rresp
		.rlast               (tg_bottom0_1_axi_rlast),                                //   input,    width = 1,            .rlast
		.rvalid              (tg_bottom0_1_axi_rvalid),                               //   input,    width = 1,            .rvalid
		.rready              (tg_bottom0_1_axi_rready),                               //  output,    width = 1,            .rready
		.ruser_err_dbe       (hbm_bottom_example_design_axi_extra_0_0_ruser_err_dbe), //   input,    width = 1,   axi_extra.ruser_err_dbe
		.ruser_data          (hbm_bottom_example_design_axi_extra_0_0_ruser_data),    //   input,   width = 32,            .ruser_data
		.wuser_data          (tg_bottom0_1_axi_extra_wuser_data),                     //  output,   width = 32,            .wuser_data
		.wuser_strb          (tg_bottom0_1_axi_extra_wuser_strb),                     //  output,    width = 4,            .wuser_strb
		.traffic_gen_pass    (tg_bottom0_1_status_traffic_gen_pass),                  //  output,    width = 1,   tg_status.traffic_gen_pass
		.traffic_gen_fail    (tg_bottom0_1_status_traffic_gen_fail),                  //  output,    width = 1,            .traffic_gen_fail
		.traffic_gen_timeout (tg_bottom0_1_status_traffic_gen_timeout)                //  output,    width = 1,            .traffic_gen_timeout
	);

	tg_top0_0 tg_top0_0 (
		.wmc_clk_in          (hbm_top_example_design_wmc_clk_0_clk),               //   input,    width = 1,  wmc_clk_in.clk
		.wmcrst_n_in         (hbm_top_example_design_wmcrst_n_0_reset),            //   input,    width = 1, wmcrst_n_in.reset_n
		.ninit_done          (),                                                   //   input,    width = 1,  ninit_done.ninit_done
		.awid                (tg_top0_0_axi_awid),                                 //  output,    width = 9,         axi.awid
		.awaddr              (tg_top0_0_axi_awaddr),                               //  output,   width = 29,            .awaddr
		.awlen               (tg_top0_0_axi_awlen),                                //  output,    width = 8,            .awlen
		.awsize              (tg_top0_0_axi_awsize),                               //  output,    width = 3,            .awsize
		.awburst             (tg_top0_0_axi_awburst),                              //  output,    width = 2,            .awburst
		.awprot              (tg_top0_0_axi_awprot),                               //  output,    width = 3,            .awprot
		.awqos               (tg_top0_0_axi_awqos),                                //  output,    width = 4,            .awqos
		.awuser_ap           (tg_top0_0_axi_awuser),                               //  output,    width = 1,            .awuser
		.awvalid             (tg_top0_0_axi_awvalid),                              //  output,    width = 1,            .awvalid
		.awready             (tg_top0_0_axi_awready),                              //   input,    width = 1,            .awready
		.wdata               (tg_top0_0_axi_wdata),                                //  output,  width = 256,            .wdata
		.wstrb               (tg_top0_0_axi_wstrb),                                //  output,   width = 32,            .wstrb
		.wlast               (tg_top0_0_axi_wlast),                                //  output,    width = 1,            .wlast
		.wvalid              (tg_top0_0_axi_wvalid),                               //  output,    width = 1,            .wvalid
		.wready              (tg_top0_0_axi_wready),                               //   input,    width = 1,            .wready
		.bid                 (tg_top0_0_axi_bid),                                  //   input,    width = 9,            .bid
		.bresp               (tg_top0_0_axi_bresp),                                //   input,    width = 2,            .bresp
		.bvalid              (tg_top0_0_axi_bvalid),                               //   input,    width = 1,            .bvalid
		.bready              (tg_top0_0_axi_bready),                               //  output,    width = 1,            .bready
		.arid                (tg_top0_0_axi_arid),                                 //  output,    width = 9,            .arid
		.araddr              (tg_top0_0_axi_araddr),                               //  output,   width = 29,            .araddr
		.arlen               (tg_top0_0_axi_arlen),                                //  output,    width = 8,            .arlen
		.arsize              (tg_top0_0_axi_arsize),                               //  output,    width = 3,            .arsize
		.arburst             (tg_top0_0_axi_arburst),                              //  output,    width = 2,            .arburst
		.arprot              (tg_top0_0_axi_arprot),                               //  output,    width = 3,            .arprot
		.arqos               (tg_top0_0_axi_arqos),                                //  output,    width = 4,            .arqos
		.aruser_ap           (tg_top0_0_axi_aruser),                               //  output,    width = 1,            .aruser
		.arvalid             (tg_top0_0_axi_arvalid),                              //  output,    width = 1,            .arvalid
		.arready             (tg_top0_0_axi_arready),                              //   input,    width = 1,            .arready
		.rid                 (tg_top0_0_axi_rid),                                  //   input,    width = 9,            .rid
		.rdata               (tg_top0_0_axi_rdata),                                //   input,  width = 256,            .rdata
		.rresp               (tg_top0_0_axi_rresp),                                //   input,    width = 2,            .rresp
		.rlast               (tg_top0_0_axi_rlast),                                //   input,    width = 1,            .rlast
		.rvalid              (tg_top0_0_axi_rvalid),                               //   input,    width = 1,            .rvalid
		.rready              (tg_top0_0_axi_rready),                               //  output,    width = 1,            .rready
		.ruser_err_dbe       (hbm_top_example_design_axi_extra_0_0_ruser_err_dbe), //   input,    width = 1,   axi_extra.ruser_err_dbe
		.ruser_data          (hbm_top_example_design_axi_extra_0_0_ruser_data),    //   input,   width = 32,            .ruser_data
		.wuser_data          (tg_top0_0_axi_extra_wuser_data),                     //  output,   width = 32,            .wuser_data
		.wuser_strb          (tg_top0_0_axi_extra_wuser_strb),                     //  output,    width = 4,            .wuser_strb
		.traffic_gen_pass    (tg_top0_0_status_traffic_gen_pass),                  //  output,    width = 1,   tg_status.traffic_gen_pass
		.traffic_gen_fail    (tg_top0_0_status_traffic_gen_fail),                  //  output,    width = 1,            .traffic_gen_fail
		.traffic_gen_timeout (tg_top0_0_status_traffic_gen_timeout),               //  output,    width = 1,            .traffic_gen_timeout
		.ur_paddr            (tg_top0_0_apb_ur_paddr),                             //  output,   width = 16,         apb.ur_paddr
		.ur_psel             (tg_top0_0_apb_ur_psel),                              //  output,    width = 1,            .ur_psel
		.ur_penable          (tg_top0_0_apb_ur_penable),                           //  output,    width = 1,            .ur_penable
		.ur_pwrite           (tg_top0_0_apb_ur_pwrite),                            //  output,    width = 1,            .ur_pwrite
		.ur_pwdata           (tg_top0_0_apb_ur_pwdata),                            //  output,   width = 16,            .ur_pwdata
		.ur_pstrb            (tg_top0_0_apb_ur_pstrb),                             //  output,    width = 2,            .ur_pstrb
		.ur_prready          (hbm_top_example_design_apb_0_ur_prready),            //   input,    width = 1,            .ur_prready
		.ur_prdata           (hbm_top_example_design_apb_0_ur_prdata)              //   input,   width = 16,            .ur_prdata
	);

	tg_top0_1 tg_top0_1 (
		.wmc_clk_in          (hbm_top_example_design_wmc_clk_0_clk),               //   input,    width = 1,  wmc_clk_in.clk
		.wmcrst_n_in         (hbm_top_example_design_wmcrst_n_0_reset),            //   input,    width = 1, wmcrst_n_in.reset_n
		.ninit_done          (),                                                   //   input,    width = 1,  ninit_done.ninit_done
		.awid                (tg_top0_1_axi_awid),                                 //  output,    width = 9,         axi.awid
		.awaddr              (tg_top0_1_axi_awaddr),                               //  output,   width = 29,            .awaddr
		.awlen               (tg_top0_1_axi_awlen),                                //  output,    width = 8,            .awlen
		.awsize              (tg_top0_1_axi_awsize),                               //  output,    width = 3,            .awsize
		.awburst             (tg_top0_1_axi_awburst),                              //  output,    width = 2,            .awburst
		.awprot              (tg_top0_1_axi_awprot),                               //  output,    width = 3,            .awprot
		.awqos               (tg_top0_1_axi_awqos),                                //  output,    width = 4,            .awqos
		.awuser_ap           (tg_top0_1_axi_awuser),                               //  output,    width = 1,            .awuser
		.awvalid             (tg_top0_1_axi_awvalid),                              //  output,    width = 1,            .awvalid
		.awready             (tg_top0_1_axi_awready),                              //   input,    width = 1,            .awready
		.wdata               (tg_top0_1_axi_wdata),                                //  output,  width = 256,            .wdata
		.wstrb               (tg_top0_1_axi_wstrb),                                //  output,   width = 32,            .wstrb
		.wlast               (tg_top0_1_axi_wlast),                                //  output,    width = 1,            .wlast
		.wvalid              (tg_top0_1_axi_wvalid),                               //  output,    width = 1,            .wvalid
		.wready              (tg_top0_1_axi_wready),                               //   input,    width = 1,            .wready
		.bid                 (tg_top0_1_axi_bid),                                  //   input,    width = 9,            .bid
		.bresp               (tg_top0_1_axi_bresp),                                //   input,    width = 2,            .bresp
		.bvalid              (tg_top0_1_axi_bvalid),                               //   input,    width = 1,            .bvalid
		.bready              (tg_top0_1_axi_bready),                               //  output,    width = 1,            .bready
		.arid                (tg_top0_1_axi_arid),                                 //  output,    width = 9,            .arid
		.araddr              (tg_top0_1_axi_araddr),                               //  output,   width = 29,            .araddr
		.arlen               (tg_top0_1_axi_arlen),                                //  output,    width = 8,            .arlen
		.arsize              (tg_top0_1_axi_arsize),                               //  output,    width = 3,            .arsize
		.arburst             (tg_top0_1_axi_arburst),                              //  output,    width = 2,            .arburst
		.arprot              (tg_top0_1_axi_arprot),                               //  output,    width = 3,            .arprot
		.arqos               (tg_top0_1_axi_arqos),                                //  output,    width = 4,            .arqos
		.aruser_ap           (tg_top0_1_axi_aruser),                               //  output,    width = 1,            .aruser
		.arvalid             (tg_top0_1_axi_arvalid),                              //  output,    width = 1,            .arvalid
		.arready             (tg_top0_1_axi_arready),                              //   input,    width = 1,            .arready
		.rid                 (tg_top0_1_axi_rid),                                  //   input,    width = 9,            .rid
		.rdata               (tg_top0_1_axi_rdata),                                //   input,  width = 256,            .rdata
		.rresp               (tg_top0_1_axi_rresp),                                //   input,    width = 2,            .rresp
		.rlast               (tg_top0_1_axi_rlast),                                //   input,    width = 1,            .rlast
		.rvalid              (tg_top0_1_axi_rvalid),                               //   input,    width = 1,            .rvalid
		.rready              (tg_top0_1_axi_rready),                               //  output,    width = 1,            .rready
		.ruser_err_dbe       (hbm_top_example_design_axi_extra_0_1_ruser_err_dbe), //   input,    width = 1,   axi_extra.ruser_err_dbe
		.ruser_data          (hbm_top_example_design_axi_extra_0_1_ruser_data),    //   input,   width = 32,            .ruser_data
		.wuser_data          (tg_top0_1_axi_extra_wuser_data),                     //  output,   width = 32,            .wuser_data
		.wuser_strb          (tg_top0_1_axi_extra_wuser_strb),                     //  output,    width = 4,            .wuser_strb
		.traffic_gen_pass    (tg_top0_1_status_traffic_gen_pass),                  //  output,    width = 1,   tg_status.traffic_gen_pass
		.traffic_gen_fail    (tg_top0_1_status_traffic_gen_fail),                  //  output,    width = 1,            .traffic_gen_fail
		.traffic_gen_timeout (tg_top0_1_status_traffic_gen_timeout)                //  output,    width = 1,            .traffic_gen_timeout
	);

	top_core_clk_iopll top_core_clk_iopll (
		.rst      (top_core_clk_iopll_reset_reset),   //   input,  width = 1,   reset.reset
		.refclk   (top_core_clk_iopll_ref_clk_clk),   //   input,  width = 1,  refclk.clk
		.locked   (top_core_clk_iopll_locked_export), //  output,  width = 1,  locked.export
		.outclk_0 (top_core_clk_iopll_outclk0_clk)    //  output,  width = 1, outclk0.clk
	);

endmodule
