// system_arbiter_1.v

// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module system_arbiter_1 (
		input  wire        clk,                //     clock.clk
		input  wire        reset,              //     reset.reset
		input  wire [1:0]  avs_s0_address,     //        s0.address
		input  wire        avs_s0_read,        //          .read
		output wire [31:0] avs_s0_readdata,    //          .readdata
		input  wire        avs_s0_write,       //          .write
		input  wire [31:0] avs_s0_writedata,   //          .writedata
		output wire        avs_s0_waitrequest, //          .waitrequest
		input  wire [31:0] hps_gp_o,           // hps_gp_if.gp_out
		output wire [31:0] hps_gp_i            //          .gp_in
	);

	arbiter system_arbiter_1 (
		.clk                (clk),                //   input,   width = 1,     clock.clk
		.reset              (reset),              //   input,   width = 1,     reset.reset
		.avs_s0_address     (avs_s0_address),     //   input,   width = 2,        s0.address
		.avs_s0_read        (avs_s0_read),        //   input,   width = 1,          .read
		.avs_s0_readdata    (avs_s0_readdata),    //  output,  width = 32,          .readdata
		.avs_s0_write       (avs_s0_write),       //   input,   width = 1,          .write
		.avs_s0_writedata   (avs_s0_writedata),   //   input,  width = 32,          .writedata
		.avs_s0_waitrequest (avs_s0_waitrequest), //  output,   width = 1,          .waitrequest
		.hps_gp_o           (hps_gp_o),           //   input,  width = 32, hps_gp_if.gp_out
		.hps_gp_i           (hps_gp_i)            //  output,  width = 32,          .gp_in
	);

endmodule
