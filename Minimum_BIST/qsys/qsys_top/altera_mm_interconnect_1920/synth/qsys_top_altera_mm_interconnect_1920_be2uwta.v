// qsys_top_altera_mm_interconnect_1920_be2uwta.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 20.3 158

`timescale 1 ps / 1 ps
module qsys_top_altera_mm_interconnect_1920_be2uwta (
		input  wire [19:0]  qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_address,                                      //                                        qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master.address
		output wire         qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest,                                  //                                                                                     .waitrequest
		input  wire [3:0]   qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_burstcount,                                   //                                                                                     .burstcount
		input  wire [63:0]  qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_byteenable,                                   //                                                                                     .byteenable
		input  wire         qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_read,                                         //                                                                                     .read
		output wire [511:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_readdata,                                     //                                                                                     .readdata
		output wire         qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_readdatavalid,                                //                                                                                     .readdatavalid
		input  wire         qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_write,                                        //                                                                                     .write
		input  wire [511:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_writedata,                                    //                                                                                     .writedata
		output wire [1:0]   qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_response,                                     //                                                                                     .response
		output wire         qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_writeresponsevalid,                           //                                                                                     .writeresponsevalid
		input  wire [14:0]  spi_pb_0_m0_address,                                                                        //                                                                          spi_pb_0_m0.address
		output wire         spi_pb_0_m0_waitrequest,                                                                    //                                                                                     .waitrequest
		input  wire [0:0]   spi_pb_0_m0_burstcount,                                                                     //                                                                                     .burstcount
		input  wire [3:0]   spi_pb_0_m0_byteenable,                                                                     //                                                                                     .byteenable
		input  wire         spi_pb_0_m0_read,                                                                           //                                                                                     .read
		output wire [31:0]  spi_pb_0_m0_readdata,                                                                       //                                                                                     .readdata
		output wire         spi_pb_0_m0_readdatavalid,                                                                  //                                                                                     .readdatavalid
		input  wire         spi_pb_0_m0_write,                                                                          //                                                                                     .write
		input  wire [31:0]  spi_pb_0_m0_writedata,                                                                      //                                                                                     .writedata
		input  wire         spi_pb_0_m0_debugaccess,                                                                    //                                                                                     .debugaccess
		input  wire [31:0]  qsys_top_master_0_master_address,                                                           //                                                             qsys_top_master_0_master.address
		output wire         qsys_top_master_0_master_waitrequest,                                                       //                                                                                     .waitrequest
		input  wire [3:0]   qsys_top_master_0_master_byteenable,                                                        //                                                                                     .byteenable
		input  wire         qsys_top_master_0_master_read,                                                              //                                                                                     .read
		output wire [31:0]  qsys_top_master_0_master_readdata,                                                          //                                                                                     .readdata
		output wire         qsys_top_master_0_master_readdatavalid,                                                     //                                                                                     .readdatavalid
		input  wire         qsys_top_master_0_master_write,                                                             //                                                                                     .write
		input  wire [31:0]  qsys_top_master_0_master_writedata,                                                         //                                                                                     .writedata
		output wire [11:0]  qsys_top_mm_clock_crossing_bridge_0_s0_address,                                             //                                               qsys_top_mm_clock_crossing_bridge_0_s0.address
		output wire         qsys_top_mm_clock_crossing_bridge_0_s0_write,                                               //                                                                                     .write
		output wire         qsys_top_mm_clock_crossing_bridge_0_s0_read,                                                //                                                                                     .read
		input  wire [31:0]  qsys_top_mm_clock_crossing_bridge_0_s0_readdata,                                            //                                                                                     .readdata
		output wire [31:0]  qsys_top_mm_clock_crossing_bridge_0_s0_writedata,                                           //                                                                                     .writedata
		output wire [0:0]   qsys_top_mm_clock_crossing_bridge_0_s0_burstcount,                                          //                                                                                     .burstcount
		output wire [3:0]   qsys_top_mm_clock_crossing_bridge_0_s0_byteenable,                                          //                                                                                     .byteenable
		input  wire         qsys_top_mm_clock_crossing_bridge_0_s0_readdatavalid,                                       //                                                                                     .readdatavalid
		input  wire         qsys_top_mm_clock_crossing_bridge_0_s0_waitrequest,                                         //                                                                                     .waitrequest
		output wire         qsys_top_mm_clock_crossing_bridge_0_s0_debugaccess,                                         //                                                                                     .debugaccess
		output wire [5:0]   arbiter_bridge_s0_address,                                                                  //                                                                    arbiter_bridge_s0.address
		output wire         arbiter_bridge_s0_write,                                                                    //                                                                                     .write
		output wire         arbiter_bridge_s0_read,                                                                     //                                                                                     .read
		input  wire [31:0]  arbiter_bridge_s0_readdata,                                                                 //                                                                                     .readdata
		output wire [31:0]  arbiter_bridge_s0_writedata,                                                                //                                                                                     .writedata
		output wire [0:0]   arbiter_bridge_s0_burstcount,                                                               //                                                                                     .burstcount
		output wire [3:0]   arbiter_bridge_s0_byteenable,                                                               //                                                                                     .byteenable
		input  wire         arbiter_bridge_s0_readdatavalid,                                                            //                                                                                     .readdatavalid
		input  wire         arbiter_bridge_s0_waitrequest,                                                              //                                                                                     .waitrequest
		output wire         arbiter_bridge_s0_debugaccess,                                                              //                                                                                     .debugaccess
		output wire [18:0]  PCIe_to_avmm_0_s0_address,                                                                  //                                                                    PCIe_to_avmm_0_s0.address
		output wire         PCIe_to_avmm_0_s0_write,                                                                    //                                                                                     .write
		output wire         PCIe_to_avmm_0_s0_read,                                                                     //                                                                                     .read
		input  wire [31:0]  PCIe_to_avmm_0_s0_readdata,                                                                 //                                                                                     .readdata
		output wire [31:0]  PCIe_to_avmm_0_s0_writedata,                                                                //                                                                                     .writedata
		output wire [0:0]   PCIe_to_avmm_0_s0_burstcount,                                                               //                                                                                     .burstcount
		output wire [3:0]   PCIe_to_avmm_0_s0_byteenable,                                                               //                                                                                     .byteenable
		input  wire         PCIe_to_avmm_0_s0_readdatavalid,                                                            //                                                                                     .readdatavalid
		input  wire         PCIe_to_avmm_0_s0_waitrequest,                                                              //                                                                                     .waitrequest
		output wire         PCIe_to_avmm_0_s0_debugaccess,                                                              //                                                                                     .debugaccess
		output wire [9:0]   ocmem_s1_address,                                                                           //                                                                             ocmem_s1.address
		output wire         ocmem_s1_write,                                                                             //                                                                                     .write
		input  wire [31:0]  ocmem_s1_readdata,                                                                          //                                                                                     .readdata
		output wire [31:0]  ocmem_s1_writedata,                                                                         //                                                                                     .writedata
		output wire [3:0]   ocmem_s1_byteenable,                                                                        //                                                                                     .byteenable
		output wire         ocmem_s1_chipselect,                                                                        //                                                                                     .chipselect
		output wire         ocmem_s1_clken,                                                                             //                                                                                     .clken
		output wire [10:0]  qsys_sys_mgr_system_mm_address,                                                             //                                                               qsys_sys_mgr_system_mm.address
		output wire         qsys_sys_mgr_system_mm_write,                                                               //                                                                                     .write
		output wire         qsys_sys_mgr_system_mm_read,                                                                //                                                                                     .read
		input  wire [31:0]  qsys_sys_mgr_system_mm_readdata,                                                            //                                                                                     .readdata
		output wire [31:0]  qsys_sys_mgr_system_mm_writedata,                                                           //                                                                                     .writedata
		output wire [0:0]   qsys_sys_mgr_system_mm_burstcount,                                                          //                                                                                     .burstcount
		output wire [3:0]   qsys_sys_mgr_system_mm_byteenable,                                                          //                                                                                     .byteenable
		input  wire         qsys_sys_mgr_system_mm_readdatavalid,                                                       //                                                                                     .readdatavalid
		input  wire         qsys_sys_mgr_system_mm_waitrequest,                                                         //                                                                                     .waitrequest
		output wire         qsys_sys_mgr_system_mm_debugaccess,                                                         //                                                                                     .debugaccess
		input  wire         spi_pb_0_reset_reset_bridge_in_reset_reset,                                                 //                                                 spi_pb_0_reset_reset_bridge_in_reset.reset
		input  wire         qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset,                   //                   qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset.reset
		input  wire         qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset, // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset.reset
		input  wire         qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk,                                      //                                    qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip.clk
		input  wire         qsys_clk_config_clk_clk                                                                     //                                                                  qsys_clk_config_clk.clk
	);

	wire          spi_pb_0_m0_translator_avalon_universal_master_0_waitrequest;                                          // spi_pb_0_m0_agent:av_waitrequest -> spi_pb_0_m0_translator:uav_waitrequest
	wire   [31:0] spi_pb_0_m0_translator_avalon_universal_master_0_readdata;                                             // spi_pb_0_m0_agent:av_readdata -> spi_pb_0_m0_translator:uav_readdata
	wire          spi_pb_0_m0_translator_avalon_universal_master_0_debugaccess;                                          // spi_pb_0_m0_translator:uav_debugaccess -> spi_pb_0_m0_agent:av_debugaccess
	wire   [31:0] spi_pb_0_m0_translator_avalon_universal_master_0_address;                                              // spi_pb_0_m0_translator:uav_address -> spi_pb_0_m0_agent:av_address
	wire          spi_pb_0_m0_translator_avalon_universal_master_0_read;                                                 // spi_pb_0_m0_translator:uav_read -> spi_pb_0_m0_agent:av_read
	wire    [3:0] spi_pb_0_m0_translator_avalon_universal_master_0_byteenable;                                           // spi_pb_0_m0_translator:uav_byteenable -> spi_pb_0_m0_agent:av_byteenable
	wire          spi_pb_0_m0_translator_avalon_universal_master_0_readdatavalid;                                        // spi_pb_0_m0_agent:av_readdatavalid -> spi_pb_0_m0_translator:uav_readdatavalid
	wire          spi_pb_0_m0_translator_avalon_universal_master_0_lock;                                                 // spi_pb_0_m0_translator:uav_lock -> spi_pb_0_m0_agent:av_lock
	wire          spi_pb_0_m0_translator_avalon_universal_master_0_write;                                                // spi_pb_0_m0_translator:uav_write -> spi_pb_0_m0_agent:av_write
	wire   [31:0] spi_pb_0_m0_translator_avalon_universal_master_0_writedata;                                            // spi_pb_0_m0_translator:uav_writedata -> spi_pb_0_m0_agent:av_writedata
	wire    [2:0] spi_pb_0_m0_translator_avalon_universal_master_0_burstcount;                                           // spi_pb_0_m0_translator:uav_burstcount -> spi_pb_0_m0_agent:av_burstcount
	wire          qsys_top_master_0_master_translator_avalon_universal_master_0_waitrequest;                             // qsys_top_master_0_master_agent:av_waitrequest -> qsys_top_master_0_master_translator:uav_waitrequest
	wire   [31:0] qsys_top_master_0_master_translator_avalon_universal_master_0_readdata;                                // qsys_top_master_0_master_agent:av_readdata -> qsys_top_master_0_master_translator:uav_readdata
	wire          qsys_top_master_0_master_translator_avalon_universal_master_0_debugaccess;                             // qsys_top_master_0_master_translator:uav_debugaccess -> qsys_top_master_0_master_agent:av_debugaccess
	wire   [31:0] qsys_top_master_0_master_translator_avalon_universal_master_0_address;                                 // qsys_top_master_0_master_translator:uav_address -> qsys_top_master_0_master_agent:av_address
	wire          qsys_top_master_0_master_translator_avalon_universal_master_0_read;                                    // qsys_top_master_0_master_translator:uav_read -> qsys_top_master_0_master_agent:av_read
	wire    [3:0] qsys_top_master_0_master_translator_avalon_universal_master_0_byteenable;                              // qsys_top_master_0_master_translator:uav_byteenable -> qsys_top_master_0_master_agent:av_byteenable
	wire          qsys_top_master_0_master_translator_avalon_universal_master_0_readdatavalid;                           // qsys_top_master_0_master_agent:av_readdatavalid -> qsys_top_master_0_master_translator:uav_readdatavalid
	wire          qsys_top_master_0_master_translator_avalon_universal_master_0_lock;                                    // qsys_top_master_0_master_translator:uav_lock -> qsys_top_master_0_master_agent:av_lock
	wire          qsys_top_master_0_master_translator_avalon_universal_master_0_write;                                   // qsys_top_master_0_master_translator:uav_write -> qsys_top_master_0_master_agent:av_write
	wire   [31:0] qsys_top_master_0_master_translator_avalon_universal_master_0_writedata;                               // qsys_top_master_0_master_translator:uav_writedata -> qsys_top_master_0_master_agent:av_writedata
	wire    [2:0] qsys_top_master_0_master_translator_avalon_universal_master_0_burstcount;                              // qsys_top_master_0_master_translator:uav_burstcount -> qsys_top_master_0_master_agent:av_burstcount
	wire   [31:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_readdata;                                              // qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_readdata -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_readdata
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest;                                           // qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_waitrequest -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_waitrequest
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess;                                           // qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_debugaccess -> qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_debugaccess
	wire   [31:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_address;                                               // qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_address -> qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_address
	wire    [3:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_byteenable;                                            // qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_byteenable -> qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_byteenable
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_read;                                                  // qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_read -> qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_read
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid;                                         // qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_readdatavalid -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_readdatavalid
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_lock;                                                  // qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_lock -> qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_lock
	wire   [31:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_writedata;                                             // qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_writedata -> qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_writedata
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_write;                                                 // qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_write -> qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_write
	wire    [2:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_burstcount;                                            // qsys_top_mm_clock_crossing_bridge_0_s0_agent:m0_burstcount -> qsys_top_mm_clock_crossing_bridge_0_s0_translator:uav_burstcount
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_valid;                                          // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_source_valid -> qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_valid
	wire  [122:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_data;                                           // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_source_data -> qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_data
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_ready;                                          // qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_ready -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_source_ready
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket;                                  // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_source_startofpacket -> qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_startofpacket
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket;                                    // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_source_endofpacket -> qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:in_endofpacket
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid;                                       // qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_valid -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_sink_valid
	wire  [122:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data;                                        // qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_data -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_sink_data
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready;                                       // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_sink_ready -> qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_ready
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket;                               // qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_startofpacket -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_sink_startofpacket
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket;                                 // qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo:out_endofpacket -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rf_sink_endofpacket
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid;                                     // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_valid -> qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data;                                      // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_data -> qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_data
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready;                                     // qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:in_ready -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_src_ready
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid;                                     // qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_valid -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data;                                      // qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_data -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_data
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready;                                     // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rdata_fifo_sink_ready -> qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo:out_ready
	wire   [31:0] arbiter_bridge_s0_agent_m0_readdata;                                                                   // arbiter_bridge_s0_translator:uav_readdata -> arbiter_bridge_s0_agent:m0_readdata
	wire          arbiter_bridge_s0_agent_m0_waitrequest;                                                                // arbiter_bridge_s0_translator:uav_waitrequest -> arbiter_bridge_s0_agent:m0_waitrequest
	wire          arbiter_bridge_s0_agent_m0_debugaccess;                                                                // arbiter_bridge_s0_agent:m0_debugaccess -> arbiter_bridge_s0_translator:uav_debugaccess
	wire   [31:0] arbiter_bridge_s0_agent_m0_address;                                                                    // arbiter_bridge_s0_agent:m0_address -> arbiter_bridge_s0_translator:uav_address
	wire    [3:0] arbiter_bridge_s0_agent_m0_byteenable;                                                                 // arbiter_bridge_s0_agent:m0_byteenable -> arbiter_bridge_s0_translator:uav_byteenable
	wire          arbiter_bridge_s0_agent_m0_read;                                                                       // arbiter_bridge_s0_agent:m0_read -> arbiter_bridge_s0_translator:uav_read
	wire          arbiter_bridge_s0_agent_m0_readdatavalid;                                                              // arbiter_bridge_s0_translator:uav_readdatavalid -> arbiter_bridge_s0_agent:m0_readdatavalid
	wire          arbiter_bridge_s0_agent_m0_lock;                                                                       // arbiter_bridge_s0_agent:m0_lock -> arbiter_bridge_s0_translator:uav_lock
	wire   [31:0] arbiter_bridge_s0_agent_m0_writedata;                                                                  // arbiter_bridge_s0_agent:m0_writedata -> arbiter_bridge_s0_translator:uav_writedata
	wire          arbiter_bridge_s0_agent_m0_write;                                                                      // arbiter_bridge_s0_agent:m0_write -> arbiter_bridge_s0_translator:uav_write
	wire    [2:0] arbiter_bridge_s0_agent_m0_burstcount;                                                                 // arbiter_bridge_s0_agent:m0_burstcount -> arbiter_bridge_s0_translator:uav_burstcount
	wire          arbiter_bridge_s0_agent_rf_source_valid;                                                               // arbiter_bridge_s0_agent:rf_source_valid -> arbiter_bridge_s0_agent_rsp_fifo:in_valid
	wire  [122:0] arbiter_bridge_s0_agent_rf_source_data;                                                                // arbiter_bridge_s0_agent:rf_source_data -> arbiter_bridge_s0_agent_rsp_fifo:in_data
	wire          arbiter_bridge_s0_agent_rf_source_ready;                                                               // arbiter_bridge_s0_agent_rsp_fifo:in_ready -> arbiter_bridge_s0_agent:rf_source_ready
	wire          arbiter_bridge_s0_agent_rf_source_startofpacket;                                                       // arbiter_bridge_s0_agent:rf_source_startofpacket -> arbiter_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          arbiter_bridge_s0_agent_rf_source_endofpacket;                                                         // arbiter_bridge_s0_agent:rf_source_endofpacket -> arbiter_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          arbiter_bridge_s0_agent_rsp_fifo_out_valid;                                                            // arbiter_bridge_s0_agent_rsp_fifo:out_valid -> arbiter_bridge_s0_agent:rf_sink_valid
	wire  [122:0] arbiter_bridge_s0_agent_rsp_fifo_out_data;                                                             // arbiter_bridge_s0_agent_rsp_fifo:out_data -> arbiter_bridge_s0_agent:rf_sink_data
	wire          arbiter_bridge_s0_agent_rsp_fifo_out_ready;                                                            // arbiter_bridge_s0_agent:rf_sink_ready -> arbiter_bridge_s0_agent_rsp_fifo:out_ready
	wire          arbiter_bridge_s0_agent_rsp_fifo_out_startofpacket;                                                    // arbiter_bridge_s0_agent_rsp_fifo:out_startofpacket -> arbiter_bridge_s0_agent:rf_sink_startofpacket
	wire          arbiter_bridge_s0_agent_rsp_fifo_out_endofpacket;                                                      // arbiter_bridge_s0_agent_rsp_fifo:out_endofpacket -> arbiter_bridge_s0_agent:rf_sink_endofpacket
	wire          arbiter_bridge_s0_agent_rdata_fifo_src_valid;                                                          // arbiter_bridge_s0_agent:rdata_fifo_src_valid -> arbiter_bridge_s0_agent_rdata_fifo:in_valid
	wire   [33:0] arbiter_bridge_s0_agent_rdata_fifo_src_data;                                                           // arbiter_bridge_s0_agent:rdata_fifo_src_data -> arbiter_bridge_s0_agent_rdata_fifo:in_data
	wire          arbiter_bridge_s0_agent_rdata_fifo_src_ready;                                                          // arbiter_bridge_s0_agent_rdata_fifo:in_ready -> arbiter_bridge_s0_agent:rdata_fifo_src_ready
	wire          arbiter_bridge_s0_agent_rdata_fifo_out_valid;                                                          // arbiter_bridge_s0_agent_rdata_fifo:out_valid -> arbiter_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] arbiter_bridge_s0_agent_rdata_fifo_out_data;                                                           // arbiter_bridge_s0_agent_rdata_fifo:out_data -> arbiter_bridge_s0_agent:rdata_fifo_sink_data
	wire          arbiter_bridge_s0_agent_rdata_fifo_out_ready;                                                          // arbiter_bridge_s0_agent:rdata_fifo_sink_ready -> arbiter_bridge_s0_agent_rdata_fifo:out_ready
	wire   [31:0] pcie_to_avmm_0_s0_agent_m0_readdata;                                                                   // PCIe_to_avmm_0_s0_translator:uav_readdata -> PCIe_to_avmm_0_s0_agent:m0_readdata
	wire          pcie_to_avmm_0_s0_agent_m0_waitrequest;                                                                // PCIe_to_avmm_0_s0_translator:uav_waitrequest -> PCIe_to_avmm_0_s0_agent:m0_waitrequest
	wire          pcie_to_avmm_0_s0_agent_m0_debugaccess;                                                                // PCIe_to_avmm_0_s0_agent:m0_debugaccess -> PCIe_to_avmm_0_s0_translator:uav_debugaccess
	wire   [31:0] pcie_to_avmm_0_s0_agent_m0_address;                                                                    // PCIe_to_avmm_0_s0_agent:m0_address -> PCIe_to_avmm_0_s0_translator:uav_address
	wire    [3:0] pcie_to_avmm_0_s0_agent_m0_byteenable;                                                                 // PCIe_to_avmm_0_s0_agent:m0_byteenable -> PCIe_to_avmm_0_s0_translator:uav_byteenable
	wire          pcie_to_avmm_0_s0_agent_m0_read;                                                                       // PCIe_to_avmm_0_s0_agent:m0_read -> PCIe_to_avmm_0_s0_translator:uav_read
	wire          pcie_to_avmm_0_s0_agent_m0_readdatavalid;                                                              // PCIe_to_avmm_0_s0_translator:uav_readdatavalid -> PCIe_to_avmm_0_s0_agent:m0_readdatavalid
	wire          pcie_to_avmm_0_s0_agent_m0_lock;                                                                       // PCIe_to_avmm_0_s0_agent:m0_lock -> PCIe_to_avmm_0_s0_translator:uav_lock
	wire   [31:0] pcie_to_avmm_0_s0_agent_m0_writedata;                                                                  // PCIe_to_avmm_0_s0_agent:m0_writedata -> PCIe_to_avmm_0_s0_translator:uav_writedata
	wire          pcie_to_avmm_0_s0_agent_m0_write;                                                                      // PCIe_to_avmm_0_s0_agent:m0_write -> PCIe_to_avmm_0_s0_translator:uav_write
	wire    [2:0] pcie_to_avmm_0_s0_agent_m0_burstcount;                                                                 // PCIe_to_avmm_0_s0_agent:m0_burstcount -> PCIe_to_avmm_0_s0_translator:uav_burstcount
	wire          pcie_to_avmm_0_s0_agent_rf_source_valid;                                                               // PCIe_to_avmm_0_s0_agent:rf_source_valid -> PCIe_to_avmm_0_s0_agent_rsp_fifo:in_valid
	wire  [122:0] pcie_to_avmm_0_s0_agent_rf_source_data;                                                                // PCIe_to_avmm_0_s0_agent:rf_source_data -> PCIe_to_avmm_0_s0_agent_rsp_fifo:in_data
	wire          pcie_to_avmm_0_s0_agent_rf_source_ready;                                                               // PCIe_to_avmm_0_s0_agent_rsp_fifo:in_ready -> PCIe_to_avmm_0_s0_agent:rf_source_ready
	wire          pcie_to_avmm_0_s0_agent_rf_source_startofpacket;                                                       // PCIe_to_avmm_0_s0_agent:rf_source_startofpacket -> PCIe_to_avmm_0_s0_agent_rsp_fifo:in_startofpacket
	wire          pcie_to_avmm_0_s0_agent_rf_source_endofpacket;                                                         // PCIe_to_avmm_0_s0_agent:rf_source_endofpacket -> PCIe_to_avmm_0_s0_agent_rsp_fifo:in_endofpacket
	wire          pcie_to_avmm_0_s0_agent_rsp_fifo_out_valid;                                                            // PCIe_to_avmm_0_s0_agent_rsp_fifo:out_valid -> PCIe_to_avmm_0_s0_agent:rf_sink_valid
	wire  [122:0] pcie_to_avmm_0_s0_agent_rsp_fifo_out_data;                                                             // PCIe_to_avmm_0_s0_agent_rsp_fifo:out_data -> PCIe_to_avmm_0_s0_agent:rf_sink_data
	wire          pcie_to_avmm_0_s0_agent_rsp_fifo_out_ready;                                                            // PCIe_to_avmm_0_s0_agent:rf_sink_ready -> PCIe_to_avmm_0_s0_agent_rsp_fifo:out_ready
	wire          pcie_to_avmm_0_s0_agent_rsp_fifo_out_startofpacket;                                                    // PCIe_to_avmm_0_s0_agent_rsp_fifo:out_startofpacket -> PCIe_to_avmm_0_s0_agent:rf_sink_startofpacket
	wire          pcie_to_avmm_0_s0_agent_rsp_fifo_out_endofpacket;                                                      // PCIe_to_avmm_0_s0_agent_rsp_fifo:out_endofpacket -> PCIe_to_avmm_0_s0_agent:rf_sink_endofpacket
	wire          pcie_to_avmm_0_s0_agent_rdata_fifo_src_valid;                                                          // PCIe_to_avmm_0_s0_agent:rdata_fifo_src_valid -> PCIe_to_avmm_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] pcie_to_avmm_0_s0_agent_rdata_fifo_src_data;                                                           // PCIe_to_avmm_0_s0_agent:rdata_fifo_src_data -> PCIe_to_avmm_0_s0_agent_rdata_fifo:in_data
	wire          pcie_to_avmm_0_s0_agent_rdata_fifo_src_ready;                                                          // PCIe_to_avmm_0_s0_agent_rdata_fifo:in_ready -> PCIe_to_avmm_0_s0_agent:rdata_fifo_src_ready
	wire          pcie_to_avmm_0_s0_agent_rdata_fifo_out_valid;                                                          // PCIe_to_avmm_0_s0_agent_rdata_fifo:out_valid -> PCIe_to_avmm_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] pcie_to_avmm_0_s0_agent_rdata_fifo_out_data;                                                           // PCIe_to_avmm_0_s0_agent_rdata_fifo:out_data -> PCIe_to_avmm_0_s0_agent:rdata_fifo_sink_data
	wire          pcie_to_avmm_0_s0_agent_rdata_fifo_out_ready;                                                          // PCIe_to_avmm_0_s0_agent:rdata_fifo_sink_ready -> PCIe_to_avmm_0_s0_agent_rdata_fifo:out_ready
	wire   [31:0] ocmem_s1_agent_m0_readdata;                                                                            // ocmem_s1_translator:uav_readdata -> ocmem_s1_agent:m0_readdata
	wire          ocmem_s1_agent_m0_waitrequest;                                                                         // ocmem_s1_translator:uav_waitrequest -> ocmem_s1_agent:m0_waitrequest
	wire          ocmem_s1_agent_m0_debugaccess;                                                                         // ocmem_s1_agent:m0_debugaccess -> ocmem_s1_translator:uav_debugaccess
	wire   [31:0] ocmem_s1_agent_m0_address;                                                                             // ocmem_s1_agent:m0_address -> ocmem_s1_translator:uav_address
	wire    [3:0] ocmem_s1_agent_m0_byteenable;                                                                          // ocmem_s1_agent:m0_byteenable -> ocmem_s1_translator:uav_byteenable
	wire          ocmem_s1_agent_m0_read;                                                                                // ocmem_s1_agent:m0_read -> ocmem_s1_translator:uav_read
	wire          ocmem_s1_agent_m0_readdatavalid;                                                                       // ocmem_s1_translator:uav_readdatavalid -> ocmem_s1_agent:m0_readdatavalid
	wire          ocmem_s1_agent_m0_lock;                                                                                // ocmem_s1_agent:m0_lock -> ocmem_s1_translator:uav_lock
	wire   [31:0] ocmem_s1_agent_m0_writedata;                                                                           // ocmem_s1_agent:m0_writedata -> ocmem_s1_translator:uav_writedata
	wire          ocmem_s1_agent_m0_write;                                                                               // ocmem_s1_agent:m0_write -> ocmem_s1_translator:uav_write
	wire    [2:0] ocmem_s1_agent_m0_burstcount;                                                                          // ocmem_s1_agent:m0_burstcount -> ocmem_s1_translator:uav_burstcount
	wire          ocmem_s1_agent_rf_source_valid;                                                                        // ocmem_s1_agent:rf_source_valid -> ocmem_s1_agent_rsp_fifo:in_valid
	wire  [122:0] ocmem_s1_agent_rf_source_data;                                                                         // ocmem_s1_agent:rf_source_data -> ocmem_s1_agent_rsp_fifo:in_data
	wire          ocmem_s1_agent_rf_source_ready;                                                                        // ocmem_s1_agent_rsp_fifo:in_ready -> ocmem_s1_agent:rf_source_ready
	wire          ocmem_s1_agent_rf_source_startofpacket;                                                                // ocmem_s1_agent:rf_source_startofpacket -> ocmem_s1_agent_rsp_fifo:in_startofpacket
	wire          ocmem_s1_agent_rf_source_endofpacket;                                                                  // ocmem_s1_agent:rf_source_endofpacket -> ocmem_s1_agent_rsp_fifo:in_endofpacket
	wire          ocmem_s1_agent_rsp_fifo_out_valid;                                                                     // ocmem_s1_agent_rsp_fifo:out_valid -> ocmem_s1_agent:rf_sink_valid
	wire  [122:0] ocmem_s1_agent_rsp_fifo_out_data;                                                                      // ocmem_s1_agent_rsp_fifo:out_data -> ocmem_s1_agent:rf_sink_data
	wire          ocmem_s1_agent_rsp_fifo_out_ready;                                                                     // ocmem_s1_agent:rf_sink_ready -> ocmem_s1_agent_rsp_fifo:out_ready
	wire          ocmem_s1_agent_rsp_fifo_out_startofpacket;                                                             // ocmem_s1_agent_rsp_fifo:out_startofpacket -> ocmem_s1_agent:rf_sink_startofpacket
	wire          ocmem_s1_agent_rsp_fifo_out_endofpacket;                                                               // ocmem_s1_agent_rsp_fifo:out_endofpacket -> ocmem_s1_agent:rf_sink_endofpacket
	wire          ocmem_s1_agent_rdata_fifo_src_valid;                                                                   // ocmem_s1_agent:rdata_fifo_src_valid -> ocmem_s1_agent_rdata_fifo:in_valid
	wire   [33:0] ocmem_s1_agent_rdata_fifo_src_data;                                                                    // ocmem_s1_agent:rdata_fifo_src_data -> ocmem_s1_agent_rdata_fifo:in_data
	wire          ocmem_s1_agent_rdata_fifo_src_ready;                                                                   // ocmem_s1_agent_rdata_fifo:in_ready -> ocmem_s1_agent:rdata_fifo_src_ready
	wire          ocmem_s1_agent_rdata_fifo_out_valid;                                                                   // ocmem_s1_agent_rdata_fifo:out_valid -> ocmem_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] ocmem_s1_agent_rdata_fifo_out_data;                                                                    // ocmem_s1_agent_rdata_fifo:out_data -> ocmem_s1_agent:rdata_fifo_sink_data
	wire          ocmem_s1_agent_rdata_fifo_out_ready;                                                                   // ocmem_s1_agent:rdata_fifo_sink_ready -> ocmem_s1_agent_rdata_fifo:out_ready
	wire   [31:0] qsys_sys_mgr_system_mm_agent_m0_readdata;                                                              // qsys_sys_mgr_system_mm_translator:uav_readdata -> qsys_sys_mgr_system_mm_agent:m0_readdata
	wire          qsys_sys_mgr_system_mm_agent_m0_waitrequest;                                                           // qsys_sys_mgr_system_mm_translator:uav_waitrequest -> qsys_sys_mgr_system_mm_agent:m0_waitrequest
	wire          qsys_sys_mgr_system_mm_agent_m0_debugaccess;                                                           // qsys_sys_mgr_system_mm_agent:m0_debugaccess -> qsys_sys_mgr_system_mm_translator:uav_debugaccess
	wire   [31:0] qsys_sys_mgr_system_mm_agent_m0_address;                                                               // qsys_sys_mgr_system_mm_agent:m0_address -> qsys_sys_mgr_system_mm_translator:uav_address
	wire    [3:0] qsys_sys_mgr_system_mm_agent_m0_byteenable;                                                            // qsys_sys_mgr_system_mm_agent:m0_byteenable -> qsys_sys_mgr_system_mm_translator:uav_byteenable
	wire          qsys_sys_mgr_system_mm_agent_m0_read;                                                                  // qsys_sys_mgr_system_mm_agent:m0_read -> qsys_sys_mgr_system_mm_translator:uav_read
	wire          qsys_sys_mgr_system_mm_agent_m0_readdatavalid;                                                         // qsys_sys_mgr_system_mm_translator:uav_readdatavalid -> qsys_sys_mgr_system_mm_agent:m0_readdatavalid
	wire          qsys_sys_mgr_system_mm_agent_m0_lock;                                                                  // qsys_sys_mgr_system_mm_agent:m0_lock -> qsys_sys_mgr_system_mm_translator:uav_lock
	wire   [31:0] qsys_sys_mgr_system_mm_agent_m0_writedata;                                                             // qsys_sys_mgr_system_mm_agent:m0_writedata -> qsys_sys_mgr_system_mm_translator:uav_writedata
	wire          qsys_sys_mgr_system_mm_agent_m0_write;                                                                 // qsys_sys_mgr_system_mm_agent:m0_write -> qsys_sys_mgr_system_mm_translator:uav_write
	wire    [2:0] qsys_sys_mgr_system_mm_agent_m0_burstcount;                                                            // qsys_sys_mgr_system_mm_agent:m0_burstcount -> qsys_sys_mgr_system_mm_translator:uav_burstcount
	wire          qsys_sys_mgr_system_mm_agent_rf_source_valid;                                                          // qsys_sys_mgr_system_mm_agent:rf_source_valid -> qsys_sys_mgr_system_mm_agent_rsp_fifo:in_valid
	wire  [122:0] qsys_sys_mgr_system_mm_agent_rf_source_data;                                                           // qsys_sys_mgr_system_mm_agent:rf_source_data -> qsys_sys_mgr_system_mm_agent_rsp_fifo:in_data
	wire          qsys_sys_mgr_system_mm_agent_rf_source_ready;                                                          // qsys_sys_mgr_system_mm_agent_rsp_fifo:in_ready -> qsys_sys_mgr_system_mm_agent:rf_source_ready
	wire          qsys_sys_mgr_system_mm_agent_rf_source_startofpacket;                                                  // qsys_sys_mgr_system_mm_agent:rf_source_startofpacket -> qsys_sys_mgr_system_mm_agent_rsp_fifo:in_startofpacket
	wire          qsys_sys_mgr_system_mm_agent_rf_source_endofpacket;                                                    // qsys_sys_mgr_system_mm_agent:rf_source_endofpacket -> qsys_sys_mgr_system_mm_agent_rsp_fifo:in_endofpacket
	wire          qsys_sys_mgr_system_mm_agent_rsp_fifo_out_valid;                                                       // qsys_sys_mgr_system_mm_agent_rsp_fifo:out_valid -> qsys_sys_mgr_system_mm_agent:rf_sink_valid
	wire  [122:0] qsys_sys_mgr_system_mm_agent_rsp_fifo_out_data;                                                        // qsys_sys_mgr_system_mm_agent_rsp_fifo:out_data -> qsys_sys_mgr_system_mm_agent:rf_sink_data
	wire          qsys_sys_mgr_system_mm_agent_rsp_fifo_out_ready;                                                       // qsys_sys_mgr_system_mm_agent:rf_sink_ready -> qsys_sys_mgr_system_mm_agent_rsp_fifo:out_ready
	wire          qsys_sys_mgr_system_mm_agent_rsp_fifo_out_startofpacket;                                               // qsys_sys_mgr_system_mm_agent_rsp_fifo:out_startofpacket -> qsys_sys_mgr_system_mm_agent:rf_sink_startofpacket
	wire          qsys_sys_mgr_system_mm_agent_rsp_fifo_out_endofpacket;                                                 // qsys_sys_mgr_system_mm_agent_rsp_fifo:out_endofpacket -> qsys_sys_mgr_system_mm_agent:rf_sink_endofpacket
	wire          qsys_sys_mgr_system_mm_agent_rdata_fifo_src_valid;                                                     // qsys_sys_mgr_system_mm_agent:rdata_fifo_src_valid -> qsys_sys_mgr_system_mm_agent_rdata_fifo:in_valid
	wire   [33:0] qsys_sys_mgr_system_mm_agent_rdata_fifo_src_data;                                                      // qsys_sys_mgr_system_mm_agent:rdata_fifo_src_data -> qsys_sys_mgr_system_mm_agent_rdata_fifo:in_data
	wire          qsys_sys_mgr_system_mm_agent_rdata_fifo_src_ready;                                                     // qsys_sys_mgr_system_mm_agent_rdata_fifo:in_ready -> qsys_sys_mgr_system_mm_agent:rdata_fifo_src_ready
	wire          qsys_sys_mgr_system_mm_agent_rdata_fifo_out_valid;                                                     // qsys_sys_mgr_system_mm_agent_rdata_fifo:out_valid -> qsys_sys_mgr_system_mm_agent:rdata_fifo_sink_valid
	wire   [33:0] qsys_sys_mgr_system_mm_agent_rdata_fifo_out_data;                                                      // qsys_sys_mgr_system_mm_agent_rdata_fifo:out_data -> qsys_sys_mgr_system_mm_agent:rdata_fifo_sink_data
	wire          qsys_sys_mgr_system_mm_agent_rdata_fifo_out_ready;                                                     // qsys_sys_mgr_system_mm_agent:rdata_fifo_sink_ready -> qsys_sys_mgr_system_mm_agent_rdata_fifo:out_ready
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_valid;                                          // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:cp_valid -> router:sink_valid
	wire  [661:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_data;                                           // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:cp_data -> router:sink_data
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_ready;                                          // router:sink_ready -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:cp_ready
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_startofpacket;                                  // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_endofpacket;                                    // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          spi_pb_0_m0_agent_cp_valid;                                                                            // spi_pb_0_m0_agent:cp_valid -> router_001:sink_valid
	wire  [121:0] spi_pb_0_m0_agent_cp_data;                                                                             // spi_pb_0_m0_agent:cp_data -> router_001:sink_data
	wire          spi_pb_0_m0_agent_cp_ready;                                                                            // router_001:sink_ready -> spi_pb_0_m0_agent:cp_ready
	wire          spi_pb_0_m0_agent_cp_startofpacket;                                                                    // spi_pb_0_m0_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          spi_pb_0_m0_agent_cp_endofpacket;                                                                      // spi_pb_0_m0_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          qsys_top_master_0_master_agent_cp_valid;                                                               // qsys_top_master_0_master_agent:cp_valid -> router_002:sink_valid
	wire  [121:0] qsys_top_master_0_master_agent_cp_data;                                                                // qsys_top_master_0_master_agent:cp_data -> router_002:sink_data
	wire          qsys_top_master_0_master_agent_cp_ready;                                                               // router_002:sink_ready -> qsys_top_master_0_master_agent:cp_ready
	wire          qsys_top_master_0_master_agent_cp_startofpacket;                                                       // qsys_top_master_0_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          qsys_top_master_0_master_agent_cp_endofpacket;                                                         // qsys_top_master_0_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_valid;                                                 // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rp_valid -> router_003:sink_valid
	wire  [121:0] qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_data;                                                  // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rp_data -> router_003:sink_data
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_ready;                                                 // router_003:sink_ready -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:rp_ready
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket;                                         // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket;                                           // qsys_top_mm_clock_crossing_bridge_0_s0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                  // router_003:src_valid -> rsp_demux:sink_valid
	wire  [121:0] router_003_src_data;                                                                                   // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                                                  // rsp_demux:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                                                // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                                          // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                            // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          arbiter_bridge_s0_agent_rp_valid;                                                                      // arbiter_bridge_s0_agent:rp_valid -> router_004:sink_valid
	wire  [121:0] arbiter_bridge_s0_agent_rp_data;                                                                       // arbiter_bridge_s0_agent:rp_data -> router_004:sink_data
	wire          arbiter_bridge_s0_agent_rp_ready;                                                                      // router_004:sink_ready -> arbiter_bridge_s0_agent:rp_ready
	wire          arbiter_bridge_s0_agent_rp_startofpacket;                                                              // arbiter_bridge_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          arbiter_bridge_s0_agent_rp_endofpacket;                                                                // arbiter_bridge_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                  // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [121:0] router_004_src_data;                                                                                   // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                                  // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                                                // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                                          // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                            // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pcie_to_avmm_0_s0_agent_rp_valid;                                                                      // PCIe_to_avmm_0_s0_agent:rp_valid -> router_005:sink_valid
	wire  [121:0] pcie_to_avmm_0_s0_agent_rp_data;                                                                       // PCIe_to_avmm_0_s0_agent:rp_data -> router_005:sink_data
	wire          pcie_to_avmm_0_s0_agent_rp_ready;                                                                      // router_005:sink_ready -> PCIe_to_avmm_0_s0_agent:rp_ready
	wire          pcie_to_avmm_0_s0_agent_rp_startofpacket;                                                              // PCIe_to_avmm_0_s0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          pcie_to_avmm_0_s0_agent_rp_endofpacket;                                                                // PCIe_to_avmm_0_s0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                  // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [121:0] router_005_src_data;                                                                                   // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                                  // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                                                // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                                          // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                            // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          ocmem_s1_agent_rp_valid;                                                                               // ocmem_s1_agent:rp_valid -> router_006:sink_valid
	wire  [121:0] ocmem_s1_agent_rp_data;                                                                                // ocmem_s1_agent:rp_data -> router_006:sink_data
	wire          ocmem_s1_agent_rp_ready;                                                                               // router_006:sink_ready -> ocmem_s1_agent:rp_ready
	wire          ocmem_s1_agent_rp_startofpacket;                                                                       // ocmem_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          ocmem_s1_agent_rp_endofpacket;                                                                         // ocmem_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                  // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [121:0] router_006_src_data;                                                                                   // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                                  // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                                                                // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                                          // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                            // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          qsys_sys_mgr_system_mm_agent_rp_valid;                                                                 // qsys_sys_mgr_system_mm_agent:rp_valid -> router_007:sink_valid
	wire  [121:0] qsys_sys_mgr_system_mm_agent_rp_data;                                                                  // qsys_sys_mgr_system_mm_agent:rp_data -> router_007:sink_data
	wire          qsys_sys_mgr_system_mm_agent_rp_ready;                                                                 // router_007:sink_ready -> qsys_sys_mgr_system_mm_agent:rp_ready
	wire          qsys_sys_mgr_system_mm_agent_rp_startofpacket;                                                         // qsys_sys_mgr_system_mm_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          qsys_sys_mgr_system_mm_agent_rp_endofpacket;                                                           // qsys_sys_mgr_system_mm_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                  // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [121:0] router_007_src_data;                                                                                   // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                                                  // rsp_demux_004:sink_ready -> router_007:src_ready
	wire    [4:0] router_007_src_channel;                                                                                // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                                          // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                            // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_src_valid;                                                                                      // router:src_valid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_sink_valid
	wire  [661:0] router_src_data;                                                                                       // router:src_data -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                                      // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                                                    // router:src_channel -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                              // router:src_startofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                                // router:src_endofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_sink_endofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_valid;                                   // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_src_valid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:rp_valid
	wire  [661:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_data;                                    // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_src_data -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:rp_data
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_ready;                                   // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:rp_ready -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_src_ready
	wire    [4:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_channel;                                 // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_src_channel -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:rp_channel
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_startofpacket;                           // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_src_startofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:rp_startofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_endofpacket;                             // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_src_endofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                                  // router_001:src_valid -> spi_pb_0_m0_limiter:cmd_sink_valid
	wire  [121:0] router_001_src_data;                                                                                   // router_001:src_data -> spi_pb_0_m0_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                                  // spi_pb_0_m0_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                                                // router_001:src_channel -> spi_pb_0_m0_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                          // router_001:src_startofpacket -> spi_pb_0_m0_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                            // router_001:src_endofpacket -> spi_pb_0_m0_limiter:cmd_sink_endofpacket
	wire  [121:0] spi_pb_0_m0_limiter_cmd_src_data;                                                                      // spi_pb_0_m0_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          spi_pb_0_m0_limiter_cmd_src_ready;                                                                     // cmd_demux_001:sink_ready -> spi_pb_0_m0_limiter:cmd_src_ready
	wire    [4:0] spi_pb_0_m0_limiter_cmd_src_channel;                                                                   // spi_pb_0_m0_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          spi_pb_0_m0_limiter_cmd_src_startofpacket;                                                             // spi_pb_0_m0_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          spi_pb_0_m0_limiter_cmd_src_endofpacket;                                                               // spi_pb_0_m0_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                                 // rsp_mux_001:src_valid -> spi_pb_0_m0_limiter:rsp_sink_valid
	wire  [121:0] rsp_mux_001_src_data;                                                                                  // rsp_mux_001:src_data -> spi_pb_0_m0_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                                 // spi_pb_0_m0_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                                                               // rsp_mux_001:src_channel -> spi_pb_0_m0_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                         // rsp_mux_001:src_startofpacket -> spi_pb_0_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                           // rsp_mux_001:src_endofpacket -> spi_pb_0_m0_limiter:rsp_sink_endofpacket
	wire          spi_pb_0_m0_limiter_rsp_src_valid;                                                                     // spi_pb_0_m0_limiter:rsp_src_valid -> spi_pb_0_m0_agent:rp_valid
	wire  [121:0] spi_pb_0_m0_limiter_rsp_src_data;                                                                      // spi_pb_0_m0_limiter:rsp_src_data -> spi_pb_0_m0_agent:rp_data
	wire          spi_pb_0_m0_limiter_rsp_src_ready;                                                                     // spi_pb_0_m0_agent:rp_ready -> spi_pb_0_m0_limiter:rsp_src_ready
	wire    [4:0] spi_pb_0_m0_limiter_rsp_src_channel;                                                                   // spi_pb_0_m0_limiter:rsp_src_channel -> spi_pb_0_m0_agent:rp_channel
	wire          spi_pb_0_m0_limiter_rsp_src_startofpacket;                                                             // spi_pb_0_m0_limiter:rsp_src_startofpacket -> spi_pb_0_m0_agent:rp_startofpacket
	wire          spi_pb_0_m0_limiter_rsp_src_endofpacket;                                                               // spi_pb_0_m0_limiter:rsp_src_endofpacket -> spi_pb_0_m0_agent:rp_endofpacket
	wire          router_002_src_valid;                                                                                  // router_002:src_valid -> qsys_top_master_0_master_limiter:cmd_sink_valid
	wire  [121:0] router_002_src_data;                                                                                   // router_002:src_data -> qsys_top_master_0_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                                  // qsys_top_master_0_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                                                // router_002:src_channel -> qsys_top_master_0_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                          // router_002:src_startofpacket -> qsys_top_master_0_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                            // router_002:src_endofpacket -> qsys_top_master_0_master_limiter:cmd_sink_endofpacket
	wire  [121:0] qsys_top_master_0_master_limiter_cmd_src_data;                                                         // qsys_top_master_0_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          qsys_top_master_0_master_limiter_cmd_src_ready;                                                        // cmd_demux_002:sink_ready -> qsys_top_master_0_master_limiter:cmd_src_ready
	wire    [4:0] qsys_top_master_0_master_limiter_cmd_src_channel;                                                      // qsys_top_master_0_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          qsys_top_master_0_master_limiter_cmd_src_startofpacket;                                                // qsys_top_master_0_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          qsys_top_master_0_master_limiter_cmd_src_endofpacket;                                                  // qsys_top_master_0_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                                 // rsp_mux_002:src_valid -> qsys_top_master_0_master_limiter:rsp_sink_valid
	wire  [121:0] rsp_mux_002_src_data;                                                                                  // rsp_mux_002:src_data -> qsys_top_master_0_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                                 // qsys_top_master_0_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                                                               // rsp_mux_002:src_channel -> qsys_top_master_0_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                                         // rsp_mux_002:src_startofpacket -> qsys_top_master_0_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                           // rsp_mux_002:src_endofpacket -> qsys_top_master_0_master_limiter:rsp_sink_endofpacket
	wire          qsys_top_master_0_master_limiter_rsp_src_valid;                                                        // qsys_top_master_0_master_limiter:rsp_src_valid -> qsys_top_master_0_master_agent:rp_valid
	wire  [121:0] qsys_top_master_0_master_limiter_rsp_src_data;                                                         // qsys_top_master_0_master_limiter:rsp_src_data -> qsys_top_master_0_master_agent:rp_data
	wire          qsys_top_master_0_master_limiter_rsp_src_ready;                                                        // qsys_top_master_0_master_agent:rp_ready -> qsys_top_master_0_master_limiter:rsp_src_ready
	wire    [4:0] qsys_top_master_0_master_limiter_rsp_src_channel;                                                      // qsys_top_master_0_master_limiter:rsp_src_channel -> qsys_top_master_0_master_agent:rp_channel
	wire          qsys_top_master_0_master_limiter_rsp_src_startofpacket;                                                // qsys_top_master_0_master_limiter:rsp_src_startofpacket -> qsys_top_master_0_master_agent:rp_startofpacket
	wire          qsys_top_master_0_master_limiter_rsp_src_endofpacket;                                                  // qsys_top_master_0_master_limiter:rsp_src_endofpacket -> qsys_top_master_0_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                     // cmd_mux:src_valid -> qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_src_data;                                                                                      // cmd_mux:src_data -> qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                     // qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                                                   // cmd_mux:src_channel -> qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                             // cmd_mux:src_startofpacket -> qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                               // cmd_mux:src_endofpacket -> qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:sink0_endofpacket
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid;                                    // qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:source0_valid -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:cp_valid
	wire  [121:0] qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data;                                     // qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:source0_data -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:cp_data
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready;                                    // qsys_top_mm_clock_crossing_bridge_0_s0_agent:cp_ready -> qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:source0_ready
	wire    [4:0] qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel;                                  // qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:source0_channel -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:cp_channel
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket;                            // qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:source0_startofpacket -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:cp_startofpacket
	wire          qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket;                              // qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter:source0_endofpacket -> qsys_top_mm_clock_crossing_bridge_0_s0_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                 // cmd_mux_001:src_valid -> arbiter_bridge_s0_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_001_src_data;                                                                                  // cmd_mux_001:src_data -> arbiter_bridge_s0_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                                 // arbiter_bridge_s0_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                                               // cmd_mux_001:src_channel -> arbiter_bridge_s0_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                         // cmd_mux_001:src_startofpacket -> arbiter_bridge_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                           // cmd_mux_001:src_endofpacket -> arbiter_bridge_s0_burst_adapter:sink0_endofpacket
	wire          arbiter_bridge_s0_burst_adapter_source0_valid;                                                         // arbiter_bridge_s0_burst_adapter:source0_valid -> arbiter_bridge_s0_agent:cp_valid
	wire  [121:0] arbiter_bridge_s0_burst_adapter_source0_data;                                                          // arbiter_bridge_s0_burst_adapter:source0_data -> arbiter_bridge_s0_agent:cp_data
	wire          arbiter_bridge_s0_burst_adapter_source0_ready;                                                         // arbiter_bridge_s0_agent:cp_ready -> arbiter_bridge_s0_burst_adapter:source0_ready
	wire    [4:0] arbiter_bridge_s0_burst_adapter_source0_channel;                                                       // arbiter_bridge_s0_burst_adapter:source0_channel -> arbiter_bridge_s0_agent:cp_channel
	wire          arbiter_bridge_s0_burst_adapter_source0_startofpacket;                                                 // arbiter_bridge_s0_burst_adapter:source0_startofpacket -> arbiter_bridge_s0_agent:cp_startofpacket
	wire          arbiter_bridge_s0_burst_adapter_source0_endofpacket;                                                   // arbiter_bridge_s0_burst_adapter:source0_endofpacket -> arbiter_bridge_s0_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                 // cmd_mux_002:src_valid -> PCIe_to_avmm_0_s0_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_002_src_data;                                                                                  // cmd_mux_002:src_data -> PCIe_to_avmm_0_s0_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                                 // PCIe_to_avmm_0_s0_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                                               // cmd_mux_002:src_channel -> PCIe_to_avmm_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                                         // cmd_mux_002:src_startofpacket -> PCIe_to_avmm_0_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                           // cmd_mux_002:src_endofpacket -> PCIe_to_avmm_0_s0_burst_adapter:sink0_endofpacket
	wire          pcie_to_avmm_0_s0_burst_adapter_source0_valid;                                                         // PCIe_to_avmm_0_s0_burst_adapter:source0_valid -> PCIe_to_avmm_0_s0_agent:cp_valid
	wire  [121:0] pcie_to_avmm_0_s0_burst_adapter_source0_data;                                                          // PCIe_to_avmm_0_s0_burst_adapter:source0_data -> PCIe_to_avmm_0_s0_agent:cp_data
	wire          pcie_to_avmm_0_s0_burst_adapter_source0_ready;                                                         // PCIe_to_avmm_0_s0_agent:cp_ready -> PCIe_to_avmm_0_s0_burst_adapter:source0_ready
	wire    [4:0] pcie_to_avmm_0_s0_burst_adapter_source0_channel;                                                       // PCIe_to_avmm_0_s0_burst_adapter:source0_channel -> PCIe_to_avmm_0_s0_agent:cp_channel
	wire          pcie_to_avmm_0_s0_burst_adapter_source0_startofpacket;                                                 // PCIe_to_avmm_0_s0_burst_adapter:source0_startofpacket -> PCIe_to_avmm_0_s0_agent:cp_startofpacket
	wire          pcie_to_avmm_0_s0_burst_adapter_source0_endofpacket;                                                   // PCIe_to_avmm_0_s0_burst_adapter:source0_endofpacket -> PCIe_to_avmm_0_s0_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                 // cmd_mux_003:src_valid -> ocmem_s1_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_003_src_data;                                                                                  // cmd_mux_003:src_data -> ocmem_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                                 // ocmem_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                                               // cmd_mux_003:src_channel -> ocmem_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                                         // cmd_mux_003:src_startofpacket -> ocmem_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                           // cmd_mux_003:src_endofpacket -> ocmem_s1_burst_adapter:sink0_endofpacket
	wire          ocmem_s1_burst_adapter_source0_valid;                                                                  // ocmem_s1_burst_adapter:source0_valid -> ocmem_s1_agent:cp_valid
	wire  [121:0] ocmem_s1_burst_adapter_source0_data;                                                                   // ocmem_s1_burst_adapter:source0_data -> ocmem_s1_agent:cp_data
	wire          ocmem_s1_burst_adapter_source0_ready;                                                                  // ocmem_s1_agent:cp_ready -> ocmem_s1_burst_adapter:source0_ready
	wire    [4:0] ocmem_s1_burst_adapter_source0_channel;                                                                // ocmem_s1_burst_adapter:source0_channel -> ocmem_s1_agent:cp_channel
	wire          ocmem_s1_burst_adapter_source0_startofpacket;                                                          // ocmem_s1_burst_adapter:source0_startofpacket -> ocmem_s1_agent:cp_startofpacket
	wire          ocmem_s1_burst_adapter_source0_endofpacket;                                                            // ocmem_s1_burst_adapter:source0_endofpacket -> ocmem_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                 // cmd_mux_004:src_valid -> qsys_sys_mgr_system_mm_burst_adapter:sink0_valid
	wire  [121:0] cmd_mux_004_src_data;                                                                                  // cmd_mux_004:src_data -> qsys_sys_mgr_system_mm_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                                 // qsys_sys_mgr_system_mm_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                                               // cmd_mux_004:src_channel -> qsys_sys_mgr_system_mm_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                                         // cmd_mux_004:src_startofpacket -> qsys_sys_mgr_system_mm_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                           // cmd_mux_004:src_endofpacket -> qsys_sys_mgr_system_mm_burst_adapter:sink0_endofpacket
	wire          qsys_sys_mgr_system_mm_burst_adapter_source0_valid;                                                    // qsys_sys_mgr_system_mm_burst_adapter:source0_valid -> qsys_sys_mgr_system_mm_agent:cp_valid
	wire  [121:0] qsys_sys_mgr_system_mm_burst_adapter_source0_data;                                                     // qsys_sys_mgr_system_mm_burst_adapter:source0_data -> qsys_sys_mgr_system_mm_agent:cp_data
	wire          qsys_sys_mgr_system_mm_burst_adapter_source0_ready;                                                    // qsys_sys_mgr_system_mm_agent:cp_ready -> qsys_sys_mgr_system_mm_burst_adapter:source0_ready
	wire    [4:0] qsys_sys_mgr_system_mm_burst_adapter_source0_channel;                                                  // qsys_sys_mgr_system_mm_burst_adapter:source0_channel -> qsys_sys_mgr_system_mm_agent:cp_channel
	wire          qsys_sys_mgr_system_mm_burst_adapter_source0_startofpacket;                                            // qsys_sys_mgr_system_mm_burst_adapter:source0_startofpacket -> qsys_sys_mgr_system_mm_agent:cp_startofpacket
	wire          qsys_sys_mgr_system_mm_burst_adapter_source0_endofpacket;                                              // qsys_sys_mgr_system_mm_burst_adapter:source0_endofpacket -> qsys_sys_mgr_system_mm_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                                  // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [121:0] cmd_demux_src0_data;                                                                                   // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                                  // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                                                // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                          // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                            // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                                  // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [121:0] cmd_demux_src1_data;                                                                                   // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                                  // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [4:0] cmd_demux_src1_channel;                                                                                // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                          // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                            // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                                  // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [121:0] cmd_demux_src2_data;                                                                                   // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                                  // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [4:0] cmd_demux_src2_channel;                                                                                // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                                          // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                            // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                                  // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [121:0] cmd_demux_src3_data;                                                                                   // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                                  // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [4:0] cmd_demux_src3_channel;                                                                                // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                                          // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                            // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                                  // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [121:0] cmd_demux_src4_data;                                                                                   // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                                  // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire    [4:0] cmd_demux_src4_channel;                                                                                // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                                          // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                            // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                                  // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [121:0] rsp_demux_src0_data;                                                                                   // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                                  // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                                                // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                          // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                            // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                              // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [121:0] rsp_demux_001_src0_data;                                                                               // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                              // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                                                            // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                      // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                        // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                              // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [121:0] rsp_demux_002_src0_data;                                                                               // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                              // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                                                            // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                      // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                        // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                              // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [121:0] rsp_demux_003_src0_data;                                                                               // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                              // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                                                            // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                      // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                        // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                              // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [121:0] rsp_demux_004_src0_data;                                                                               // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                              // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                                                            // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                      // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                        // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire    [0:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_valid;                                   // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_src_valid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:in_valid
	wire  [661:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_data;                                    // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_src_data -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:in_data
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_ready;                                   // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:in_ready -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_src_ready
	wire    [4:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_channel;                                 // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_src_channel -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:in_channel
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_startofpacket;                           // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_src_startofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:in_startofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_endofpacket;                             // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:cmd_src_endofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:in_endofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_valid;                             // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [121:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_data;                              // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_ready;                             // cmd_demux:sink_ready -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:out_ready
	wire    [4:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_channel;                           // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_startofpacket;                     // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_endofpacket;                       // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                     // rsp_mux:src_valid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:in_valid
	wire  [121:0] rsp_mux_src_data;                                                                                      // rsp_mux:src_data -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                                                     // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                                                   // rsp_mux:src_channel -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                                                             // rsp_mux:src_startofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                               // rsp_mux:src_endofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:in_endofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_valid;                             // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:out_valid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_sink_valid
	wire  [661:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_data;                              // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:out_data -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_sink_data
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_ready;                             // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_sink_ready -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:out_ready
	wire    [4:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_channel;                           // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:out_channel -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_sink_channel
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_startofpacket;                     // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:out_startofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_sink_startofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_endofpacket;                       // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter:out_endofpacket -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter:rsp_sink_endofpacket
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_debugaccess;            // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_debugaccess -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_debugaccess
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_read;                   // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_read -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_read
	wire   [31:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_address;                // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_address -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_address
	wire   [63:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_byteenable;             // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_byteenable -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_byteenable
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_readdatavalid;          // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_readdatavalid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_readdatavalid
	wire  [511:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_readdata;               // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_readdata -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_readdata
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_waitrequest;            // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_waitrequest -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_waitrequest
	wire    [1:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_response;               // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_response -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_response
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_lock;                   // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_lock -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_lock
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_write;                  // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_write -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_write
	wire  [511:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_writedata;              // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_writedata -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_writedata
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_writeresponsevalid;     // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_writeresponsevalid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_writeresponsevalid
	wire    [9:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_burstcount;             // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:m0_burstcount -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent:av_burstcount
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_debugaccess;        // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_debugaccess -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_debugaccess
	wire   [31:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_address;            // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_address -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_address
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_read;               // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_read -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_read
	wire   [63:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_byteenable;         // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_byteenable -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_byteenable
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_readdatavalid;      // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_readdatavalid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_readdatavalid
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_waitrequest;        // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_waitrequest -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_waitrequest
	wire  [511:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_readdata;           // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_readdata -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_readdata
	wire    [1:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_response;           // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_response -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_response
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_lock;               // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_lock -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_lock
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_write;              // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_write -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_write
	wire  [511:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_writedata;          // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_writedata -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_writedata
	wire          qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_writeresponsevalid; // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_writeresponsevalid -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_writeresponsevalid
	wire    [9:0] qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_burstcount;         // qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator:uav_burstcount -> qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter:s0_burstcount
	wire          cmd_demux_001_src0_valid;                                                                              // cmd_demux_001:src0_valid -> crosser:in_valid
	wire  [121:0] cmd_demux_001_src0_data;                                                                               // cmd_demux_001:src0_data -> crosser:in_data
	wire          cmd_demux_001_src0_ready;                                                                              // crosser:in_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                                                            // cmd_demux_001:src0_channel -> crosser:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                      // cmd_demux_001:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                        // cmd_demux_001:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                                     // crosser:out_valid -> cmd_mux:sink1_valid
	wire  [121:0] crosser_out_data;                                                                                      // crosser:out_data -> cmd_mux:sink1_data
	wire          crosser_out_ready;                                                                                     // cmd_mux:sink1_ready -> crosser:out_ready
	wire    [4:0] crosser_out_channel;                                                                                   // crosser:out_channel -> cmd_mux:sink1_channel
	wire          crosser_out_startofpacket;                                                                             // crosser:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_out_endofpacket;                                                                               // crosser:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                              // cmd_demux_001:src1_valid -> crosser_001:in_valid
	wire  [121:0] cmd_demux_001_src1_data;                                                                               // cmd_demux_001:src1_data -> crosser_001:in_data
	wire          cmd_demux_001_src1_ready;                                                                              // crosser_001:in_ready -> cmd_demux_001:src1_ready
	wire    [4:0] cmd_demux_001_src1_channel;                                                                            // cmd_demux_001:src1_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                      // cmd_demux_001:src1_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                        // cmd_demux_001:src1_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                                 // crosser_001:out_valid -> cmd_mux_001:sink1_valid
	wire  [121:0] crosser_001_out_data;                                                                                  // crosser_001:out_data -> cmd_mux_001:sink1_data
	wire          crosser_001_out_ready;                                                                                 // cmd_mux_001:sink1_ready -> crosser_001:out_ready
	wire    [4:0] crosser_001_out_channel;                                                                               // crosser_001:out_channel -> cmd_mux_001:sink1_channel
	wire          crosser_001_out_startofpacket;                                                                         // crosser_001:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                                           // crosser_001:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                              // cmd_demux_001:src2_valid -> crosser_002:in_valid
	wire  [121:0] cmd_demux_001_src2_data;                                                                               // cmd_demux_001:src2_data -> crosser_002:in_data
	wire          cmd_demux_001_src2_ready;                                                                              // crosser_002:in_ready -> cmd_demux_001:src2_ready
	wire    [4:0] cmd_demux_001_src2_channel;                                                                            // cmd_demux_001:src2_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                                                      // cmd_demux_001:src2_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                        // cmd_demux_001:src2_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                                 // crosser_002:out_valid -> cmd_mux_003:sink1_valid
	wire  [121:0] crosser_002_out_data;                                                                                  // crosser_002:out_data -> cmd_mux_003:sink1_data
	wire          crosser_002_out_ready;                                                                                 // cmd_mux_003:sink1_ready -> crosser_002:out_ready
	wire    [4:0] crosser_002_out_channel;                                                                               // crosser_002:out_channel -> cmd_mux_003:sink1_channel
	wire          crosser_002_out_startofpacket;                                                                         // crosser_002:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          crosser_002_out_endofpacket;                                                                           // crosser_002:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                              // cmd_demux_001:src3_valid -> crosser_003:in_valid
	wire  [121:0] cmd_demux_001_src3_data;                                                                               // cmd_demux_001:src3_data -> crosser_003:in_data
	wire          cmd_demux_001_src3_ready;                                                                              // crosser_003:in_ready -> cmd_demux_001:src3_ready
	wire    [4:0] cmd_demux_001_src3_channel;                                                                            // cmd_demux_001:src3_channel -> crosser_003:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                                                      // cmd_demux_001:src3_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                        // cmd_demux_001:src3_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                                 // crosser_003:out_valid -> cmd_mux_004:sink1_valid
	wire  [121:0] crosser_003_out_data;                                                                                  // crosser_003:out_data -> cmd_mux_004:sink1_data
	wire          crosser_003_out_ready;                                                                                 // cmd_mux_004:sink1_ready -> crosser_003:out_ready
	wire    [4:0] crosser_003_out_channel;                                                                               // crosser_003:out_channel -> cmd_mux_004:sink1_channel
	wire          crosser_003_out_startofpacket;                                                                         // crosser_003:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          crosser_003_out_endofpacket;                                                                           // crosser_003:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                              // cmd_demux_002:src0_valid -> crosser_004:in_valid
	wire  [121:0] cmd_demux_002_src0_data;                                                                               // cmd_demux_002:src0_data -> crosser_004:in_data
	wire          cmd_demux_002_src0_ready;                                                                              // crosser_004:in_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                                                            // cmd_demux_002:src0_channel -> crosser_004:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                      // cmd_demux_002:src0_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                        // cmd_demux_002:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                                 // crosser_004:out_valid -> cmd_mux:sink2_valid
	wire  [121:0] crosser_004_out_data;                                                                                  // crosser_004:out_data -> cmd_mux:sink2_data
	wire          crosser_004_out_ready;                                                                                 // cmd_mux:sink2_ready -> crosser_004:out_ready
	wire    [4:0] crosser_004_out_channel;                                                                               // crosser_004:out_channel -> cmd_mux:sink2_channel
	wire          crosser_004_out_startofpacket;                                                                         // crosser_004:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_004_out_endofpacket;                                                                           // crosser_004:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                              // cmd_demux_002:src1_valid -> crosser_005:in_valid
	wire  [121:0] cmd_demux_002_src1_data;                                                                               // cmd_demux_002:src1_data -> crosser_005:in_data
	wire          cmd_demux_002_src1_ready;                                                                              // crosser_005:in_ready -> cmd_demux_002:src1_ready
	wire    [4:0] cmd_demux_002_src1_channel;                                                                            // cmd_demux_002:src1_channel -> crosser_005:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                                                      // cmd_demux_002:src1_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                        // cmd_demux_002:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                                 // crosser_005:out_valid -> cmd_mux_004:sink2_valid
	wire  [121:0] crosser_005_out_data;                                                                                  // crosser_005:out_data -> cmd_mux_004:sink2_data
	wire          crosser_005_out_ready;                                                                                 // cmd_mux_004:sink2_ready -> crosser_005:out_ready
	wire    [4:0] crosser_005_out_channel;                                                                               // crosser_005:out_channel -> cmd_mux_004:sink2_channel
	wire          crosser_005_out_startofpacket;                                                                         // crosser_005:out_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          crosser_005_out_endofpacket;                                                                           // crosser_005:out_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          rsp_demux_src1_valid;                                                                                  // rsp_demux:src1_valid -> crosser_006:in_valid
	wire  [121:0] rsp_demux_src1_data;                                                                                   // rsp_demux:src1_data -> crosser_006:in_data
	wire          rsp_demux_src1_ready;                                                                                  // crosser_006:in_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                                                                // rsp_demux:src1_channel -> crosser_006:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                          // rsp_demux:src1_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                            // rsp_demux:src1_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                                 // crosser_006:out_valid -> rsp_mux_001:sink0_valid
	wire  [121:0] crosser_006_out_data;                                                                                  // crosser_006:out_data -> rsp_mux_001:sink0_data
	wire          crosser_006_out_ready;                                                                                 // rsp_mux_001:sink0_ready -> crosser_006:out_ready
	wire    [4:0] crosser_006_out_channel;                                                                               // crosser_006:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_006_out_startofpacket;                                                                         // crosser_006:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                                           // crosser_006:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                                  // rsp_demux:src2_valid -> crosser_007:in_valid
	wire  [121:0] rsp_demux_src2_data;                                                                                   // rsp_demux:src2_data -> crosser_007:in_data
	wire          rsp_demux_src2_ready;                                                                                  // crosser_007:in_ready -> rsp_demux:src2_ready
	wire    [4:0] rsp_demux_src2_channel;                                                                                // rsp_demux:src2_channel -> crosser_007:in_channel
	wire          rsp_demux_src2_startofpacket;                                                                          // rsp_demux:src2_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                            // rsp_demux:src2_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                                 // crosser_007:out_valid -> rsp_mux_002:sink0_valid
	wire  [121:0] crosser_007_out_data;                                                                                  // crosser_007:out_data -> rsp_mux_002:sink0_data
	wire          crosser_007_out_ready;                                                                                 // rsp_mux_002:sink0_ready -> crosser_007:out_ready
	wire    [4:0] crosser_007_out_channel;                                                                               // crosser_007:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_007_out_startofpacket;                                                                         // crosser_007:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                                           // crosser_007:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                              // rsp_demux_001:src1_valid -> crosser_008:in_valid
	wire  [121:0] rsp_demux_001_src1_data;                                                                               // rsp_demux_001:src1_data -> crosser_008:in_data
	wire          rsp_demux_001_src1_ready;                                                                              // crosser_008:in_ready -> rsp_demux_001:src1_ready
	wire    [4:0] rsp_demux_001_src1_channel;                                                                            // rsp_demux_001:src1_channel -> crosser_008:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                      // rsp_demux_001:src1_startofpacket -> crosser_008:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                        // rsp_demux_001:src1_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                                                 // crosser_008:out_valid -> rsp_mux_001:sink1_valid
	wire  [121:0] crosser_008_out_data;                                                                                  // crosser_008:out_data -> rsp_mux_001:sink1_data
	wire          crosser_008_out_ready;                                                                                 // rsp_mux_001:sink1_ready -> crosser_008:out_ready
	wire    [4:0] crosser_008_out_channel;                                                                               // crosser_008:out_channel -> rsp_mux_001:sink1_channel
	wire          crosser_008_out_startofpacket;                                                                         // crosser_008:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                                                           // crosser_008:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                              // rsp_demux_003:src1_valid -> crosser_009:in_valid
	wire  [121:0] rsp_demux_003_src1_data;                                                                               // rsp_demux_003:src1_data -> crosser_009:in_data
	wire          rsp_demux_003_src1_ready;                                                                              // crosser_009:in_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                                                            // rsp_demux_003:src1_channel -> crosser_009:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                                                      // rsp_demux_003:src1_startofpacket -> crosser_009:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                        // rsp_demux_003:src1_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                                                 // crosser_009:out_valid -> rsp_mux_001:sink2_valid
	wire  [121:0] crosser_009_out_data;                                                                                  // crosser_009:out_data -> rsp_mux_001:sink2_data
	wire          crosser_009_out_ready;                                                                                 // rsp_mux_001:sink2_ready -> crosser_009:out_ready
	wire    [4:0] crosser_009_out_channel;                                                                               // crosser_009:out_channel -> rsp_mux_001:sink2_channel
	wire          crosser_009_out_startofpacket;                                                                         // crosser_009:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          crosser_009_out_endofpacket;                                                                           // crosser_009:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                              // rsp_demux_004:src1_valid -> crosser_010:in_valid
	wire  [121:0] rsp_demux_004_src1_data;                                                                               // rsp_demux_004:src1_data -> crosser_010:in_data
	wire          rsp_demux_004_src1_ready;                                                                              // crosser_010:in_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                                                            // rsp_demux_004:src1_channel -> crosser_010:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                                                      // rsp_demux_004:src1_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                                        // rsp_demux_004:src1_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                                                 // crosser_010:out_valid -> rsp_mux_001:sink3_valid
	wire  [121:0] crosser_010_out_data;                                                                                  // crosser_010:out_data -> rsp_mux_001:sink3_data
	wire          crosser_010_out_ready;                                                                                 // rsp_mux_001:sink3_ready -> crosser_010:out_ready
	wire    [4:0] crosser_010_out_channel;                                                                               // crosser_010:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_010_out_startofpacket;                                                                         // crosser_010:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_010_out_endofpacket;                                                                           // crosser_010:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                              // rsp_demux_004:src2_valid -> crosser_011:in_valid
	wire  [121:0] rsp_demux_004_src2_data;                                                                               // rsp_demux_004:src2_data -> crosser_011:in_data
	wire          rsp_demux_004_src2_ready;                                                                              // crosser_011:in_ready -> rsp_demux_004:src2_ready
	wire    [4:0] rsp_demux_004_src2_channel;                                                                            // rsp_demux_004:src2_channel -> crosser_011:in_channel
	wire          rsp_demux_004_src2_startofpacket;                                                                      // rsp_demux_004:src2_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                                        // rsp_demux_004:src2_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                                                 // crosser_011:out_valid -> rsp_mux_002:sink1_valid
	wire  [121:0] crosser_011_out_data;                                                                                  // crosser_011:out_data -> rsp_mux_002:sink1_data
	wire          crosser_011_out_ready;                                                                                 // rsp_mux_002:sink1_ready -> crosser_011:out_ready
	wire    [4:0] crosser_011_out_channel;                                                                               // crosser_011:out_channel -> rsp_mux_002:sink1_channel
	wire          crosser_011_out_startofpacket;                                                                         // crosser_011:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          crosser_011_out_endofpacket;                                                                           // crosser_011:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire    [4:0] spi_pb_0_m0_limiter_cmd_valid_data;                                                                    // spi_pb_0_m0_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [4:0] qsys_top_master_0_master_limiter_cmd_valid_data;                                                       // qsys_top_master_0_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid

	qsys_top_altera_merlin_master_translator_191_ppvxbny #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (512),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (64),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (1),
		.USE_WRITERESPONSE           (1),
		.AV_SYMBOLS_PER_WORD         (64),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (8)
	) qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                                 //   input,    width = 1,                       clk.clk
		.reset                  (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset),            //   input,    width = 1,                     reset.reset
		.uav_address            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_address),            //  output,   width = 32, avalon_universal_master_0.address
		.uav_burstcount         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_burstcount),         //  output,   width = 10,                          .burstcount
		.uav_read               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_read),               //  output,    width = 1,                          .read
		.uav_write              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_write),              //  output,    width = 1,                          .write
		.uav_waitrequest        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_waitrequest),        //   input,    width = 1,                          .waitrequest
		.uav_readdatavalid      (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_readdatavalid),      //   input,    width = 1,                          .readdatavalid
		.uav_byteenable         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_byteenable),         //  output,   width = 64,                          .byteenable
		.uav_readdata           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_readdata),           //   input,  width = 512,                          .readdata
		.uav_writedata          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_writedata),          //  output,  width = 512,                          .writedata
		.uav_lock               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_lock),               //  output,    width = 1,                          .lock
		.uav_debugaccess        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_debugaccess),        //  output,    width = 1,                          .debugaccess
		.uav_response           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_response),           //   input,    width = 2,                          .response
		.uav_writeresponsevalid (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_writeresponsevalid), //   input,    width = 1,                          .writeresponsevalid
		.av_address             (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_address),                                                 //   input,   width = 20,      avalon_anti_master_0.address
		.av_waitrequest         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest),                                             //  output,    width = 1,                          .waitrequest
		.av_burstcount          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_burstcount),                                              //   input,    width = 4,                          .burstcount
		.av_byteenable          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_byteenable),                                              //   input,   width = 64,                          .byteenable
		.av_read                (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_read),                                                    //   input,    width = 1,                          .read
		.av_readdata            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_readdata),                                                //  output,  width = 512,                          .readdata
		.av_readdatavalid       (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_readdatavalid),                                           //  output,    width = 1,                          .readdatavalid
		.av_write               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_write),                                                   //   input,    width = 1,                          .write
		.av_writedata           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_writedata),                                               //   input,  width = 512,                          .writedata
		.av_response            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_response),                                                //  output,    width = 2,                          .response
		.av_writeresponsevalid  (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_writeresponsevalid),                                      //  output,    width = 1,                          .writeresponsevalid
		.av_beginbursttransfer  (1'b0),                                                                                                  // (terminated),                                         
		.av_begintransfer       (1'b0),                                                                                                  // (terminated),                                         
		.av_chipselect          (1'b0),                                                                                                  // (terminated),                                         
		.av_lock                (1'b0),                                                                                                  // (terminated),                                         
		.av_debugaccess         (1'b0),                                                                                                  // (terminated),                                         
		.uav_clken              (),                                                                                                      // (terminated),                                         
		.av_clken               (1'b1)                                                                                                   // (terminated),                                         
	);

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (15),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) spi_pb_0_m0_translator (
		.clk                    (qsys_clk_config_clk_clk),                                        //   input,   width = 1,                       clk.clk
		.reset                  (spi_pb_0_reset_reset_bridge_in_reset_reset),                     //   input,   width = 1,                     reset.reset
		.uav_address            (spi_pb_0_m0_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (spi_pb_0_m0_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (spi_pb_0_m0_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (spi_pb_0_m0_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (spi_pb_0_m0_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (spi_pb_0_m0_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (spi_pb_0_m0_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (spi_pb_0_m0_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (spi_pb_0_m0_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (spi_pb_0_m0_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (spi_pb_0_m0_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (spi_pb_0_m0_address),                                            //   input,  width = 15,      avalon_anti_master_0.address
		.av_waitrequest         (spi_pb_0_m0_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_burstcount          (spi_pb_0_m0_burstcount),                                         //   input,   width = 1,                          .burstcount
		.av_byteenable          (spi_pb_0_m0_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (spi_pb_0_m0_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (spi_pb_0_m0_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (spi_pb_0_m0_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (spi_pb_0_m0_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (spi_pb_0_m0_writedata),                                          //   input,  width = 32,                          .writedata
		.av_debugaccess         (spi_pb_0_m0_debugaccess),                                        //   input,   width = 1,                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                           // (terminated),                                        
		.av_begintransfer       (1'b0),                                                           // (terminated),                                        
		.av_chipselect          (1'b0),                                                           // (terminated),                                        
		.av_lock                (1'b0),                                                           // (terminated),                                        
		.uav_clken              (),                                                               // (terminated),                                        
		.av_clken               (1'b1),                                                           // (terminated),                                        
		.uav_response           (2'b00),                                                          // (terminated),                                        
		.av_response            (),                                                               // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                           // (terminated),                                        
		.av_writeresponsevalid  ()                                                                // (terminated),                                        
	);

	qsys_top_altera_merlin_master_translator_191_g7h47bq #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0),
		.SYNC_RESET                  (0),
		.WAITREQUEST_ALLOWANCE       (0)
	) qsys_top_master_0_master_translator (
		.clk                    (qsys_clk_config_clk_clk),                                                     //   input,   width = 1,                       clk.clk
		.reset                  (spi_pb_0_reset_reset_bridge_in_reset_reset),                                  //   input,   width = 1,                     reset.reset
		.uav_address            (qsys_top_master_0_master_translator_avalon_universal_master_0_address),       //  output,  width = 32, avalon_universal_master_0.address
		.uav_burstcount         (qsys_top_master_0_master_translator_avalon_universal_master_0_burstcount),    //  output,   width = 3,                          .burstcount
		.uav_read               (qsys_top_master_0_master_translator_avalon_universal_master_0_read),          //  output,   width = 1,                          .read
		.uav_write              (qsys_top_master_0_master_translator_avalon_universal_master_0_write),         //  output,   width = 1,                          .write
		.uav_waitrequest        (qsys_top_master_0_master_translator_avalon_universal_master_0_waitrequest),   //   input,   width = 1,                          .waitrequest
		.uav_readdatavalid      (qsys_top_master_0_master_translator_avalon_universal_master_0_readdatavalid), //   input,   width = 1,                          .readdatavalid
		.uav_byteenable         (qsys_top_master_0_master_translator_avalon_universal_master_0_byteenable),    //  output,   width = 4,                          .byteenable
		.uav_readdata           (qsys_top_master_0_master_translator_avalon_universal_master_0_readdata),      //   input,  width = 32,                          .readdata
		.uav_writedata          (qsys_top_master_0_master_translator_avalon_universal_master_0_writedata),     //  output,  width = 32,                          .writedata
		.uav_lock               (qsys_top_master_0_master_translator_avalon_universal_master_0_lock),          //  output,   width = 1,                          .lock
		.uav_debugaccess        (qsys_top_master_0_master_translator_avalon_universal_master_0_debugaccess),   //  output,   width = 1,                          .debugaccess
		.av_address             (qsys_top_master_0_master_address),                                            //   input,  width = 32,      avalon_anti_master_0.address
		.av_waitrequest         (qsys_top_master_0_master_waitrequest),                                        //  output,   width = 1,                          .waitrequest
		.av_byteenable          (qsys_top_master_0_master_byteenable),                                         //   input,   width = 4,                          .byteenable
		.av_read                (qsys_top_master_0_master_read),                                               //   input,   width = 1,                          .read
		.av_readdata            (qsys_top_master_0_master_readdata),                                           //  output,  width = 32,                          .readdata
		.av_readdatavalid       (qsys_top_master_0_master_readdatavalid),                                      //  output,   width = 1,                          .readdatavalid
		.av_write               (qsys_top_master_0_master_write),                                              //   input,   width = 1,                          .write
		.av_writedata           (qsys_top_master_0_master_writedata),                                          //   input,  width = 32,                          .writedata
		.av_burstcount          (1'b1),                                                                        // (terminated),                                        
		.av_beginbursttransfer  (1'b0),                                                                        // (terminated),                                        
		.av_begintransfer       (1'b0),                                                                        // (terminated),                                        
		.av_chipselect          (1'b0),                                                                        // (terminated),                                        
		.av_lock                (1'b0),                                                                        // (terminated),                                        
		.av_debugaccess         (1'b0),                                                                        // (terminated),                                        
		.uav_clken              (),                                                                            // (terminated),                                        
		.av_clken               (1'b1),                                                                        // (terminated),                                        
		.uav_response           (2'b00),                                                                       // (terminated),                                        
		.av_response            (),                                                                            // (terminated),                                        
		.uav_writeresponsevalid (1'b0),                                                                        // (terminated),                                        
		.av_writeresponsevalid  ()                                                                             // (terminated),                                        
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (12),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) qsys_top_mm_clock_crossing_bridge_0_s0_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,                      clk.clk
		.reset                  (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_address),                  //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_burstcount),               //   input,   width = 3,                         .burstcount
		.uav_read               (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_read),                     //   input,   width = 1,                         .read
		.uav_write              (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_write),                    //   input,   width = 1,                         .write
		.uav_waitrequest        (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest),              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid),            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_byteenable),               //   input,   width = 4,                         .byteenable
		.uav_readdata           (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_readdata),                 //  output,  width = 32,                         .readdata
		.uav_writedata          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_writedata),                //   input,  width = 32,                         .writedata
		.uav_lock               (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_lock),                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess),              //   input,   width = 1,                         .debugaccess
		.av_address             (qsys_top_mm_clock_crossing_bridge_0_s0_address),                           //  output,  width = 12,      avalon_anti_slave_0.address
		.av_write               (qsys_top_mm_clock_crossing_bridge_0_s0_write),                             //  output,   width = 1,                         .write
		.av_read                (qsys_top_mm_clock_crossing_bridge_0_s0_read),                              //  output,   width = 1,                         .read
		.av_readdata            (qsys_top_mm_clock_crossing_bridge_0_s0_readdata),                          //   input,  width = 32,                         .readdata
		.av_writedata           (qsys_top_mm_clock_crossing_bridge_0_s0_writedata),                         //  output,  width = 32,                         .writedata
		.av_burstcount          (qsys_top_mm_clock_crossing_bridge_0_s0_burstcount),                        //  output,   width = 1,                         .burstcount
		.av_byteenable          (qsys_top_mm_clock_crossing_bridge_0_s0_byteenable),                        //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (qsys_top_mm_clock_crossing_bridge_0_s0_readdatavalid),                     //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (qsys_top_mm_clock_crossing_bridge_0_s0_waitrequest),                       //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (qsys_top_mm_clock_crossing_bridge_0_s0_debugaccess),                       //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_chipselect          (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) arbiter_bridge_s0_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,                      clk.clk
		.reset                  (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (arbiter_bridge_s0_agent_m0_address),                                       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (arbiter_bridge_s0_agent_m0_burstcount),                                    //   input,   width = 3,                         .burstcount
		.uav_read               (arbiter_bridge_s0_agent_m0_read),                                          //   input,   width = 1,                         .read
		.uav_write              (arbiter_bridge_s0_agent_m0_write),                                         //   input,   width = 1,                         .write
		.uav_waitrequest        (arbiter_bridge_s0_agent_m0_waitrequest),                                   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (arbiter_bridge_s0_agent_m0_readdatavalid),                                 //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (arbiter_bridge_s0_agent_m0_byteenable),                                    //   input,   width = 4,                         .byteenable
		.uav_readdata           (arbiter_bridge_s0_agent_m0_readdata),                                      //  output,  width = 32,                         .readdata
		.uav_writedata          (arbiter_bridge_s0_agent_m0_writedata),                                     //   input,  width = 32,                         .writedata
		.uav_lock               (arbiter_bridge_s0_agent_m0_lock),                                          //   input,   width = 1,                         .lock
		.uav_debugaccess        (arbiter_bridge_s0_agent_m0_debugaccess),                                   //   input,   width = 1,                         .debugaccess
		.av_address             (arbiter_bridge_s0_address),                                                //  output,   width = 6,      avalon_anti_slave_0.address
		.av_write               (arbiter_bridge_s0_write),                                                  //  output,   width = 1,                         .write
		.av_read                (arbiter_bridge_s0_read),                                                   //  output,   width = 1,                         .read
		.av_readdata            (arbiter_bridge_s0_readdata),                                               //   input,  width = 32,                         .readdata
		.av_writedata           (arbiter_bridge_s0_writedata),                                              //  output,  width = 32,                         .writedata
		.av_burstcount          (arbiter_bridge_s0_burstcount),                                             //  output,   width = 1,                         .burstcount
		.av_byteenable          (arbiter_bridge_s0_byteenable),                                             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (arbiter_bridge_s0_readdatavalid),                                          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (arbiter_bridge_s0_waitrequest),                                            //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (arbiter_bridge_s0_debugaccess),                                            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_chipselect          (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) pcie_to_avmm_0_s0_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,                      clk.clk
		.reset                  (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (pcie_to_avmm_0_s0_agent_m0_address),                                       //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (pcie_to_avmm_0_s0_agent_m0_burstcount),                                    //   input,   width = 3,                         .burstcount
		.uav_read               (pcie_to_avmm_0_s0_agent_m0_read),                                          //   input,   width = 1,                         .read
		.uav_write              (pcie_to_avmm_0_s0_agent_m0_write),                                         //   input,   width = 1,                         .write
		.uav_waitrequest        (pcie_to_avmm_0_s0_agent_m0_waitrequest),                                   //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (pcie_to_avmm_0_s0_agent_m0_readdatavalid),                                 //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (pcie_to_avmm_0_s0_agent_m0_byteenable),                                    //   input,   width = 4,                         .byteenable
		.uav_readdata           (pcie_to_avmm_0_s0_agent_m0_readdata),                                      //  output,  width = 32,                         .readdata
		.uav_writedata          (pcie_to_avmm_0_s0_agent_m0_writedata),                                     //   input,  width = 32,                         .writedata
		.uav_lock               (pcie_to_avmm_0_s0_agent_m0_lock),                                          //   input,   width = 1,                         .lock
		.uav_debugaccess        (pcie_to_avmm_0_s0_agent_m0_debugaccess),                                   //   input,   width = 1,                         .debugaccess
		.av_address             (PCIe_to_avmm_0_s0_address),                                                //  output,  width = 19,      avalon_anti_slave_0.address
		.av_write               (PCIe_to_avmm_0_s0_write),                                                  //  output,   width = 1,                         .write
		.av_read                (PCIe_to_avmm_0_s0_read),                                                   //  output,   width = 1,                         .read
		.av_readdata            (PCIe_to_avmm_0_s0_readdata),                                               //   input,  width = 32,                         .readdata
		.av_writedata           (PCIe_to_avmm_0_s0_writedata),                                              //  output,  width = 32,                         .writedata
		.av_burstcount          (PCIe_to_avmm_0_s0_burstcount),                                             //  output,   width = 1,                         .burstcount
		.av_byteenable          (PCIe_to_avmm_0_s0_byteenable),                                             //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (PCIe_to_avmm_0_s0_readdatavalid),                                          //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (PCIe_to_avmm_0_s0_waitrequest),                                            //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (PCIe_to_avmm_0_s0_debugaccess),                                            //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_chipselect          (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) ocmem_s1_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,                      clk.clk
		.reset                  (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (ocmem_s1_agent_m0_address),                                                //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (ocmem_s1_agent_m0_burstcount),                                             //   input,   width = 3,                         .burstcount
		.uav_read               (ocmem_s1_agent_m0_read),                                                   //   input,   width = 1,                         .read
		.uav_write              (ocmem_s1_agent_m0_write),                                                  //   input,   width = 1,                         .write
		.uav_waitrequest        (ocmem_s1_agent_m0_waitrequest),                                            //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (ocmem_s1_agent_m0_readdatavalid),                                          //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (ocmem_s1_agent_m0_byteenable),                                             //   input,   width = 4,                         .byteenable
		.uav_readdata           (ocmem_s1_agent_m0_readdata),                                               //  output,  width = 32,                         .readdata
		.uav_writedata          (ocmem_s1_agent_m0_writedata),                                              //   input,  width = 32,                         .writedata
		.uav_lock               (ocmem_s1_agent_m0_lock),                                                   //   input,   width = 1,                         .lock
		.uav_debugaccess        (ocmem_s1_agent_m0_debugaccess),                                            //   input,   width = 1,                         .debugaccess
		.av_address             (ocmem_s1_address),                                                         //  output,  width = 10,      avalon_anti_slave_0.address
		.av_write               (ocmem_s1_write),                                                           //  output,   width = 1,                         .write
		.av_readdata            (ocmem_s1_readdata),                                                        //   input,  width = 32,                         .readdata
		.av_writedata           (ocmem_s1_writedata),                                                       //  output,  width = 32,                         .writedata
		.av_byteenable          (ocmem_s1_byteenable),                                                      //  output,   width = 4,                         .byteenable
		.av_chipselect          (ocmem_s1_chipselect),                                                      //  output,   width = 1,                         .chipselect
		.av_clken               (ocmem_s1_clken),                                                           //  output,   width = 1,                         .clken
		.av_read                (),                                                                         // (terminated),                                       
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_burstcount          (),                                                                         // (terminated),                                       
		.av_readdatavalid       (1'b0),                                                                     // (terminated),                                       
		.av_waitrequest         (1'b0),                                                                     // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_debugaccess         (),                                                                         // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	qsys_top_altera_merlin_slave_translator_191_x56fcki #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0),
		.WAITREQUEST_ALLOWANCE          (0),
		.SYNC_RESET                     (0)
	) qsys_sys_mgr_system_mm_translator (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,                      clk.clk
		.reset                  (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1,                    reset.reset
		.uav_address            (qsys_sys_mgr_system_mm_agent_m0_address),                                  //   input,  width = 32, avalon_universal_slave_0.address
		.uav_burstcount         (qsys_sys_mgr_system_mm_agent_m0_burstcount),                               //   input,   width = 3,                         .burstcount
		.uav_read               (qsys_sys_mgr_system_mm_agent_m0_read),                                     //   input,   width = 1,                         .read
		.uav_write              (qsys_sys_mgr_system_mm_agent_m0_write),                                    //   input,   width = 1,                         .write
		.uav_waitrequest        (qsys_sys_mgr_system_mm_agent_m0_waitrequest),                              //  output,   width = 1,                         .waitrequest
		.uav_readdatavalid      (qsys_sys_mgr_system_mm_agent_m0_readdatavalid),                            //  output,   width = 1,                         .readdatavalid
		.uav_byteenable         (qsys_sys_mgr_system_mm_agent_m0_byteenable),                               //   input,   width = 4,                         .byteenable
		.uav_readdata           (qsys_sys_mgr_system_mm_agent_m0_readdata),                                 //  output,  width = 32,                         .readdata
		.uav_writedata          (qsys_sys_mgr_system_mm_agent_m0_writedata),                                //   input,  width = 32,                         .writedata
		.uav_lock               (qsys_sys_mgr_system_mm_agent_m0_lock),                                     //   input,   width = 1,                         .lock
		.uav_debugaccess        (qsys_sys_mgr_system_mm_agent_m0_debugaccess),                              //   input,   width = 1,                         .debugaccess
		.av_address             (qsys_sys_mgr_system_mm_address),                                           //  output,  width = 11,      avalon_anti_slave_0.address
		.av_write               (qsys_sys_mgr_system_mm_write),                                             //  output,   width = 1,                         .write
		.av_read                (qsys_sys_mgr_system_mm_read),                                              //  output,   width = 1,                         .read
		.av_readdata            (qsys_sys_mgr_system_mm_readdata),                                          //   input,  width = 32,                         .readdata
		.av_writedata           (qsys_sys_mgr_system_mm_writedata),                                         //  output,  width = 32,                         .writedata
		.av_burstcount          (qsys_sys_mgr_system_mm_burstcount),                                        //  output,   width = 1,                         .burstcount
		.av_byteenable          (qsys_sys_mgr_system_mm_byteenable),                                        //  output,   width = 4,                         .byteenable
		.av_readdatavalid       (qsys_sys_mgr_system_mm_readdatavalid),                                     //   input,   width = 1,                         .readdatavalid
		.av_waitrequest         (qsys_sys_mgr_system_mm_waitrequest),                                       //   input,   width = 1,                         .waitrequest
		.av_debugaccess         (qsys_sys_mgr_system_mm_debugaccess),                                       //  output,   width = 1,                         .debugaccess
		.av_begintransfer       (),                                                                         // (terminated),                                       
		.av_beginbursttransfer  (),                                                                         // (terminated),                                       
		.av_writebyteenable     (),                                                                         // (terminated),                                       
		.av_lock                (),                                                                         // (terminated),                                       
		.av_chipselect          (),                                                                         // (terminated),                                       
		.av_clken               (),                                                                         // (terminated),                                       
		.uav_clken              (1'b0),                                                                     // (terminated),                                       
		.av_outputenable        (),                                                                         // (terminated),                                       
		.uav_response           (),                                                                         // (terminated),                                       
		.av_response            (2'b00),                                                                    // (terminated),                                       
		.uav_writeresponsevalid (),                                                                         // (terminated),                                       
		.av_writeresponsevalid  (1'b0)                                                                      // (terminated),                                       
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (661),
		.PKT_DOMAIN_H              (660),
		.PKT_DOMAIN_L              (659),
		.PKT_SNOOP_H               (658),
		.PKT_SNOOP_L               (655),
		.PKT_BARRIER_H             (654),
		.PKT_BARRIER_L             (653),
		.PKT_ORI_BURST_SIZE_H      (652),
		.PKT_ORI_BURST_SIZE_L      (650),
		.PKT_RESPONSE_STATUS_H     (649),
		.PKT_RESPONSE_STATUS_L     (648),
		.PKT_QOS_H                 (633),
		.PKT_QOS_L                 (633),
		.PKT_DATA_SIDEBAND_H       (631),
		.PKT_DATA_SIDEBAND_L       (631),
		.PKT_ADDR_SIDEBAND_H       (630),
		.PKT_ADDR_SIDEBAND_L       (630),
		.PKT_BURST_TYPE_H          (629),
		.PKT_BURST_TYPE_L          (628),
		.PKT_CACHE_H               (647),
		.PKT_CACHE_L               (644),
		.PKT_THREAD_ID_H           (640),
		.PKT_THREAD_ID_L           (640),
		.PKT_BURST_SIZE_H          (627),
		.PKT_BURST_SIZE_L          (625),
		.PKT_TRANS_EXCLUSIVE       (613),
		.PKT_TRANS_LOCK            (612),
		.PKT_BEGIN_BURST           (632),
		.PKT_PROTECTION_H          (643),
		.PKT_PROTECTION_L          (641),
		.PKT_BURSTWRAP_H           (624),
		.PKT_BURSTWRAP_L           (624),
		.PKT_BYTE_CNT_H            (623),
		.PKT_BYTE_CNT_L            (614),
		.PKT_ADDR_H                (607),
		.PKT_ADDR_L                (576),
		.PKT_TRANS_COMPRESSED_READ (608),
		.PKT_TRANS_POSTED          (609),
		.PKT_TRANS_WRITE           (610),
		.PKT_TRANS_READ            (611),
		.PKT_DATA_H                (511),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_SRC_ID_H              (636),
		.PKT_SRC_ID_L              (634),
		.PKT_DEST_ID_H             (639),
		.PKT_DEST_ID_L             (637),
		.ST_DATA_W                 (662),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (1),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent (
		.clk                   (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                             //   input,    width = 1,       clk.clk
		.reset                 (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset),        //   input,    width = 1, clk_reset.reset
		.av_address            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_address),            //   input,   width = 32,        av.address
		.av_write              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_write),              //   input,    width = 1,          .write
		.av_read               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_read),               //   input,    width = 1,          .read
		.av_writedata          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_writedata),          //   input,  width = 512,          .writedata
		.av_readdata           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_readdata),           //  output,  width = 512,          .readdata
		.av_waitrequest        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_waitrequest),        //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_readdatavalid),      //  output,    width = 1,          .readdatavalid
		.av_byteenable         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_byteenable),         //   input,   width = 64,          .byteenable
		.av_burstcount         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_burstcount),         //   input,   width = 10,          .burstcount
		.av_debugaccess        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_debugaccess),        //   input,    width = 1,          .debugaccess
		.av_lock               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_lock),               //   input,    width = 1,          .lock
		.av_response           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_response),           //  output,    width = 2,          .response
		.av_writeresponsevalid (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_writeresponsevalid), //  output,    width = 1,          .writeresponsevalid
		.cp_valid              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_valid),                                      //  output,    width = 1,        cp.valid
		.cp_data               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_data),                                       //  output,  width = 662,          .data
		.cp_startofpacket      (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_startofpacket),                              //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_endofpacket),                                //  output,    width = 1,          .endofpacket
		.cp_ready              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_ready),                                      //   input,    width = 1,          .ready
		.rp_valid              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_valid),                               //   input,    width = 1,        rp.valid
		.rp_data               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_data),                                //   input,  width = 662,          .data
		.rp_channel            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_channel),                             //   input,    width = 5,          .channel
		.rp_startofpacket      (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_startofpacket),                       //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_endofpacket),                         //   input,    width = 1,          .endofpacket
		.rp_ready              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_ready)                                //  output,    width = 1,          .ready
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (121),
		.PKT_DOMAIN_H              (120),
		.PKT_DOMAIN_L              (119),
		.PKT_SNOOP_H               (118),
		.PKT_SNOOP_L               (115),
		.PKT_BARRIER_H             (114),
		.PKT_BARRIER_L             (113),
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) spi_pb_0_m0_agent (
		.clk                   (qsys_clk_config_clk_clk),                                        //   input,    width = 1,       clk.clk
		.reset                 (spi_pb_0_reset_reset_bridge_in_reset_reset),                     //   input,    width = 1, clk_reset.reset
		.av_address            (spi_pb_0_m0_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (spi_pb_0_m0_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (spi_pb_0_m0_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (spi_pb_0_m0_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (spi_pb_0_m0_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (spi_pb_0_m0_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (spi_pb_0_m0_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (spi_pb_0_m0_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (spi_pb_0_m0_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (spi_pb_0_m0_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (spi_pb_0_m0_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (spi_pb_0_m0_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (spi_pb_0_m0_agent_cp_data),                                      //  output,  width = 122,          .data
		.cp_startofpacket      (spi_pb_0_m0_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (spi_pb_0_m0_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (spi_pb_0_m0_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (spi_pb_0_m0_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (spi_pb_0_m0_limiter_rsp_src_data),                               //   input,  width = 122,          .data
		.rp_channel            (spi_pb_0_m0_limiter_rsp_src_channel),                            //   input,    width = 5,          .channel
		.rp_startofpacket      (spi_pb_0_m0_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (spi_pb_0_m0_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (spi_pb_0_m0_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                               // (terminated),                         
		.av_writeresponsevalid ()                                                                // (terminated),                         
	);

	qsys_top_altera_merlin_master_agent_191_mpbm6tq #(
		.PKT_WUNIQUE               (121),
		.PKT_DOMAIN_H              (120),
		.PKT_DOMAIN_L              (119),
		.PKT_SNOOP_H               (118),
		.PKT_SNOOP_L               (115),
		.PKT_BARRIER_H             (114),
		.PKT_BARRIER_L             (113),
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_QOS_H                 (93),
		.PKT_QOS_L                 (93),
		.PKT_DATA_SIDEBAND_H       (91),
		.PKT_DATA_SIDEBAND_L       (91),
		.PKT_ADDR_SIDEBAND_H       (90),
		.PKT_ADDR_SIDEBAND_L       (90),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_CACHE_H               (107),
		.PKT_CACHE_L               (104),
		.PKT_THREAD_ID_H           (100),
		.PKT_THREAD_ID_L           (100),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.DOMAIN_VALUE              (3),
		.BARRIER_VALUE             (0),
		.SNOOP_VALUE               (0),
		.WUNIQUE_VALUE             (0),
		.SYNC_RESET                (0)
	) qsys_top_master_0_master_agent (
		.clk                   (qsys_clk_config_clk_clk),                                                     //   input,    width = 1,       clk.clk
		.reset                 (spi_pb_0_reset_reset_bridge_in_reset_reset),                                  //   input,    width = 1, clk_reset.reset
		.av_address            (qsys_top_master_0_master_translator_avalon_universal_master_0_address),       //   input,   width = 32,        av.address
		.av_write              (qsys_top_master_0_master_translator_avalon_universal_master_0_write),         //   input,    width = 1,          .write
		.av_read               (qsys_top_master_0_master_translator_avalon_universal_master_0_read),          //   input,    width = 1,          .read
		.av_writedata          (qsys_top_master_0_master_translator_avalon_universal_master_0_writedata),     //   input,   width = 32,          .writedata
		.av_readdata           (qsys_top_master_0_master_translator_avalon_universal_master_0_readdata),      //  output,   width = 32,          .readdata
		.av_waitrequest        (qsys_top_master_0_master_translator_avalon_universal_master_0_waitrequest),   //  output,    width = 1,          .waitrequest
		.av_readdatavalid      (qsys_top_master_0_master_translator_avalon_universal_master_0_readdatavalid), //  output,    width = 1,          .readdatavalid
		.av_byteenable         (qsys_top_master_0_master_translator_avalon_universal_master_0_byteenable),    //   input,    width = 4,          .byteenable
		.av_burstcount         (qsys_top_master_0_master_translator_avalon_universal_master_0_burstcount),    //   input,    width = 3,          .burstcount
		.av_debugaccess        (qsys_top_master_0_master_translator_avalon_universal_master_0_debugaccess),   //   input,    width = 1,          .debugaccess
		.av_lock               (qsys_top_master_0_master_translator_avalon_universal_master_0_lock),          //   input,    width = 1,          .lock
		.cp_valid              (qsys_top_master_0_master_agent_cp_valid),                                     //  output,    width = 1,        cp.valid
		.cp_data               (qsys_top_master_0_master_agent_cp_data),                                      //  output,  width = 122,          .data
		.cp_startofpacket      (qsys_top_master_0_master_agent_cp_startofpacket),                             //  output,    width = 1,          .startofpacket
		.cp_endofpacket        (qsys_top_master_0_master_agent_cp_endofpacket),                               //  output,    width = 1,          .endofpacket
		.cp_ready              (qsys_top_master_0_master_agent_cp_ready),                                     //   input,    width = 1,          .ready
		.rp_valid              (qsys_top_master_0_master_limiter_rsp_src_valid),                              //   input,    width = 1,        rp.valid
		.rp_data               (qsys_top_master_0_master_limiter_rsp_src_data),                               //   input,  width = 122,          .data
		.rp_channel            (qsys_top_master_0_master_limiter_rsp_src_channel),                            //   input,    width = 5,          .channel
		.rp_startofpacket      (qsys_top_master_0_master_limiter_rsp_src_startofpacket),                      //   input,    width = 1,          .startofpacket
		.rp_endofpacket        (qsys_top_master_0_master_limiter_rsp_src_endofpacket),                        //   input,    width = 1,          .endofpacket
		.rp_ready              (qsys_top_master_0_master_limiter_rsp_src_ready),                              //  output,    width = 1,          .ready
		.av_response           (),                                                                            // (terminated),                         
		.av_writeresponsevalid ()                                                                             // (terminated),                         
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) qsys_top_mm_clock_crossing_bridge_0_s0_agent (
		.clk                     (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                      //   input,    width = 1,             clk.clk
		.reset                   (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1,       clk_reset.reset
		.m0_address              (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_address),                    //  output,   width = 32,              m0.address
		.m0_burstcount           (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_burstcount),                 //  output,    width = 3,                .burstcount
		.m0_byteenable           (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_byteenable),                 //  output,    width = 4,                .byteenable
		.m0_debugaccess          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_debugaccess),                //  output,    width = 1,                .debugaccess
		.m0_lock                 (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_lock),                       //  output,    width = 1,                .lock
		.m0_readdata             (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_readdata),                   //   input,   width = 32,                .readdata
		.m0_readdatavalid        (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_readdatavalid),              //   input,    width = 1,                .readdatavalid
		.m0_read                 (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_read),                       //  output,    width = 1,                .read
		.m0_waitrequest          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_waitrequest),                //   input,    width = 1,                .waitrequest
		.m0_writedata            (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_writedata),                  //  output,   width = 32,                .writedata
		.m0_write                (qsys_top_mm_clock_crossing_bridge_0_s0_agent_m0_write),                      //  output,    width = 1,                .write
		.rp_endofpacket          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket),                //  output,    width = 1,              rp.endofpacket
		.rp_ready                (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_ready),                      //   input,    width = 1,                .ready
		.rp_valid                (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_valid),                      //  output,    width = 1,                .valid
		.rp_data                 (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_data),                       //  output,  width = 122,                .data
		.rp_startofpacket        (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket),              //  output,    width = 1,                .startofpacket
		.cp_ready                (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready),         //  output,    width = 1,              cp.ready
		.cp_valid                (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid),         //   input,    width = 1,                .valid
		.cp_data                 (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data),          //   input,  width = 122,                .data
		.cp_startofpacket        (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket), //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket),   //   input,    width = 1,                .endofpacket
		.cp_channel              (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel),       //   input,    width = 5,                .channel
		.rf_sink_ready           (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready),            //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid),            //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket),    //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket),      //   input,    width = 1,                .endofpacket
		.rf_sink_data            (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data),             //   input,  width = 123,                .data
		.rf_source_ready         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_ready),               //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_valid),               //  output,    width = 1,                .valid
		.rf_source_startofpacket (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket),       //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket),         //  output,    width = 1,                .endofpacket
		.rf_source_data          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_data),                //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready),          //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid),          //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data),           //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready),          //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid),          //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data),           //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                      // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                       // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                        // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (129),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_data),              //   input,  width = 123,        in.data
		.in_valid          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_valid),             //   input,    width = 1,          .valid
		.in_ready          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_ready),             //  output,    width = 1,          .ready
		.in_startofpacket  (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_startofpacket),     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rf_source_endofpacket),       //   input,    width = 1,          .endofpacket
		.out_data          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_data),           //  output,  width = 123,       out.data
		.out_valid         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_valid),          //  output,    width = 1,          .valid
		.out_ready         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_ready),          //   input,    width = 1,          .ready
		.out_startofpacket (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_startofpacket),  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rsp_fifo_out_endofpacket),    //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated),                         
		.csr_read          (1'b0),                                                                     // (terminated),                         
		.csr_write         (1'b0),                                                                     // (terminated),                         
		.csr_readdata      (),                                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                         
		.almost_full_data  (),                                                                         // (terminated),                         
		.almost_empty_data (),                                                                         // (terminated),                         
		.in_empty          (1'b0),                                                                     // (terminated),                         
		.out_empty         (),                                                                         // (terminated),                         
		.in_error          (1'b0),                                                                     // (terminated),                         
		.out_error         (),                                                                         // (terminated),                         
		.in_channel        (1'b0),                                                                     // (terminated),                         
		.out_channel       ()                                                                          // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (256),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_data),         //   input,  width = 34,        in.data
		.in_valid          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_valid),        //   input,   width = 1,          .valid
		.in_ready          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_src_ready),        //  output,   width = 1,          .ready
		.out_data          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_data),         //  output,  width = 34,       out.data
		.out_valid         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_valid),        //  output,   width = 1,          .valid
		.out_ready         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rdata_fifo_out_ready),        //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                                    // (terminated),                        
		.csr_read          (1'b0),                                                                     // (terminated),                        
		.csr_write         (1'b0),                                                                     // (terminated),                        
		.csr_readdata      (),                                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                        
		.almost_full_data  (),                                                                         // (terminated),                        
		.almost_empty_data (),                                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                                     // (terminated),                        
		.out_startofpacket (),                                                                         // (terminated),                        
		.out_endofpacket   (),                                                                         // (terminated),                        
		.in_empty          (1'b0),                                                                     // (terminated),                        
		.out_empty         (),                                                                         // (terminated),                        
		.in_error          (1'b0),                                                                     // (terminated),                        
		.out_error         (),                                                                         // (terminated),                        
		.in_channel        (1'b0),                                                                     // (terminated),                        
		.out_channel       ()                                                                          // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) arbiter_bridge_s0_agent (
		.clk                     (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,             clk.clk
		.reset                   (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (arbiter_bridge_s0_agent_m0_address),                                       //  output,   width = 32,              m0.address
		.m0_burstcount           (arbiter_bridge_s0_agent_m0_burstcount),                                    //  output,    width = 3,                .burstcount
		.m0_byteenable           (arbiter_bridge_s0_agent_m0_byteenable),                                    //  output,    width = 4,                .byteenable
		.m0_debugaccess          (arbiter_bridge_s0_agent_m0_debugaccess),                                   //  output,    width = 1,                .debugaccess
		.m0_lock                 (arbiter_bridge_s0_agent_m0_lock),                                          //  output,    width = 1,                .lock
		.m0_readdata             (arbiter_bridge_s0_agent_m0_readdata),                                      //   input,   width = 32,                .readdata
		.m0_readdatavalid        (arbiter_bridge_s0_agent_m0_readdatavalid),                                 //   input,    width = 1,                .readdatavalid
		.m0_read                 (arbiter_bridge_s0_agent_m0_read),                                          //  output,    width = 1,                .read
		.m0_waitrequest          (arbiter_bridge_s0_agent_m0_waitrequest),                                   //   input,    width = 1,                .waitrequest
		.m0_writedata            (arbiter_bridge_s0_agent_m0_writedata),                                     //  output,   width = 32,                .writedata
		.m0_write                (arbiter_bridge_s0_agent_m0_write),                                         //  output,    width = 1,                .write
		.rp_endofpacket          (arbiter_bridge_s0_agent_rp_endofpacket),                                   //  output,    width = 1,              rp.endofpacket
		.rp_ready                (arbiter_bridge_s0_agent_rp_ready),                                         //   input,    width = 1,                .ready
		.rp_valid                (arbiter_bridge_s0_agent_rp_valid),                                         //  output,    width = 1,                .valid
		.rp_data                 (arbiter_bridge_s0_agent_rp_data),                                          //  output,  width = 122,                .data
		.rp_startofpacket        (arbiter_bridge_s0_agent_rp_startofpacket),                                 //  output,    width = 1,                .startofpacket
		.cp_ready                (arbiter_bridge_s0_burst_adapter_source0_ready),                            //  output,    width = 1,              cp.ready
		.cp_valid                (arbiter_bridge_s0_burst_adapter_source0_valid),                            //   input,    width = 1,                .valid
		.cp_data                 (arbiter_bridge_s0_burst_adapter_source0_data),                             //   input,  width = 122,                .data
		.cp_startofpacket        (arbiter_bridge_s0_burst_adapter_source0_startofpacket),                    //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (arbiter_bridge_s0_burst_adapter_source0_endofpacket),                      //   input,    width = 1,                .endofpacket
		.cp_channel              (arbiter_bridge_s0_burst_adapter_source0_channel),                          //   input,    width = 5,                .channel
		.rf_sink_ready           (arbiter_bridge_s0_agent_rsp_fifo_out_ready),                               //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (arbiter_bridge_s0_agent_rsp_fifo_out_valid),                               //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (arbiter_bridge_s0_agent_rsp_fifo_out_startofpacket),                       //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (arbiter_bridge_s0_agent_rsp_fifo_out_endofpacket),                         //   input,    width = 1,                .endofpacket
		.rf_sink_data            (arbiter_bridge_s0_agent_rsp_fifo_out_data),                                //   input,  width = 123,                .data
		.rf_source_ready         (arbiter_bridge_s0_agent_rf_source_ready),                                  //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (arbiter_bridge_s0_agent_rf_source_valid),                                  //  output,    width = 1,                .valid
		.rf_source_startofpacket (arbiter_bridge_s0_agent_rf_source_startofpacket),                          //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (arbiter_bridge_s0_agent_rf_source_endofpacket),                            //  output,    width = 1,                .endofpacket
		.rf_source_data          (arbiter_bridge_s0_agent_rf_source_data),                                   //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (arbiter_bridge_s0_agent_rdata_fifo_out_ready),                             //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (arbiter_bridge_s0_agent_rdata_fifo_out_valid),                             //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (arbiter_bridge_s0_agent_rdata_fifo_out_data),                              //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (arbiter_bridge_s0_agent_rdata_fifo_src_ready),                             //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (arbiter_bridge_s0_agent_rdata_fifo_src_valid),                             //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (arbiter_bridge_s0_agent_rdata_fifo_src_data),                              //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) arbiter_bridge_s0_agent_rsp_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (arbiter_bridge_s0_agent_rf_source_data),                                   //   input,  width = 123,        in.data
		.in_valid          (arbiter_bridge_s0_agent_rf_source_valid),                                  //   input,    width = 1,          .valid
		.in_ready          (arbiter_bridge_s0_agent_rf_source_ready),                                  //  output,    width = 1,          .ready
		.in_startofpacket  (arbiter_bridge_s0_agent_rf_source_startofpacket),                          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (arbiter_bridge_s0_agent_rf_source_endofpacket),                            //   input,    width = 1,          .endofpacket
		.out_data          (arbiter_bridge_s0_agent_rsp_fifo_out_data),                                //  output,  width = 123,       out.data
		.out_valid         (arbiter_bridge_s0_agent_rsp_fifo_out_valid),                               //  output,    width = 1,          .valid
		.out_ready         (arbiter_bridge_s0_agent_rsp_fifo_out_ready),                               //   input,    width = 1,          .ready
		.out_startofpacket (arbiter_bridge_s0_agent_rsp_fifo_out_startofpacket),                       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (arbiter_bridge_s0_agent_rsp_fifo_out_endofpacket),                         //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated),                         
		.csr_read          (1'b0),                                                                     // (terminated),                         
		.csr_write         (1'b0),                                                                     // (terminated),                         
		.csr_readdata      (),                                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                         
		.almost_full_data  (),                                                                         // (terminated),                         
		.almost_empty_data (),                                                                         // (terminated),                         
		.in_empty          (1'b0),                                                                     // (terminated),                         
		.out_empty         (),                                                                         // (terminated),                         
		.in_error          (1'b0),                                                                     // (terminated),                         
		.out_error         (),                                                                         // (terminated),                         
		.in_channel        (1'b0),                                                                     // (terminated),                         
		.out_channel       ()                                                                          // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) arbiter_bridge_s0_agent_rdata_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (arbiter_bridge_s0_agent_rdata_fifo_src_data),                              //   input,  width = 34,        in.data
		.in_valid          (arbiter_bridge_s0_agent_rdata_fifo_src_valid),                             //   input,   width = 1,          .valid
		.in_ready          (arbiter_bridge_s0_agent_rdata_fifo_src_ready),                             //  output,   width = 1,          .ready
		.out_data          (arbiter_bridge_s0_agent_rdata_fifo_out_data),                              //  output,  width = 34,       out.data
		.out_valid         (arbiter_bridge_s0_agent_rdata_fifo_out_valid),                             //  output,   width = 1,          .valid
		.out_ready         (arbiter_bridge_s0_agent_rdata_fifo_out_ready),                             //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                                    // (terminated),                        
		.csr_read          (1'b0),                                                                     // (terminated),                        
		.csr_write         (1'b0),                                                                     // (terminated),                        
		.csr_readdata      (),                                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                        
		.almost_full_data  (),                                                                         // (terminated),                        
		.almost_empty_data (),                                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                                     // (terminated),                        
		.out_startofpacket (),                                                                         // (terminated),                        
		.out_endofpacket   (),                                                                         // (terminated),                        
		.in_empty          (1'b0),                                                                     // (terminated),                        
		.out_empty         (),                                                                         // (terminated),                        
		.in_error          (1'b0),                                                                     // (terminated),                        
		.out_error         (),                                                                         // (terminated),                        
		.in_channel        (1'b0),                                                                     // (terminated),                        
		.out_channel       ()                                                                          // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) pcie_to_avmm_0_s0_agent (
		.clk                     (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,             clk.clk
		.reset                   (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (pcie_to_avmm_0_s0_agent_m0_address),                                       //  output,   width = 32,              m0.address
		.m0_burstcount           (pcie_to_avmm_0_s0_agent_m0_burstcount),                                    //  output,    width = 3,                .burstcount
		.m0_byteenable           (pcie_to_avmm_0_s0_agent_m0_byteenable),                                    //  output,    width = 4,                .byteenable
		.m0_debugaccess          (pcie_to_avmm_0_s0_agent_m0_debugaccess),                                   //  output,    width = 1,                .debugaccess
		.m0_lock                 (pcie_to_avmm_0_s0_agent_m0_lock),                                          //  output,    width = 1,                .lock
		.m0_readdata             (pcie_to_avmm_0_s0_agent_m0_readdata),                                      //   input,   width = 32,                .readdata
		.m0_readdatavalid        (pcie_to_avmm_0_s0_agent_m0_readdatavalid),                                 //   input,    width = 1,                .readdatavalid
		.m0_read                 (pcie_to_avmm_0_s0_agent_m0_read),                                          //  output,    width = 1,                .read
		.m0_waitrequest          (pcie_to_avmm_0_s0_agent_m0_waitrequest),                                   //   input,    width = 1,                .waitrequest
		.m0_writedata            (pcie_to_avmm_0_s0_agent_m0_writedata),                                     //  output,   width = 32,                .writedata
		.m0_write                (pcie_to_avmm_0_s0_agent_m0_write),                                         //  output,    width = 1,                .write
		.rp_endofpacket          (pcie_to_avmm_0_s0_agent_rp_endofpacket),                                   //  output,    width = 1,              rp.endofpacket
		.rp_ready                (pcie_to_avmm_0_s0_agent_rp_ready),                                         //   input,    width = 1,                .ready
		.rp_valid                (pcie_to_avmm_0_s0_agent_rp_valid),                                         //  output,    width = 1,                .valid
		.rp_data                 (pcie_to_avmm_0_s0_agent_rp_data),                                          //  output,  width = 122,                .data
		.rp_startofpacket        (pcie_to_avmm_0_s0_agent_rp_startofpacket),                                 //  output,    width = 1,                .startofpacket
		.cp_ready                (pcie_to_avmm_0_s0_burst_adapter_source0_ready),                            //  output,    width = 1,              cp.ready
		.cp_valid                (pcie_to_avmm_0_s0_burst_adapter_source0_valid),                            //   input,    width = 1,                .valid
		.cp_data                 (pcie_to_avmm_0_s0_burst_adapter_source0_data),                             //   input,  width = 122,                .data
		.cp_startofpacket        (pcie_to_avmm_0_s0_burst_adapter_source0_startofpacket),                    //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (pcie_to_avmm_0_s0_burst_adapter_source0_endofpacket),                      //   input,    width = 1,                .endofpacket
		.cp_channel              (pcie_to_avmm_0_s0_burst_adapter_source0_channel),                          //   input,    width = 5,                .channel
		.rf_sink_ready           (pcie_to_avmm_0_s0_agent_rsp_fifo_out_ready),                               //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (pcie_to_avmm_0_s0_agent_rsp_fifo_out_valid),                               //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (pcie_to_avmm_0_s0_agent_rsp_fifo_out_startofpacket),                       //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (pcie_to_avmm_0_s0_agent_rsp_fifo_out_endofpacket),                         //   input,    width = 1,                .endofpacket
		.rf_sink_data            (pcie_to_avmm_0_s0_agent_rsp_fifo_out_data),                                //   input,  width = 123,                .data
		.rf_source_ready         (pcie_to_avmm_0_s0_agent_rf_source_ready),                                  //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (pcie_to_avmm_0_s0_agent_rf_source_valid),                                  //  output,    width = 1,                .valid
		.rf_source_startofpacket (pcie_to_avmm_0_s0_agent_rf_source_startofpacket),                          //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (pcie_to_avmm_0_s0_agent_rf_source_endofpacket),                            //  output,    width = 1,                .endofpacket
		.rf_source_data          (pcie_to_avmm_0_s0_agent_rf_source_data),                                   //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (pcie_to_avmm_0_s0_agent_rdata_fifo_out_ready),                             //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pcie_to_avmm_0_s0_agent_rdata_fifo_out_valid),                             //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (pcie_to_avmm_0_s0_agent_rdata_fifo_out_data),                              //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (pcie_to_avmm_0_s0_agent_rdata_fifo_src_ready),                             //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pcie_to_avmm_0_s0_agent_rdata_fifo_src_valid),                             //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (pcie_to_avmm_0_s0_agent_rdata_fifo_src_data),                              //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) pcie_to_avmm_0_s0_agent_rsp_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (pcie_to_avmm_0_s0_agent_rf_source_data),                                   //   input,  width = 123,        in.data
		.in_valid          (pcie_to_avmm_0_s0_agent_rf_source_valid),                                  //   input,    width = 1,          .valid
		.in_ready          (pcie_to_avmm_0_s0_agent_rf_source_ready),                                  //  output,    width = 1,          .ready
		.in_startofpacket  (pcie_to_avmm_0_s0_agent_rf_source_startofpacket),                          //   input,    width = 1,          .startofpacket
		.in_endofpacket    (pcie_to_avmm_0_s0_agent_rf_source_endofpacket),                            //   input,    width = 1,          .endofpacket
		.out_data          (pcie_to_avmm_0_s0_agent_rsp_fifo_out_data),                                //  output,  width = 123,       out.data
		.out_valid         (pcie_to_avmm_0_s0_agent_rsp_fifo_out_valid),                               //  output,    width = 1,          .valid
		.out_ready         (pcie_to_avmm_0_s0_agent_rsp_fifo_out_ready),                               //   input,    width = 1,          .ready
		.out_startofpacket (pcie_to_avmm_0_s0_agent_rsp_fifo_out_startofpacket),                       //  output,    width = 1,          .startofpacket
		.out_endofpacket   (pcie_to_avmm_0_s0_agent_rsp_fifo_out_endofpacket),                         //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated),                         
		.csr_read          (1'b0),                                                                     // (terminated),                         
		.csr_write         (1'b0),                                                                     // (terminated),                         
		.csr_readdata      (),                                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                         
		.almost_full_data  (),                                                                         // (terminated),                         
		.almost_empty_data (),                                                                         // (terminated),                         
		.in_empty          (1'b0),                                                                     // (terminated),                         
		.out_empty         (),                                                                         // (terminated),                         
		.in_error          (1'b0),                                                                     // (terminated),                         
		.out_error         (),                                                                         // (terminated),                         
		.in_channel        (1'b0),                                                                     // (terminated),                         
		.out_channel       ()                                                                          // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (16),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) pcie_to_avmm_0_s0_agent_rdata_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (pcie_to_avmm_0_s0_agent_rdata_fifo_src_data),                              //   input,  width = 34,        in.data
		.in_valid          (pcie_to_avmm_0_s0_agent_rdata_fifo_src_valid),                             //   input,   width = 1,          .valid
		.in_ready          (pcie_to_avmm_0_s0_agent_rdata_fifo_src_ready),                             //  output,   width = 1,          .ready
		.out_data          (pcie_to_avmm_0_s0_agent_rdata_fifo_out_data),                              //  output,  width = 34,       out.data
		.out_valid         (pcie_to_avmm_0_s0_agent_rdata_fifo_out_valid),                             //  output,   width = 1,          .valid
		.out_ready         (pcie_to_avmm_0_s0_agent_rdata_fifo_out_ready),                             //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                                    // (terminated),                        
		.csr_read          (1'b0),                                                                     // (terminated),                        
		.csr_write         (1'b0),                                                                     // (terminated),                        
		.csr_readdata      (),                                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                        
		.almost_full_data  (),                                                                         // (terminated),                        
		.almost_empty_data (),                                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                                     // (terminated),                        
		.out_startofpacket (),                                                                         // (terminated),                        
		.out_endofpacket   (),                                                                         // (terminated),                        
		.in_empty          (1'b0),                                                                     // (terminated),                        
		.out_empty         (),                                                                         // (terminated),                        
		.in_error          (1'b0),                                                                     // (terminated),                        
		.out_error         (),                                                                         // (terminated),                        
		.in_channel        (1'b0),                                                                     // (terminated),                        
		.out_channel       ()                                                                          // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) ocmem_s1_agent (
		.clk                     (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,             clk.clk
		.reset                   (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (ocmem_s1_agent_m0_address),                                                //  output,   width = 32,              m0.address
		.m0_burstcount           (ocmem_s1_agent_m0_burstcount),                                             //  output,    width = 3,                .burstcount
		.m0_byteenable           (ocmem_s1_agent_m0_byteenable),                                             //  output,    width = 4,                .byteenable
		.m0_debugaccess          (ocmem_s1_agent_m0_debugaccess),                                            //  output,    width = 1,                .debugaccess
		.m0_lock                 (ocmem_s1_agent_m0_lock),                                                   //  output,    width = 1,                .lock
		.m0_readdata             (ocmem_s1_agent_m0_readdata),                                               //   input,   width = 32,                .readdata
		.m0_readdatavalid        (ocmem_s1_agent_m0_readdatavalid),                                          //   input,    width = 1,                .readdatavalid
		.m0_read                 (ocmem_s1_agent_m0_read),                                                   //  output,    width = 1,                .read
		.m0_waitrequest          (ocmem_s1_agent_m0_waitrequest),                                            //   input,    width = 1,                .waitrequest
		.m0_writedata            (ocmem_s1_agent_m0_writedata),                                              //  output,   width = 32,                .writedata
		.m0_write                (ocmem_s1_agent_m0_write),                                                  //  output,    width = 1,                .write
		.rp_endofpacket          (ocmem_s1_agent_rp_endofpacket),                                            //  output,    width = 1,              rp.endofpacket
		.rp_ready                (ocmem_s1_agent_rp_ready),                                                  //   input,    width = 1,                .ready
		.rp_valid                (ocmem_s1_agent_rp_valid),                                                  //  output,    width = 1,                .valid
		.rp_data                 (ocmem_s1_agent_rp_data),                                                   //  output,  width = 122,                .data
		.rp_startofpacket        (ocmem_s1_agent_rp_startofpacket),                                          //  output,    width = 1,                .startofpacket
		.cp_ready                (ocmem_s1_burst_adapter_source0_ready),                                     //  output,    width = 1,              cp.ready
		.cp_valid                (ocmem_s1_burst_adapter_source0_valid),                                     //   input,    width = 1,                .valid
		.cp_data                 (ocmem_s1_burst_adapter_source0_data),                                      //   input,  width = 122,                .data
		.cp_startofpacket        (ocmem_s1_burst_adapter_source0_startofpacket),                             //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (ocmem_s1_burst_adapter_source0_endofpacket),                               //   input,    width = 1,                .endofpacket
		.cp_channel              (ocmem_s1_burst_adapter_source0_channel),                                   //   input,    width = 5,                .channel
		.rf_sink_ready           (ocmem_s1_agent_rsp_fifo_out_ready),                                        //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (ocmem_s1_agent_rsp_fifo_out_valid),                                        //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (ocmem_s1_agent_rsp_fifo_out_startofpacket),                                //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (ocmem_s1_agent_rsp_fifo_out_endofpacket),                                  //   input,    width = 1,                .endofpacket
		.rf_sink_data            (ocmem_s1_agent_rsp_fifo_out_data),                                         //   input,  width = 123,                .data
		.rf_source_ready         (ocmem_s1_agent_rf_source_ready),                                           //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (ocmem_s1_agent_rf_source_valid),                                           //  output,    width = 1,                .valid
		.rf_source_startofpacket (ocmem_s1_agent_rf_source_startofpacket),                                   //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (ocmem_s1_agent_rf_source_endofpacket),                                     //  output,    width = 1,                .endofpacket
		.rf_source_data          (ocmem_s1_agent_rf_source_data),                                            //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (ocmem_s1_agent_rdata_fifo_out_ready),                                      //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ocmem_s1_agent_rdata_fifo_out_valid),                                      //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (ocmem_s1_agent_rdata_fifo_out_data),                                       //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (ocmem_s1_agent_rdata_fifo_src_ready),                                      //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ocmem_s1_agent_rdata_fifo_src_valid),                                      //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (ocmem_s1_agent_rdata_fifo_src_data),                                       //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ocmem_s1_agent_rsp_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (ocmem_s1_agent_rf_source_data),                                            //   input,  width = 123,        in.data
		.in_valid          (ocmem_s1_agent_rf_source_valid),                                           //   input,    width = 1,          .valid
		.in_ready          (ocmem_s1_agent_rf_source_ready),                                           //  output,    width = 1,          .ready
		.in_startofpacket  (ocmem_s1_agent_rf_source_startofpacket),                                   //   input,    width = 1,          .startofpacket
		.in_endofpacket    (ocmem_s1_agent_rf_source_endofpacket),                                     //   input,    width = 1,          .endofpacket
		.out_data          (ocmem_s1_agent_rsp_fifo_out_data),                                         //  output,  width = 123,       out.data
		.out_valid         (ocmem_s1_agent_rsp_fifo_out_valid),                                        //  output,    width = 1,          .valid
		.out_ready         (ocmem_s1_agent_rsp_fifo_out_ready),                                        //   input,    width = 1,          .ready
		.out_startofpacket (ocmem_s1_agent_rsp_fifo_out_startofpacket),                                //  output,    width = 1,          .startofpacket
		.out_endofpacket   (ocmem_s1_agent_rsp_fifo_out_endofpacket),                                  //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated),                         
		.csr_read          (1'b0),                                                                     // (terminated),                         
		.csr_write         (1'b0),                                                                     // (terminated),                         
		.csr_readdata      (),                                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                         
		.almost_full_data  (),                                                                         // (terminated),                         
		.almost_empty_data (),                                                                         // (terminated),                         
		.in_empty          (1'b0),                                                                     // (terminated),                         
		.out_empty         (),                                                                         // (terminated),                         
		.in_error          (1'b0),                                                                     // (terminated),                         
		.out_error         (),                                                                         // (terminated),                         
		.in_channel        (1'b0),                                                                     // (terminated),                         
		.out_channel       ()                                                                          // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) ocmem_s1_agent_rdata_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (ocmem_s1_agent_rdata_fifo_src_data),                                       //   input,  width = 34,        in.data
		.in_valid          (ocmem_s1_agent_rdata_fifo_src_valid),                                      //   input,   width = 1,          .valid
		.in_ready          (ocmem_s1_agent_rdata_fifo_src_ready),                                      //  output,   width = 1,          .ready
		.out_data          (ocmem_s1_agent_rdata_fifo_out_data),                                       //  output,  width = 34,       out.data
		.out_valid         (ocmem_s1_agent_rdata_fifo_out_valid),                                      //  output,   width = 1,          .valid
		.out_ready         (ocmem_s1_agent_rdata_fifo_out_ready),                                      //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                                    // (terminated),                        
		.csr_read          (1'b0),                                                                     // (terminated),                        
		.csr_write         (1'b0),                                                                     // (terminated),                        
		.csr_readdata      (),                                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                        
		.almost_full_data  (),                                                                         // (terminated),                        
		.almost_empty_data (),                                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                                     // (terminated),                        
		.out_startofpacket (),                                                                         // (terminated),                        
		.out_endofpacket   (),                                                                         // (terminated),                        
		.in_empty          (1'b0),                                                                     // (terminated),                        
		.out_empty         (),                                                                         // (terminated),                        
		.in_error          (1'b0),                                                                     // (terminated),                        
		.out_error         (),                                                                         // (terminated),                        
		.in_channel        (1'b0),                                                                     // (terminated),                        
		.out_channel       ()                                                                          // (terminated),                        
	);

	qsys_top_altera_merlin_slave_agent_191_ncfkfri #(
		.PKT_ORI_BURST_SIZE_H      (112),
		.PKT_ORI_BURST_SIZE_L      (110),
		.PKT_RESPONSE_STATUS_H     (109),
		.PKT_RESPONSE_STATUS_L     (108),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (92),
		.PKT_PROTECTION_H          (103),
		.PKT_PROTECTION_L          (101),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (122),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0),
		.SYNC_RESET                (0)
	) qsys_sys_mgr_system_mm_agent (
		.clk                     (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,             clk.clk
		.reset                   (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,       clk_reset.reset
		.m0_address              (qsys_sys_mgr_system_mm_agent_m0_address),                                  //  output,   width = 32,              m0.address
		.m0_burstcount           (qsys_sys_mgr_system_mm_agent_m0_burstcount),                               //  output,    width = 3,                .burstcount
		.m0_byteenable           (qsys_sys_mgr_system_mm_agent_m0_byteenable),                               //  output,    width = 4,                .byteenable
		.m0_debugaccess          (qsys_sys_mgr_system_mm_agent_m0_debugaccess),                              //  output,    width = 1,                .debugaccess
		.m0_lock                 (qsys_sys_mgr_system_mm_agent_m0_lock),                                     //  output,    width = 1,                .lock
		.m0_readdata             (qsys_sys_mgr_system_mm_agent_m0_readdata),                                 //   input,   width = 32,                .readdata
		.m0_readdatavalid        (qsys_sys_mgr_system_mm_agent_m0_readdatavalid),                            //   input,    width = 1,                .readdatavalid
		.m0_read                 (qsys_sys_mgr_system_mm_agent_m0_read),                                     //  output,    width = 1,                .read
		.m0_waitrequest          (qsys_sys_mgr_system_mm_agent_m0_waitrequest),                              //   input,    width = 1,                .waitrequest
		.m0_writedata            (qsys_sys_mgr_system_mm_agent_m0_writedata),                                //  output,   width = 32,                .writedata
		.m0_write                (qsys_sys_mgr_system_mm_agent_m0_write),                                    //  output,    width = 1,                .write
		.rp_endofpacket          (qsys_sys_mgr_system_mm_agent_rp_endofpacket),                              //  output,    width = 1,              rp.endofpacket
		.rp_ready                (qsys_sys_mgr_system_mm_agent_rp_ready),                                    //   input,    width = 1,                .ready
		.rp_valid                (qsys_sys_mgr_system_mm_agent_rp_valid),                                    //  output,    width = 1,                .valid
		.rp_data                 (qsys_sys_mgr_system_mm_agent_rp_data),                                     //  output,  width = 122,                .data
		.rp_startofpacket        (qsys_sys_mgr_system_mm_agent_rp_startofpacket),                            //  output,    width = 1,                .startofpacket
		.cp_ready                (qsys_sys_mgr_system_mm_burst_adapter_source0_ready),                       //  output,    width = 1,              cp.ready
		.cp_valid                (qsys_sys_mgr_system_mm_burst_adapter_source0_valid),                       //   input,    width = 1,                .valid
		.cp_data                 (qsys_sys_mgr_system_mm_burst_adapter_source0_data),                        //   input,  width = 122,                .data
		.cp_startofpacket        (qsys_sys_mgr_system_mm_burst_adapter_source0_startofpacket),               //   input,    width = 1,                .startofpacket
		.cp_endofpacket          (qsys_sys_mgr_system_mm_burst_adapter_source0_endofpacket),                 //   input,    width = 1,                .endofpacket
		.cp_channel              (qsys_sys_mgr_system_mm_burst_adapter_source0_channel),                     //   input,    width = 5,                .channel
		.rf_sink_ready           (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_ready),                          //  output,    width = 1,         rf_sink.ready
		.rf_sink_valid           (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_valid),                          //   input,    width = 1,                .valid
		.rf_sink_startofpacket   (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_startofpacket),                  //   input,    width = 1,                .startofpacket
		.rf_sink_endofpacket     (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_endofpacket),                    //   input,    width = 1,                .endofpacket
		.rf_sink_data            (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_data),                           //   input,  width = 123,                .data
		.rf_source_ready         (qsys_sys_mgr_system_mm_agent_rf_source_ready),                             //   input,    width = 1,       rf_source.ready
		.rf_source_valid         (qsys_sys_mgr_system_mm_agent_rf_source_valid),                             //  output,    width = 1,                .valid
		.rf_source_startofpacket (qsys_sys_mgr_system_mm_agent_rf_source_startofpacket),                     //  output,    width = 1,                .startofpacket
		.rf_source_endofpacket   (qsys_sys_mgr_system_mm_agent_rf_source_endofpacket),                       //  output,    width = 1,                .endofpacket
		.rf_source_data          (qsys_sys_mgr_system_mm_agent_rf_source_data),                              //  output,  width = 123,                .data
		.rdata_fifo_sink_ready   (qsys_sys_mgr_system_mm_agent_rdata_fifo_out_ready),                        //  output,    width = 1, rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (qsys_sys_mgr_system_mm_agent_rdata_fifo_out_valid),                        //   input,    width = 1,                .valid
		.rdata_fifo_sink_data    (qsys_sys_mgr_system_mm_agent_rdata_fifo_out_data),                         //   input,   width = 34,                .data
		.rdata_fifo_src_ready    (qsys_sys_mgr_system_mm_agent_rdata_fifo_src_ready),                        //   input,    width = 1,  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (qsys_sys_mgr_system_mm_agent_rdata_fifo_src_valid),                        //  output,    width = 1,                .valid
		.rdata_fifo_src_data     (qsys_sys_mgr_system_mm_agent_rdata_fifo_src_data),                         //  output,   width = 34,                .data
		.m0_response             (2'b00),                                                                    // (terminated),                               
		.m0_writeresponsevalid   (1'b0),                                                                     // (terminated),                               
		.rdata_fifo_sink_error   (1'b0)                                                                      // (terminated),                               
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (123),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) qsys_sys_mgr_system_mm_agent_rsp_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_data           (qsys_sys_mgr_system_mm_agent_rf_source_data),                              //   input,  width = 123,        in.data
		.in_valid          (qsys_sys_mgr_system_mm_agent_rf_source_valid),                             //   input,    width = 1,          .valid
		.in_ready          (qsys_sys_mgr_system_mm_agent_rf_source_ready),                             //  output,    width = 1,          .ready
		.in_startofpacket  (qsys_sys_mgr_system_mm_agent_rf_source_startofpacket),                     //   input,    width = 1,          .startofpacket
		.in_endofpacket    (qsys_sys_mgr_system_mm_agent_rf_source_endofpacket),                       //   input,    width = 1,          .endofpacket
		.out_data          (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_data),                           //  output,  width = 123,       out.data
		.out_valid         (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_valid),                          //  output,    width = 1,          .valid
		.out_ready         (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_ready),                          //   input,    width = 1,          .ready
		.out_startofpacket (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_startofpacket),                  //  output,    width = 1,          .startofpacket
		.out_endofpacket   (qsys_sys_mgr_system_mm_agent_rsp_fifo_out_endofpacket),                    //  output,    width = 1,          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated),                         
		.csr_read          (1'b0),                                                                     // (terminated),                         
		.csr_write         (1'b0),                                                                     // (terminated),                         
		.csr_readdata      (),                                                                         // (terminated),                         
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                         
		.almost_full_data  (),                                                                         // (terminated),                         
		.almost_empty_data (),                                                                         // (terminated),                         
		.in_empty          (1'b0),                                                                     // (terminated),                         
		.out_empty         (),                                                                         // (terminated),                         
		.in_error          (1'b0),                                                                     // (terminated),                         
		.out_error         (),                                                                         // (terminated),                         
		.in_channel        (1'b0),                                                                     // (terminated),                         
		.out_channel       ()                                                                          // (terminated),                         
	);

	qsys_top_altera_avalon_sc_fifo_1930_pqv24kq #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0),
		.EMPTY_WIDTH         (1),
		.SYNC_RESET          (0)
	) qsys_sys_mgr_system_mm_agent_rdata_fifo (
		.clk               (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,   width = 1,       clk.clk
		.reset             (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,   width = 1, clk_reset.reset
		.in_data           (qsys_sys_mgr_system_mm_agent_rdata_fifo_src_data),                         //   input,  width = 34,        in.data
		.in_valid          (qsys_sys_mgr_system_mm_agent_rdata_fifo_src_valid),                        //   input,   width = 1,          .valid
		.in_ready          (qsys_sys_mgr_system_mm_agent_rdata_fifo_src_ready),                        //  output,   width = 1,          .ready
		.out_data          (qsys_sys_mgr_system_mm_agent_rdata_fifo_out_data),                         //  output,  width = 34,       out.data
		.out_valid         (qsys_sys_mgr_system_mm_agent_rdata_fifo_out_valid),                        //  output,   width = 1,          .valid
		.out_ready         (qsys_sys_mgr_system_mm_agent_rdata_fifo_out_ready),                        //   input,   width = 1,          .ready
		.csr_address       (2'b00),                                                                    // (terminated),                        
		.csr_read          (1'b0),                                                                     // (terminated),                        
		.csr_write         (1'b0),                                                                     // (terminated),                        
		.csr_readdata      (),                                                                         // (terminated),                        
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated),                        
		.almost_full_data  (),                                                                         // (terminated),                        
		.almost_empty_data (),                                                                         // (terminated),                        
		.in_startofpacket  (1'b0),                                                                     // (terminated),                        
		.in_endofpacket    (1'b0),                                                                     // (terminated),                        
		.out_startofpacket (),                                                                         // (terminated),                        
		.out_endofpacket   (),                                                                         // (terminated),                        
		.in_empty          (1'b0),                                                                     // (terminated),                        
		.out_empty         (),                                                                         // (terminated),                        
		.in_error          (1'b0),                                                                     // (terminated),                        
		.out_error         (),                                                                         // (terminated),                        
		.in_channel        (1'b0),                                                                     // (terminated),                        
		.out_channel       ()                                                                          // (terminated),                        
	);

	qsys_top_altera_merlin_router_1920_o5alqwq router (
		.sink_ready         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_ready),                               //  output,    width = 1,      sink.ready
		.sink_valid         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_valid),                               //   input,    width = 1,          .valid
		.sink_data          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_data),                                //   input,  width = 662,          .data
		.sink_startofpacket (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_startofpacket),                       //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_agent_cp_endofpacket),                         //   input,    width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_src_ready),                                                                           //   input,    width = 1,       src.ready
		.src_valid          (router_src_valid),                                                                           //  output,    width = 1,          .valid
		.src_data           (router_src_data),                                                                            //  output,  width = 662,          .data
		.src_channel        (router_src_channel),                                                                         //  output,    width = 5,          .channel
		.src_startofpacket  (router_src_startofpacket),                                                                   //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                                      //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_sp6ej7y router_001 (
		.sink_ready         (spi_pb_0_m0_agent_cp_ready),                 //  output,    width = 1,      sink.ready
		.sink_valid         (spi_pb_0_m0_agent_cp_valid),                 //   input,    width = 1,          .valid
		.sink_data          (spi_pb_0_m0_agent_cp_data),                  //   input,  width = 122,          .data
		.sink_startofpacket (spi_pb_0_m0_agent_cp_startofpacket),         //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (spi_pb_0_m0_agent_cp_endofpacket),           //   input,    width = 1,          .endofpacket
		.clk                (qsys_clk_config_clk_clk),                    //   input,    width = 1,       clk.clk
		.reset              (spi_pb_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_001_src_ready),                       //   input,    width = 1,       src.ready
		.src_valid          (router_001_src_valid),                       //  output,    width = 1,          .valid
		.src_data           (router_001_src_data),                        //  output,  width = 122,          .data
		.src_channel        (router_001_src_channel),                     //  output,    width = 5,          .channel
		.src_startofpacket  (router_001_src_startofpacket),               //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                  //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_uiit2jy router_002 (
		.sink_ready         (qsys_top_master_0_master_agent_cp_ready),         //  output,    width = 1,      sink.ready
		.sink_valid         (qsys_top_master_0_master_agent_cp_valid),         //   input,    width = 1,          .valid
		.sink_data          (qsys_top_master_0_master_agent_cp_data),          //   input,  width = 122,          .data
		.sink_startofpacket (qsys_top_master_0_master_agent_cp_startofpacket), //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (qsys_top_master_0_master_agent_cp_endofpacket),   //   input,    width = 1,          .endofpacket
		.clk                (qsys_clk_config_clk_clk),                         //   input,    width = 1,       clk.clk
		.reset              (spi_pb_0_reset_reset_bridge_in_reset_reset),      //   input,    width = 1, clk_reset.reset
		.src_ready          (router_002_src_ready),                            //   input,    width = 1,       src.ready
		.src_valid          (router_002_src_valid),                            //  output,    width = 1,          .valid
		.src_data           (router_002_src_data),                             //  output,  width = 122,          .data
		.src_channel        (router_002_src_channel),                          //  output,    width = 5,          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_v2z3uta router_003 (
		.sink_ready         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_ready),                    //  output,    width = 1,      sink.ready
		.sink_valid         (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_valid),                    //   input,    width = 1,          .valid
		.sink_data          (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_data),                     //   input,  width = 122,          .data
		.sink_startofpacket (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_startofpacket),            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (qsys_top_mm_clock_crossing_bridge_0_s0_agent_rp_endofpacket),              //   input,    width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_003_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_003_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_003_src_data),                                                      //  output,  width = 122,          .data
		.src_channel        (router_003_src_channel),                                                   //  output,    width = 5,          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_4hge7iq router_004 (
		.sink_ready         (arbiter_bridge_s0_agent_rp_ready),                                         //  output,    width = 1,      sink.ready
		.sink_valid         (arbiter_bridge_s0_agent_rp_valid),                                         //   input,    width = 1,          .valid
		.sink_data          (arbiter_bridge_s0_agent_rp_data),                                          //   input,  width = 122,          .data
		.sink_startofpacket (arbiter_bridge_s0_agent_rp_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (arbiter_bridge_s0_agent_rp_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_004_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_004_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_004_src_data),                                                      //  output,  width = 122,          .data
		.src_channel        (router_004_src_channel),                                                   //  output,    width = 5,          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_wskpv2y router_005 (
		.sink_ready         (pcie_to_avmm_0_s0_agent_rp_ready),                                         //  output,    width = 1,      sink.ready
		.sink_valid         (pcie_to_avmm_0_s0_agent_rp_valid),                                         //   input,    width = 1,          .valid
		.sink_data          (pcie_to_avmm_0_s0_agent_rp_data),                                          //   input,  width = 122,          .data
		.sink_startofpacket (pcie_to_avmm_0_s0_agent_rp_startofpacket),                                 //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (pcie_to_avmm_0_s0_agent_rp_endofpacket),                                   //   input,    width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_005_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_005_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_005_src_data),                                                      //  output,  width = 122,          .data
		.src_channel        (router_005_src_channel),                                                   //  output,    width = 5,          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_4hge7iq router_006 (
		.sink_ready         (ocmem_s1_agent_rp_ready),                                                  //  output,    width = 1,      sink.ready
		.sink_valid         (ocmem_s1_agent_rp_valid),                                                  //   input,    width = 1,          .valid
		.sink_data          (ocmem_s1_agent_rp_data),                                                   //   input,  width = 122,          .data
		.sink_startofpacket (ocmem_s1_agent_rp_startofpacket),                                          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (ocmem_s1_agent_rp_endofpacket),                                            //   input,    width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_006_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_006_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_006_src_data),                                                      //  output,  width = 122,          .data
		.src_channel        (router_006_src_channel),                                                   //  output,    width = 5,          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_router_1920_v2z3uta router_007 (
		.sink_ready         (qsys_sys_mgr_system_mm_agent_rp_ready),                                    //  output,    width = 1,      sink.ready
		.sink_valid         (qsys_sys_mgr_system_mm_agent_rp_valid),                                    //   input,    width = 1,          .valid
		.sink_data          (qsys_sys_mgr_system_mm_agent_rp_data),                                     //   input,  width = 122,          .data
		.sink_startofpacket (qsys_sys_mgr_system_mm_agent_rp_startofpacket),                            //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (qsys_sys_mgr_system_mm_agent_rp_endofpacket),                              //   input,    width = 1,          .endofpacket
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready          (router_007_src_ready),                                                     //   input,    width = 1,       src.ready
		.src_valid          (router_007_src_valid),                                                     //  output,    width = 1,          .valid
		.src_data           (router_007_src_data),                                                      //  output,  width = 122,          .data
		.src_channel        (router_007_src_channel),                                                   //  output,    width = 5,          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (639),
		.PKT_DEST_ID_L             (637),
		.PKT_SRC_ID_H              (636),
		.PKT_SRC_ID_L              (634),
		.PKT_BYTE_CNT_H            (623),
		.PKT_BYTE_CNT_L            (614),
		.PKT_BYTEEN_H              (575),
		.PKT_BYTEEN_L              (512),
		.PKT_TRANS_POSTED          (609),
		.PKT_TRANS_WRITE           (610),
		.MAX_OUTSTANDING_RESPONSES (131),
		.PIPELINED                 (0),
		.ST_DATA_W                 (662),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter (
		.clk                    (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                      //   input,    width = 1,       clk.clk
		.reset                  (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                                           //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                                           //   input,    width = 1,          .valid
		.cmd_sink_data          (router_src_data),                                                                            //   input,  width = 662,          .data
		.cmd_sink_channel       (router_src_channel),                                                                         //   input,    width = 5,          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                                   //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                                     //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_ready),                        //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_data),                         //  output,  width = 662,          .data
		.cmd_src_channel        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_channel),                      //  output,    width = 5,          .channel
		.cmd_src_startofpacket  (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_endofpacket),                  //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_valid),                        //  output,    width = 1,          .valid
		.rsp_sink_ready         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_ready),                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_channel),                //   input,    width = 5,          .channel
		.rsp_sink_data          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_data),                   //   input,  width = 662,          .data
		.rsp_sink_startofpacket (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_ready),                        //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_valid),                        //  output,    width = 1,          .valid
		.rsp_src_data           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_data),                         //  output,  width = 662,          .data
		.rsp_src_channel        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_channel),                      //  output,    width = 5,          .channel
		.rsp_src_startofpacket  (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_startofpacket),                //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_rsp_src_endofpacket)                   //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (135),
		.PIPELINED                 (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) spi_pb_0_m0_limiter (
		.clk                    (qsys_clk_config_clk_clk),                    //   input,    width = 1,       clk.clk
		.reset                  (spi_pb_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                       //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                       //   input,    width = 1,          .valid
		.cmd_sink_data          (router_001_src_data),                        //   input,  width = 122,          .data
		.cmd_sink_channel       (router_001_src_channel),                     //   input,    width = 5,          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),               //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                 //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (spi_pb_0_m0_limiter_cmd_src_ready),          //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (spi_pb_0_m0_limiter_cmd_src_data),           //  output,  width = 122,          .data
		.cmd_src_channel        (spi_pb_0_m0_limiter_cmd_src_channel),        //  output,    width = 5,          .channel
		.cmd_src_startofpacket  (spi_pb_0_m0_limiter_cmd_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (spi_pb_0_m0_limiter_cmd_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                      //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                      //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                    //   input,    width = 5,          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                       //   input,  width = 122,          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),              //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (spi_pb_0_m0_limiter_rsp_src_ready),          //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (spi_pb_0_m0_limiter_rsp_src_valid),          //  output,    width = 1,          .valid
		.rsp_src_data           (spi_pb_0_m0_limiter_rsp_src_data),           //  output,  width = 122,          .data
		.rsp_src_channel        (spi_pb_0_m0_limiter_rsp_src_channel),        //  output,    width = 5,          .channel
		.rsp_src_startofpacket  (spi_pb_0_m0_limiter_rsp_src_startofpacket),  //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (spi_pb_0_m0_limiter_rsp_src_endofpacket),    //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (spi_pb_0_m0_limiter_cmd_valid_data)          //  output,    width = 5, cmd_valid.data
	);

	qsys_top_altera_merlin_traffic_limiter_191_kcba44q #(
		.SYNC_RESET                (0),
		.PKT_DEST_ID_H             (99),
		.PKT_DEST_ID_L             (97),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (135),
		.PIPELINED                 (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.VALID_WIDTH               (5),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) qsys_top_master_0_master_limiter (
		.clk                    (qsys_clk_config_clk_clk),                                //   input,    width = 1,       clk.clk
		.reset                  (spi_pb_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1, clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                   //  output,    width = 1,  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                   //   input,    width = 1,          .valid
		.cmd_sink_data          (router_002_src_data),                                    //   input,  width = 122,          .data
		.cmd_sink_channel       (router_002_src_channel),                                 //   input,    width = 5,          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                           //   input,    width = 1,          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                             //   input,    width = 1,          .endofpacket
		.cmd_src_ready          (qsys_top_master_0_master_limiter_cmd_src_ready),         //   input,    width = 1,   cmd_src.ready
		.cmd_src_data           (qsys_top_master_0_master_limiter_cmd_src_data),          //  output,  width = 122,          .data
		.cmd_src_channel        (qsys_top_master_0_master_limiter_cmd_src_channel),       //  output,    width = 5,          .channel
		.cmd_src_startofpacket  (qsys_top_master_0_master_limiter_cmd_src_startofpacket), //  output,    width = 1,          .startofpacket
		.cmd_src_endofpacket    (qsys_top_master_0_master_limiter_cmd_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                  //  output,    width = 1,  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                  //   input,    width = 1,          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                //   input,    width = 5,          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                   //   input,  width = 122,          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                          //   input,    width = 1,          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                            //   input,    width = 1,          .endofpacket
		.rsp_src_ready          (qsys_top_master_0_master_limiter_rsp_src_ready),         //   input,    width = 1,   rsp_src.ready
		.rsp_src_valid          (qsys_top_master_0_master_limiter_rsp_src_valid),         //  output,    width = 1,          .valid
		.rsp_src_data           (qsys_top_master_0_master_limiter_rsp_src_data),          //  output,  width = 122,          .data
		.rsp_src_channel        (qsys_top_master_0_master_limiter_rsp_src_channel),       //  output,    width = 5,          .channel
		.rsp_src_startofpacket  (qsys_top_master_0_master_limiter_rsp_src_startofpacket), //  output,    width = 1,          .startofpacket
		.rsp_src_endofpacket    (qsys_top_master_0_master_limiter_rsp_src_endofpacket),   //  output,    width = 1,          .endofpacket
		.cmd_src_valid          (qsys_top_master_0_master_limiter_cmd_valid_data)         //  output,    width = 5, cmd_valid.data
	);

	qsys_top_altera_merlin_burst_adapter_1920_nqsp4yq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter (
		.clk                   (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                      //   input,    width = 1,       cr0.clk
		.reset                 (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset),   //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                          //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                           //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_src_channel),                                                        //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                                  //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                    //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                          //  output,    width = 1,          .ready
		.source0_valid         (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_valid),         //  output,    width = 1,   source0.valid
		.source0_data          (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_data),          //  output,  width = 122,          .data
		.source0_channel       (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_channel),       //  output,    width = 5,          .channel
		.source0_startofpacket (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_startofpacket), //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_endofpacket),   //  output,    width = 1,          .endofpacket
		.source0_ready         (qsys_top_mm_clock_crossing_bridge_0_s0_burst_adapter_source0_ready)          //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_burst_adapter_1920_nqsp4yq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) arbiter_bridge_s0_burst_adapter (
		.clk                   (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       cr0.clk
		.reset                 (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                     //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                                  //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (arbiter_bridge_s0_burst_adapter_source0_valid),                            //  output,    width = 1,   source0.valid
		.source0_data          (arbiter_bridge_s0_burst_adapter_source0_data),                             //  output,  width = 122,          .data
		.source0_channel       (arbiter_bridge_s0_burst_adapter_source0_channel),                          //  output,    width = 5,          .channel
		.source0_startofpacket (arbiter_bridge_s0_burst_adapter_source0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (arbiter_bridge_s0_burst_adapter_source0_endofpacket),                      //  output,    width = 1,          .endofpacket
		.source0_ready         (arbiter_bridge_s0_burst_adapter_source0_ready)                             //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_burst_adapter_1920_nqsp4yq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) pcie_to_avmm_0_s0_burst_adapter (
		.clk                   (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       cr0.clk
		.reset                 (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                     //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                  //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (pcie_to_avmm_0_s0_burst_adapter_source0_valid),                            //  output,    width = 1,   source0.valid
		.source0_data          (pcie_to_avmm_0_s0_burst_adapter_source0_data),                             //  output,  width = 122,          .data
		.source0_channel       (pcie_to_avmm_0_s0_burst_adapter_source0_channel),                          //  output,    width = 5,          .channel
		.source0_startofpacket (pcie_to_avmm_0_s0_burst_adapter_source0_startofpacket),                    //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (pcie_to_avmm_0_s0_burst_adapter_source0_endofpacket),                      //  output,    width = 1,          .endofpacket
		.source0_ready         (pcie_to_avmm_0_s0_burst_adapter_source0_ready)                             //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_burst_adapter_1920_nqsp4yq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) ocmem_s1_burst_adapter (
		.clk                   (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       cr0.clk
		.reset                 (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                                     //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                                  //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (ocmem_s1_burst_adapter_source0_valid),                                     //  output,    width = 1,   source0.valid
		.source0_data          (ocmem_s1_burst_adapter_source0_data),                                      //  output,  width = 122,          .data
		.source0_channel       (ocmem_s1_burst_adapter_source0_channel),                                   //  output,    width = 5,          .channel
		.source0_startofpacket (ocmem_s1_burst_adapter_source0_startofpacket),                             //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (ocmem_s1_burst_adapter_source0_endofpacket),                               //  output,    width = 1,          .endofpacket
		.source0_ready         (ocmem_s1_burst_adapter_source0_ready)                                      //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_burst_adapter_1920_nqsp4yq #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (92),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (87),
		.PKT_BURST_SIZE_L          (85),
		.PKT_BURST_TYPE_H          (89),
		.PKT_BURST_TYPE_L          (88),
		.PKT_BURSTWRAP_H           (84),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (122),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (84),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1"),
		.SYNC_RESET                (0)
	) qsys_sys_mgr_system_mm_burst_adapter (
		.clk                   (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       cr0.clk
		.reset                 (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                                    //   input,    width = 1,     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                                     //   input,  width = 122,          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                                  //   input,    width = 5,          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                                    //  output,    width = 1,          .ready
		.source0_valid         (qsys_sys_mgr_system_mm_burst_adapter_source0_valid),                       //  output,    width = 1,   source0.valid
		.source0_data          (qsys_sys_mgr_system_mm_burst_adapter_source0_data),                        //  output,  width = 122,          .data
		.source0_channel       (qsys_sys_mgr_system_mm_burst_adapter_source0_channel),                     //  output,    width = 5,          .channel
		.source0_startofpacket (qsys_sys_mgr_system_mm_burst_adapter_source0_startofpacket),               //  output,    width = 1,          .startofpacket
		.source0_endofpacket   (qsys_sys_mgr_system_mm_burst_adapter_source0_endofpacket),                 //  output,    width = 1,          .endofpacket
		.source0_ready         (qsys_sys_mgr_system_mm_burst_adapter_source0_ready)                        //   input,    width = 1,          .ready
	);

	qsys_top_altera_merlin_demultiplexer_1920_nzqzhcq cmd_demux (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                      //   input,    width = 1,       clk.clk
		.reset              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_ready),                  //  output,    width = 1,      sink.ready
		.sink_channel       (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_channel),                //   input,    width = 5,          .channel
		.sink_data          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_data),                   //   input,  width = 122,          .data
		.sink_startofpacket (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_startofpacket),          //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_endofpacket),            //   input,    width = 1,          .endofpacket
		.sink_valid         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_valid),                  //   input,    width = 1,          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                                       //   input,    width = 1,      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                                       //  output,    width = 1,          .valid
		.src0_data          (cmd_demux_src0_data),                                                                        //  output,  width = 122,          .data
		.src0_channel       (cmd_demux_src0_channel),                                                                     //  output,    width = 5,          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                               //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                                                 //  output,    width = 1,          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                                       //   input,    width = 1,      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                                       //  output,    width = 1,          .valid
		.src1_data          (cmd_demux_src1_data),                                                                        //  output,  width = 122,          .data
		.src1_channel       (cmd_demux_src1_channel),                                                                     //  output,    width = 5,          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                                               //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                                                 //  output,    width = 1,          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                                       //   input,    width = 1,      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                                       //  output,    width = 1,          .valid
		.src2_data          (cmd_demux_src2_data),                                                                        //  output,  width = 122,          .data
		.src2_channel       (cmd_demux_src2_channel),                                                                     //  output,    width = 5,          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                                               //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                                                 //  output,    width = 1,          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                                       //   input,    width = 1,      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                                       //  output,    width = 1,          .valid
		.src3_data          (cmd_demux_src3_data),                                                                        //  output,  width = 122,          .data
		.src3_channel       (cmd_demux_src3_channel),                                                                     //  output,    width = 5,          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                                               //  output,    width = 1,          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                                                 //  output,    width = 1,          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                                       //   input,    width = 1,      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                                       //  output,    width = 1,          .valid
		.src4_data          (cmd_demux_src4_data),                                                                        //  output,  width = 122,          .data
		.src4_channel       (cmd_demux_src4_channel),                                                                     //  output,    width = 5,          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                                               //  output,    width = 1,          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket)                                                                  //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_hi7mora cmd_demux_001 (
		.clk                (qsys_clk_config_clk_clk),                    //   input,    width = 1,        clk.clk
		.reset              (spi_pb_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  clk_reset.reset
		.sink_ready         (spi_pb_0_m0_limiter_cmd_src_ready),          //  output,    width = 1,       sink.ready
		.sink_channel       (spi_pb_0_m0_limiter_cmd_src_channel),        //   input,    width = 5,           .channel
		.sink_data          (spi_pb_0_m0_limiter_cmd_src_data),           //   input,  width = 122,           .data
		.sink_startofpacket (spi_pb_0_m0_limiter_cmd_src_startofpacket),  //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (spi_pb_0_m0_limiter_cmd_src_endofpacket),    //   input,    width = 1,           .endofpacket
		.sink_valid         (spi_pb_0_m0_limiter_cmd_valid_data),         //   input,    width = 5, sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                   //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_001_src0_data),                    //  output,  width = 122,           .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //  output,    width = 5,           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),             //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                   //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                   //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_001_src1_data),                    //  output,  width = 122,           .data
		.src1_channel       (cmd_demux_001_src1_channel),                 //  output,    width = 5,           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),           //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),             //  output,    width = 1,           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                   //   input,    width = 1,       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                   //  output,    width = 1,           .valid
		.src2_data          (cmd_demux_001_src2_data),                    //  output,  width = 122,           .data
		.src2_channel       (cmd_demux_001_src2_channel),                 //  output,    width = 5,           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),           //  output,    width = 1,           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),             //  output,    width = 1,           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                   //   input,    width = 1,       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                   //  output,    width = 1,           .valid
		.src3_data          (cmd_demux_001_src3_data),                    //  output,  width = 122,           .data
		.src3_channel       (cmd_demux_001_src3_channel),                 //  output,    width = 5,           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),           //  output,    width = 1,           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)              //  output,    width = 1,           .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_6ofqb2a cmd_demux_002 (
		.clk                (qsys_clk_config_clk_clk),                                //   input,    width = 1,        clk.clk
		.reset              (spi_pb_0_reset_reset_bridge_in_reset_reset),             //   input,    width = 1,  clk_reset.reset
		.sink_ready         (qsys_top_master_0_master_limiter_cmd_src_ready),         //  output,    width = 1,       sink.ready
		.sink_channel       (qsys_top_master_0_master_limiter_cmd_src_channel),       //   input,    width = 5,           .channel
		.sink_data          (qsys_top_master_0_master_limiter_cmd_src_data),          //   input,  width = 122,           .data
		.sink_startofpacket (qsys_top_master_0_master_limiter_cmd_src_startofpacket), //   input,    width = 1,           .startofpacket
		.sink_endofpacket   (qsys_top_master_0_master_limiter_cmd_src_endofpacket),   //   input,    width = 1,           .endofpacket
		.sink_valid         (qsys_top_master_0_master_limiter_cmd_valid_data),        //   input,    width = 5, sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                               //   input,    width = 1,       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                               //  output,    width = 1,           .valid
		.src0_data          (cmd_demux_002_src0_data),                                //  output,  width = 122,           .data
		.src0_channel       (cmd_demux_002_src0_channel),                             //  output,    width = 5,           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                       //  output,    width = 1,           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                         //  output,    width = 1,           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                               //   input,    width = 1,       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                               //  output,    width = 1,           .valid
		.src1_data          (cmd_demux_002_src1_data),                                //  output,  width = 122,           .data
		.src1_channel       (cmd_demux_002_src1_channel),                             //  output,    width = 5,           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                       //  output,    width = 1,           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                          //  output,    width = 1,           .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_r4uam4y cmd_mux (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset               (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                        //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_src_valid),                                                        //  output,    width = 1,          .valid
		.src_data            (cmd_mux_src_data),                                                         //  output,  width = 122,          .data
		.src_channel         (cmd_mux_src_channel),                                                      //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                  //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                   //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src0_data),                                                      //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_out_ready),                                                        //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_out_valid),                                                        //   input,    width = 1,          .valid
		.sink1_channel       (crosser_out_channel),                                                      //   input,    width = 5,          .channel
		.sink1_data          (crosser_out_data),                                                         //   input,  width = 122,          .data
		.sink1_startofpacket (crosser_out_startofpacket),                                                //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_out_endofpacket),                                                  //   input,    width = 1,          .endofpacket
		.sink2_ready         (crosser_004_out_ready),                                                    //  output,    width = 1,     sink2.ready
		.sink2_valid         (crosser_004_out_valid),                                                    //   input,    width = 1,          .valid
		.sink2_channel       (crosser_004_out_channel),                                                  //   input,    width = 5,          .channel
		.sink2_data          (crosser_004_out_data),                                                     //   input,  width = 122,          .data
		.sink2_startofpacket (crosser_004_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (crosser_004_out_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_wk4dnvi cmd_mux_001 (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset               (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_001_src_data),                                                     //  output,  width = 122,          .data
		.src_channel         (cmd_mux_001_src_channel),                                                  //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                                   //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src1_data),                                                      //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                                    //   input,    width = 1,          .valid
		.sink1_channel       (crosser_001_out_channel),                                                  //   input,    width = 5,          .channel
		.sink1_data          (crosser_001_out_data),                                                     //   input,  width = 122,          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_anaamfy cmd_mux_002 (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset               (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_002_src_data),                                                     //  output,  width = 122,          .data
		.src_channel         (cmd_mux_002_src_channel),                                                  //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                                   //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src2_data),                                                      //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                                //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_wk4dnvi cmd_mux_003 (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset               (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_003_src_data),                                                     //  output,  width = 122,          .data
		.src_channel         (cmd_mux_003_src_channel),                                                  //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                                   //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src3_data),                                                      //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_002_out_ready),                                                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_002_out_valid),                                                    //   input,    width = 1,          .valid
		.sink1_channel       (crosser_002_out_channel),                                                  //   input,    width = 5,          .channel
		.sink1_data          (crosser_002_out_data),                                                     //   input,  width = 122,          .data
		.sink1_startofpacket (crosser_002_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_002_out_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_r4uam4y cmd_mux_004 (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset               (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                    //   input,    width = 1,       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                    //  output,    width = 1,          .valid
		.src_data            (cmd_mux_004_src_data),                                                     //  output,  width = 122,          .data
		.src_channel         (cmd_mux_004_src_channel),                                                  //  output,    width = 5,          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                            //  output,    width = 1,          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                              //  output,    width = 1,          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                                     //  output,    width = 1,     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                                     //   input,    width = 1,          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                                   //   input,    width = 5,          .channel
		.sink0_data          (cmd_demux_src4_data),                                                      //   input,  width = 122,          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_003_out_ready),                                                    //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_003_out_valid),                                                    //   input,    width = 1,          .valid
		.sink1_channel       (crosser_003_out_channel),                                                  //   input,    width = 5,          .channel
		.sink1_data          (crosser_003_out_data),                                                     //   input,  width = 122,          .data
		.sink1_startofpacket (crosser_003_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_003_out_endofpacket),                                              //   input,    width = 1,          .endofpacket
		.sink2_ready         (crosser_005_out_ready),                                                    //  output,    width = 1,     sink2.ready
		.sink2_valid         (crosser_005_out_valid),                                                    //   input,    width = 1,          .valid
		.sink2_channel       (crosser_005_out_channel),                                                  //   input,    width = 5,          .channel
		.sink2_data          (crosser_005_out_data),                                                     //   input,  width = 122,          .data
		.sink2_startofpacket (crosser_005_out_startofpacket),                                            //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (crosser_005_out_endofpacket)                                               //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_uawfxmy rsp_demux (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_003_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_003_src_channel),                                                   //   input,    width = 5,          .channel
		.sink_data          (router_003_src_data),                                                      //   input,  width = 122,          .data
		.sink_startofpacket (router_003_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_003_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_src0_ready),                                                     //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                                     //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_src0_data),                                                      //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_src0_channel),                                                   //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                               //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                                     //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                                     //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_src1_data),                                                      //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_src1_channel),                                                   //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                               //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                                     //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                                     //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_src2_data),                                                      //  output,  width = 122,          .data
		.src2_channel       (rsp_demux_src2_channel),                                                   //  output,    width = 5,          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                             //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                                //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_atklsvy rsp_demux_001 (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_004_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_004_src_channel),                                                   //   input,    width = 5,          .channel
		.sink_data          (router_004_src_data),                                                      //   input,  width = 122,          .data
		.sink_startofpacket (router_004_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_004_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_001_src0_data),                                                  //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                               //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_001_src1_data),                                                  //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                               //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_7zmplrq rsp_demux_002 (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_005_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_005_src_channel),                                                   //   input,    width = 5,          .channel
		.sink_data          (router_005_src_data),                                                      //   input,  width = 122,          .data
		.sink_startofpacket (router_005_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_005_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_002_src0_data),                                                  //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                               //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_atklsvy rsp_demux_003 (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_006_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_006_src_channel),                                                   //   input,    width = 5,          .channel
		.sink_data          (router_006_src_data),                                                      //   input,  width = 122,          .data
		.sink_startofpacket (router_006_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_006_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_003_src0_data),                                                  //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                               //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_003_src1_data),                                                  //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                               //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_demultiplexer_1920_uawfxmy rsp_demux_004 (
		.clk                (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       clk.clk
		.reset              (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.sink_ready         (router_007_src_ready),                                                     //  output,    width = 1,      sink.ready
		.sink_channel       (router_007_src_channel),                                                   //   input,    width = 5,          .channel
		.sink_data          (router_007_src_data),                                                      //   input,  width = 122,          .data
		.sink_startofpacket (router_007_src_startofpacket),                                             //   input,    width = 1,          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                               //   input,    width = 1,          .endofpacket
		.sink_valid         (router_007_src_valid),                                                     //   input,    width = 1,          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                                 //   input,    width = 1,      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                                 //  output,    width = 1,          .valid
		.src0_data          (rsp_demux_004_src0_data),                                                  //  output,  width = 122,          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                               //  output,    width = 5,          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                                 //   input,    width = 1,      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                                 //  output,    width = 1,          .valid
		.src1_data          (rsp_demux_004_src1_data),                                                  //  output,  width = 122,          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                               //  output,    width = 5,          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                                           //  output,    width = 1,          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                                                 //   input,    width = 1,      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                                                 //  output,    width = 1,          .valid
		.src2_data          (rsp_demux_004_src2_data),                                                  //  output,  width = 122,          .data
		.src2_channel       (rsp_demux_004_src2_channel),                                               //  output,    width = 5,          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                                         //  output,    width = 1,          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                                            //  output,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_imw6o5i rsp_mux (
		.clk                 (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                      //   input,    width = 1,       clk.clk
		.reset               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                          //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                          //  output,    width = 1,          .valid
		.src_data            (rsp_mux_src_data),                                                                           //  output,  width = 122,          .data
		.src_channel         (rsp_mux_src_channel),                                                                        //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                                  //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                                    //  output,    width = 1,          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                                       //  output,    width = 1,     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                                       //   input,    width = 1,          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                                     //   input,    width = 5,          .channel
		.sink0_data          (rsp_demux_src0_data),                                                                        //   input,  width = 122,          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                                               //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                                                 //   input,    width = 1,          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                                                   //  output,    width = 1,     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                                                   //   input,    width = 1,          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                                                 //   input,    width = 5,          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                                                    //   input,  width = 122,          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                                                   //  output,    width = 1,     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                                                   //   input,    width = 1,          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                                                 //   input,    width = 5,          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                                                    //   input,  width = 122,          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                                                   //  output,    width = 1,     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                                                   //   input,    width = 1,          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                                                 //   input,    width = 5,          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                                                    //   input,  width = 122,          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                                                             //   input,    width = 1,          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                                                   //  output,    width = 1,     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                                                   //   input,    width = 1,          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                                                 //   input,    width = 5,          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                                                    //   input,  width = 122,          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                                                           //   input,    width = 1,          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                                                              //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_otolx4y rsp_mux_001 (
		.clk                 (qsys_clk_config_clk_clk),                    //   input,    width = 1,       clk.clk
		.reset               (spi_pb_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_001_src_valid),                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_001_src_data),                       //  output,  width = 122,          .data
		.src_channel         (rsp_mux_001_src_channel),                    //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (crosser_006_out_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (crosser_006_out_data),                       //   input,  width = 122,          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_008_out_ready),                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_008_out_valid),                      //   input,    width = 1,          .valid
		.sink1_channel       (crosser_008_out_channel),                    //   input,    width = 5,          .channel
		.sink1_data          (crosser_008_out_data),                       //   input,  width = 122,          .data
		.sink1_startofpacket (crosser_008_out_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_008_out_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink2_ready         (crosser_009_out_ready),                      //  output,    width = 1,     sink2.ready
		.sink2_valid         (crosser_009_out_valid),                      //   input,    width = 1,          .valid
		.sink2_channel       (crosser_009_out_channel),                    //   input,    width = 5,          .channel
		.sink2_data          (crosser_009_out_data),                       //   input,  width = 122,          .data
		.sink2_startofpacket (crosser_009_out_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink2_endofpacket   (crosser_009_out_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink3_ready         (crosser_010_out_ready),                      //  output,    width = 1,     sink3.ready
		.sink3_valid         (crosser_010_out_valid),                      //   input,    width = 1,          .valid
		.sink3_channel       (crosser_010_out_channel),                    //   input,    width = 5,          .channel
		.sink3_data          (crosser_010_out_data),                       //   input,  width = 122,          .data
		.sink3_startofpacket (crosser_010_out_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink3_endofpacket   (crosser_010_out_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_multiplexer_1920_l3embyy rsp_mux_002 (
		.clk                 (qsys_clk_config_clk_clk),                    //   input,    width = 1,       clk.clk
		.reset               (spi_pb_0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                      //   input,    width = 1,       src.ready
		.src_valid           (rsp_mux_002_src_valid),                      //  output,    width = 1,          .valid
		.src_data            (rsp_mux_002_src_data),                       //  output,  width = 122,          .data
		.src_channel         (rsp_mux_002_src_channel),                    //  output,    width = 5,          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),              //  output,    width = 1,          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                //  output,    width = 1,          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                      //  output,    width = 1,     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                      //   input,    width = 1,          .valid
		.sink0_channel       (crosser_007_out_channel),                    //   input,    width = 5,          .channel
		.sink0_data          (crosser_007_out_data),                       //   input,  width = 122,          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket),                //   input,    width = 1,          .endofpacket
		.sink1_ready         (crosser_011_out_ready),                      //  output,    width = 1,     sink1.ready
		.sink1_valid         (crosser_011_out_valid),                      //   input,    width = 1,          .valid
		.sink1_channel       (crosser_011_out_channel),                    //   input,    width = 5,          .channel
		.sink1_data          (crosser_011_out_data),                       //   input,  width = 122,          .data
		.sink1_startofpacket (crosser_011_out_startofpacket),              //   input,    width = 1,          .startofpacket
		.sink1_endofpacket   (crosser_011_out_endofpacket)                 //   input,    width = 1,          .endofpacket
	);

	qsys_top_altera_merlin_width_adapter_1920_3rwmrgy #(
		.IN_PKT_ADDR_H                 (607),
		.IN_PKT_ADDR_L                 (576),
		.IN_PKT_DATA_H                 (511),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (575),
		.IN_PKT_BYTEEN_L               (512),
		.IN_PKT_BYTE_CNT_H             (623),
		.IN_PKT_BYTE_CNT_L             (614),
		.IN_PKT_TRANS_COMPRESSED_READ  (608),
		.IN_PKT_TRANS_WRITE            (610),
		.IN_PKT_BURSTWRAP_H            (624),
		.IN_PKT_BURSTWRAP_L            (624),
		.IN_PKT_BURST_SIZE_H           (627),
		.IN_PKT_BURST_SIZE_L           (625),
		.IN_PKT_RESPONSE_STATUS_H      (649),
		.IN_PKT_RESPONSE_STATUS_L      (648),
		.IN_PKT_TRANS_EXCLUSIVE        (613),
		.IN_PKT_BURST_TYPE_H           (629),
		.IN_PKT_BURST_TYPE_L           (628),
		.IN_PKT_ORI_BURST_SIZE_L       (650),
		.IN_PKT_ORI_BURST_SIZE_H       (652),
		.IN_ST_DATA_W                  (662),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (87),
		.OUT_PKT_BURST_SIZE_L          (85),
		.OUT_PKT_RESPONSE_STATUS_H     (109),
		.OUT_PKT_RESPONSE_STATUS_L     (108),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (89),
		.OUT_PKT_BURST_TYPE_L          (88),
		.OUT_PKT_ORI_BURST_SIZE_L      (110),
		.OUT_PKT_ORI_BURST_SIZE_H      (112),
		.OUT_ST_DATA_W                 (122),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter (
		.clk                  (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_valid),                        //   input,    width = 1,      sink.valid
		.in_channel           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_channel),                      //   input,    width = 5,          .channel
		.in_startofpacket     (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_startofpacket),                //   input,    width = 1,          .startofpacket
		.in_endofpacket       (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_endofpacket),                  //   input,    width = 1,          .endofpacket
		.in_ready             (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_ready),                        //  output,    width = 1,          .ready
		.in_data              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_limiter_cmd_src_data),                         //   input,  width = 662,          .data
		.out_endofpacket      (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_data),                   //  output,  width = 122,          .data
		.out_channel          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_channel),                //  output,    width = 5,          .channel
		.out_valid            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_cmd_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated),                         
	);

	qsys_top_altera_merlin_width_adapter_1920_b6zigwa #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (84),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (87),
		.IN_PKT_BURST_SIZE_L           (85),
		.IN_PKT_RESPONSE_STATUS_H      (109),
		.IN_PKT_RESPONSE_STATUS_L      (108),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (89),
		.IN_PKT_BURST_TYPE_L           (88),
		.IN_PKT_ORI_BURST_SIZE_L       (110),
		.IN_PKT_ORI_BURST_SIZE_H       (112),
		.IN_ST_DATA_W                  (122),
		.OUT_PKT_ADDR_H                (607),
		.OUT_PKT_ADDR_L                (576),
		.OUT_PKT_DATA_H                (511),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (575),
		.OUT_PKT_BYTEEN_L              (512),
		.OUT_PKT_BYTE_CNT_H            (623),
		.OUT_PKT_BYTE_CNT_L            (614),
		.OUT_PKT_TRANS_COMPRESSED_READ (608),
		.OUT_PKT_BURST_SIZE_H          (627),
		.OUT_PKT_BURST_SIZE_L          (625),
		.OUT_PKT_RESPONSE_STATUS_H     (649),
		.OUT_PKT_RESPONSE_STATUS_L     (648),
		.OUT_PKT_TRANS_EXCLUSIVE       (613),
		.OUT_PKT_BURST_TYPE_H          (629),
		.OUT_PKT_BURST_TYPE_L          (628),
		.OUT_PKT_ORI_BURST_SIZE_L      (650),
		.OUT_PKT_ORI_BURST_SIZE_H      (652),
		.OUT_ST_DATA_W                 (662),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0),
		.SYNC_RESET                    (0)
	) qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter (
		.clk                  (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                      //   input,    width = 1,       clk.clk
		.reset                (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset), //   input,    width = 1, clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                                                          //   input,    width = 1,      sink.valid
		.in_channel           (rsp_mux_src_channel),                                                                        //   input,    width = 5,          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                                                  //   input,    width = 1,          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                                                    //   input,    width = 1,          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                                                          //  output,    width = 1,          .ready
		.in_data              (rsp_mux_src_data),                                                                           //   input,  width = 122,          .data
		.out_endofpacket      (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_endofpacket),            //  output,    width = 1,       src.endofpacket
		.out_data             (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_data),                   //  output,  width = 662,          .data
		.out_channel          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_channel),                //  output,    width = 5,          .channel
		.out_valid            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_valid),                  //  output,    width = 1,          .valid
		.out_ready            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_ready),                  //   input,    width = 1,          .ready
		.out_startofpacket    (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_rsp_width_adapter_src_startofpacket),          //  output,    width = 1,          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated),                         
	);

	altera_merlin_waitrequest_adapter #(
		.UAV_ADDRESS_W            (32),
		.UAV_BYTEENABLE_W         (64),
		.UAV_BURSTCOUNT_W         (10),
		.UAV_DATA_W               (512),
		.USE_READRESPONSE         (1),
		.USE_WRITERESPONSE        (1),
		.S0_WAITREQUEST_ALLOWANCE (8),
		.M0_WAITREQUEST_ALLOWANCE (0),
		.SYNC_RESET               (0)
	) qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter (
		.clk                   (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                                                 //   input,    width = 1,   clk.clk
		.reset                 (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_reset_reset_bridge_in_reset_reset),            //   input,    width = 1, reset.reset
		.m0_write              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_write),                  //  output,    width = 1,    m0.write
		.m0_read               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_read),                   //  output,    width = 1,      .read
		.m0_address            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_address),                //  output,   width = 32,      .address
		.m0_burstcount         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_burstcount),             //  output,   width = 10,      .burstcount
		.m0_byteenable         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_byteenable),             //  output,   width = 64,      .byteenable
		.m0_writedata          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_writedata),              //  output,  width = 512,      .writedata
		.m0_lock               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_lock),                   //  output,    width = 1,      .lock
		.m0_debugaccess        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_debugaccess),            //  output,    width = 1,      .debugaccess
		.m0_readdata           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_readdata),               //   input,  width = 512,      .readdata
		.m0_readdatavalid      (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_readdatavalid),          //   input,    width = 1,      .readdatavalid
		.m0_waitrequest        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_waitrequest),            //   input,    width = 1,      .waitrequest
		.m0_writeresponsevalid (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_writeresponsevalid),     //   input,    width = 1,      .writeresponsevalid
		.m0_response           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_waitrequest_allowance_adapter_m0_response),               //   input,    width = 2,      .response
		.s0_write              (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_write),              //   input,    width = 1,    s0.write
		.s0_read               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_read),               //   input,    width = 1,      .read
		.s0_address            (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_address),            //   input,   width = 32,      .address
		.s0_burstcount         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_burstcount),         //   input,   width = 10,      .burstcount
		.s0_writedata          (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_writedata),          //   input,  width = 512,      .writedata
		.s0_lock               (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_lock),               //   input,    width = 1,      .lock
		.s0_debugaccess        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_debugaccess),        //   input,    width = 1,      .debugaccess
		.s0_byteenable         (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_byteenable),         //   input,   width = 64,      .byteenable
		.s0_readdata           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_readdata),           //  output,  width = 512,      .readdata
		.s0_readdatavalid      (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_readdatavalid),      //  output,    width = 1,      .readdatavalid
		.s0_waitrequest        (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_waitrequest),        //  output,    width = 1,      .waitrequest
		.s0_writeresponsevalid (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_writeresponsevalid), //  output,    width = 1,      .writeresponsevalid
		.s0_response           (qsys_top_pcie_s10_hip_avmm_gen3x16_bam_master_translator_avalon_universal_master_0_response)            //  output,    width = 2,      .response
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser (
		.in_clk            (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       out_clk.clk
		.out_reset         (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                               //   input,    width = 5,              .channel
		.in_data           (cmd_demux_001_src0_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_out_ready),                                                        //   input,    width = 1,           out.ready
		.out_valid         (crosser_out_valid),                                                        //  output,    width = 1,              .valid
		.out_startofpacket (crosser_out_startofpacket),                                                //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                                  //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_out_channel),                                                      //  output,    width = 5,              .channel
		.out_data          (crosser_out_data),                                                         //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_001 (
		.in_clk            (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       out_clk.clk
		.out_reset         (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_001_src1_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src1_channel),                                               //   input,    width = 5,              .channel
		.in_data           (cmd_demux_001_src1_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_001_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_001_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_001_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_001_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_002 (
		.in_clk            (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       out_clk.clk
		.out_reset         (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_001_src2_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src2_channel),                                               //   input,    width = 5,              .channel
		.in_data           (cmd_demux_001_src2_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_002_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_002_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_002_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_002_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_003 (
		.in_clk            (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       out_clk.clk
		.out_reset         (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                               //   input,    width = 5,              .channel
		.in_data           (cmd_demux_001_src3_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_003_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_003_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_003_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_003_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_004 (
		.in_clk            (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       out_clk.clk
		.out_reset         (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                               //   input,    width = 5,              .channel
		.in_data           (cmd_demux_002_src0_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_004_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_004_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_004_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_004_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_005 (
		.in_clk            (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,        in_clk.clk
		.in_reset          (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,       out_clk.clk
		.out_reset         (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1, out_clk_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (cmd_demux_002_src1_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (cmd_demux_002_src1_channel),                                               //   input,    width = 5,              .channel
		.in_data           (cmd_demux_002_src1_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_005_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_005_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_005_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_005_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_006 (
		.in_clk            (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,        in_clk.clk
		.in_reset          (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src1_valid),                                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                                   //   input,    width = 5,              .channel
		.in_data           (rsp_demux_src1_data),                                                      //   input,  width = 122,              .data
		.out_ready         (crosser_006_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_006_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_006_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_006_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_007 (
		.in_clk            (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,        in_clk.clk
		.in_reset          (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                                     //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_src2_valid),                                                     //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                                             //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                                               //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                                   //   input,    width = 5,              .channel
		.in_data           (rsp_demux_src2_data),                                                      //   input,  width = 122,              .data
		.out_ready         (crosser_007_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_007_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_007_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_007_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_008 (
		.in_clk            (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,        in_clk.clk
		.in_reset          (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                                               //   input,    width = 5,              .channel
		.in_data           (rsp_demux_001_src1_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_008_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_008_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_008_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_008_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_009 (
		.in_clk            (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,        in_clk.clk
		.in_reset          (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                                               //   input,    width = 5,              .channel
		.in_data           (rsp_demux_003_src1_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_009_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_009_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_009_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_009_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_010 (
		.in_clk            (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,        in_clk.clk
		.in_reset          (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_004_src1_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_004_src1_channel),                                               //   input,    width = 5,              .channel
		.in_data           (rsp_demux_004_src1_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_010_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_010_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_010_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_010_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

	qsys_top_altera_avalon_st_handshake_clock_crosser_1930_kklrpbi #(
		.DATA_WIDTH          (122),
		.BITS_PER_SYMBOL     (122),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (5),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0),
		.SYNC_RESET          (0)
	) crosser_011 (
		.in_clk            (qsys_top_pcie_s10_hip_avmm_gen3x16_coreclkout_hip_clk),                    //   input,    width = 1,        in_clk.clk
		.in_reset          (qsys_top_mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset), //   input,    width = 1,  in_clk_reset.reset
		.out_clk           (qsys_clk_config_clk_clk),                                                  //   input,    width = 1,       out_clk.clk
		.out_reset         (spi_pb_0_reset_reset_bridge_in_reset_reset),                               //   input,    width = 1, out_clk_reset.reset
		.in_ready          (rsp_demux_004_src2_ready),                                                 //  output,    width = 1,            in.ready
		.in_valid          (rsp_demux_004_src2_valid),                                                 //   input,    width = 1,              .valid
		.in_startofpacket  (rsp_demux_004_src2_startofpacket),                                         //   input,    width = 1,              .startofpacket
		.in_endofpacket    (rsp_demux_004_src2_endofpacket),                                           //   input,    width = 1,              .endofpacket
		.in_channel        (rsp_demux_004_src2_channel),                                               //   input,    width = 5,              .channel
		.in_data           (rsp_demux_004_src2_data),                                                  //   input,  width = 122,              .data
		.out_ready         (crosser_011_out_ready),                                                    //   input,    width = 1,           out.ready
		.out_valid         (crosser_011_out_valid),                                                    //  output,    width = 1,              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                            //  output,    width = 1,              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                              //  output,    width = 1,              .endofpacket
		.out_channel       (crosser_011_out_channel),                                                  //  output,    width = 5,              .channel
		.out_data          (crosser_011_out_data),                                                     //  output,  width = 122,              .data
		.in_empty          (1'b0),                                                                     // (terminated),                             
		.in_error          (1'b0),                                                                     // (terminated),                             
		.out_empty         (),                                                                         // (terminated),                             
		.out_error         ()                                                                          // (terminated),                             
	);

endmodule
