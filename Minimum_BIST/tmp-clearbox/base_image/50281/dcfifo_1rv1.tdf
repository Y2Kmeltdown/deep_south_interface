--dcfifo_mixed_widths ADD_RAM_OUTPUT_REGISTER="ON" CARRY_CHAIN="MANUAL" CBX_SINGLE_OUTPUT_FILE="OFF" DEVICE_FAMILY="Stratix 10" DISABLE_DCFIFO_EMBEDDED_TIMING_CONSTRAINT="TRUE" LPM_NUMWORDS=8 LPM_WIDTH=10 LPM_WIDTH_R=10 LPM_WIDTHU=3 LPM_WIDTHU_R=3 OVERFLOW_CHECKING="OFF" RDSYNC_DELAYPIPE=4 UNDERFLOW_CHECKING="OFF" USE_EAB="ON" WRSYNC_DELAYPIPE=4 aclr data q rdclk rdempty rdreq rdusedw wrclk wrreq ACF_BLOCK_RAM_AND_MLAB_EQUIVALENT_PAUSED_READ_CAPABILITIES="CARE" CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Stratix 10" LOW_POWER_MODE="AUTO" lpm_hint="DISABLE_DCFIFO_EMBEDDED_TIMING_CONSTRAINT=TRUE" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 20.3 cbx_a_gray2bin 2020:09:24:17:04:02:SC cbx_a_graycounter 2020:09:24:17:04:02:SC cbx_altdpram 2020:09:24:17:04:02:SC cbx_altera_counter 2020:09:24:17:04:02:SC cbx_altera_gray_counter 2020:09:24:17:04:02:SC cbx_altera_syncram 2020:09:24:17:04:02:SC cbx_altera_syncram_nd_impl 2020:09:24:17:04:02:SC cbx_altsyncram 2020:09:24:17:04:02:SC cbx_dcfifo 2020:09:24:17:04:02:SC cbx_fifo_common 2020:09:24:17:04:02:SC cbx_lpm_add_sub 2020:09:24:17:04:02:SC cbx_lpm_compare 2020:09:24:17:04:02:SC cbx_lpm_counter 2020:09:24:17:04:02:SC cbx_lpm_decode 2020:09:24:17:04:02:SC cbx_lpm_mux 2020:09:24:17:04:02:SC cbx_mgl 2020:09:24:17:44:28:SC cbx_nadder 2020:09:24:17:04:02:SC cbx_scfifo 2020:09:24:17:04:02:SC cbx_stratix 2020:09:24:17:04:02:SC cbx_stratixii 2020:09:24:17:04:02:SC cbx_stratixiii 2020:09:24:17:04:02:SC cbx_stratixv 2020:09:24:17:04:02:SC cbx_util_mgl 2020:09:24:17:04:02:SC  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION a_gray2bin_8f9 (gray[3..0])
RETURNS ( bin[3..0]);
FUNCTION altera_gray_counter (clk, enable, reset)
WITH ( PVALUE, WIDTH = 6)
RETURNS ( q[WIDTH-1..0]);
FUNCTION altera_syncram_5kg1 (aclr1, address_a[2..0], address_b[2..0], addressstall_b, clock0, clock1, clocken1, data_a[9..0], wren_a)
RETURNS ( q_b[9..0]);
FUNCTION dffpipe_k5c (clock, clrn, d[3..0])
RETURNS ( q[3..0]);
FUNCTION alt_synch_pipe_4go (clock, clrn, d[3..0])
RETURNS ( q[3..0]);
FUNCTION cmpr_in8 (dataa[3..0], datab[3..0])
RETURNS ( aeb);

--synthesis_resources = altera_gray_counter 2 lut 5 ram_bits (AUTO) 80 reg 36 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;SYNCHRONIZER_IDENTIFICATION=OFF;SYNCHRONIZATION_REGISTER_CHAIN_LENGTH = 2;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=d103;{-to wrptr_g1p} suppress_da_rule_internal=S102;{-to wrptr_g} suppress_da_rule_internal=S102;{-to wrptr_g} POWER_UP_LEVEL=LOW";

SUBDESIGN dcfifo_1rv1
( 
	aclr	:	input;
	data[9..0]	:	input;
	q[9..0]	:	output;
	rdclk	:	input;
	rdempty	:	output;
	rdreq	:	input;
	rdusedw[2..0]	:	output;
	wrclk	:	input;
	wrreq	:	input;
) 
VARIABLE 
	rdptr_g_gray2bin : a_gray2bin_8f9;
	rs_dgwp_gray2bin : a_gray2bin_8f9;
	rdptr_g1p : altera_gray_counter
		WITH (
			PVALUE = 1,
			WIDTH = 4
		);
	wrptr_g1p : altera_gray_counter
		WITH (
			PVALUE = 1,
			WIDTH = 4
		);
	fifo_altera_syncram : altera_syncram_5kg1;
	delayed_wrptr_g[3..0] : dffe;
	rdptr_g[3..0] : dffe;
	wrptr_g[3..0] : dffe
		WITH (
			power_up = "low"
		);
	rs_brp : dffpipe_k5c;
	rs_bwp : dffpipe_k5c;
	rs_dgwp : alt_synch_pipe_4go;
	ws_dgrp : alt_synch_pipe_4go;
	rdusedw_sub_dataa[3..0]	:	WIRE;
	rdusedw_sub_datab[3..0]	:	WIRE;
	rdusedw_sub_result[3..0]	:	WIRE;
	rdempty_eq_comp : cmpr_in8;
	wrfull_eq_comp : cmpr_in8;
	int_rdempty	: WIRE;
	ram_address_a[2..0]	: WIRE;
	ram_address_b[2..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_gs[3..0]	: WIRE;

BEGIN 
	rdptr_g_gray2bin.gray[3..0] = rdptr_g[3..0].q;
	rs_dgwp_gray2bin.gray[3..0] = rs_dgwp.q[3..0];
	rdptr_g1p.clk = rdclk;
	rdptr_g1p.enable = valid_rdreq;
	rdptr_g1p.reset = aclr;
	wrptr_g1p.clk = wrclk;
	wrptr_g1p.enable = valid_wrreq;
	wrptr_g1p.reset = aclr;
	fifo_altera_syncram.aclr1 = aclr;
	fifo_altera_syncram.address_a[] = ram_address_a[];
	fifo_altera_syncram.address_b[] = (ram_address_b[] & (! aclr));
	fifo_altera_syncram.addressstall_b = ((! valid_rdreq) & (! aclr));
	fifo_altera_syncram.clock0 = wrclk;
	fifo_altera_syncram.clock1 = rdclk;
	fifo_altera_syncram.clocken1 = valid_rdreq;
	fifo_altera_syncram.data_a[] = data[];
	fifo_altera_syncram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].clrn = (! aclr);
	delayed_wrptr_g[].d = wrptr_g[].q;
	rdptr_g[].clk = rdclk;
	rdptr_g[].clrn = (! aclr);
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	wrptr_g[].clk = wrclk;
	wrptr_g[].clrn = (! aclr);
	wrptr_g[].d = wrptr_g1p.q[];
	wrptr_g[].ena = valid_wrreq;
	rs_brp.clock = rdclk;
	rs_brp.clrn = (! aclr);
	rs_brp.d[] = rdptr_g_gray2bin.bin[];
	rs_bwp.clock = rdclk;
	rs_bwp.clrn = (! aclr);
	rs_bwp.d[] = rs_dgwp_gray2bin.bin[];
	rs_dgwp.clock = rdclk;
	rs_dgwp.clrn = (! aclr);
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_dgrp.clock = wrclk;
	ws_dgrp.clrn = (! aclr);
	ws_dgrp.d[] = rdptr_g[].q;
	rdusedw_sub_result[] = rdusedw_sub_dataa[] - rdusedw_sub_datab[];
	rdusedw_sub_dataa[] = rs_bwp.q[];
	rdusedw_sub_datab[] = rs_brp.q[];
	rdempty_eq_comp.dataa[] = rs_dgwp.q[];
	rdempty_eq_comp.datab[] = rdptr_g[].q;
	wrfull_eq_comp.dataa[] = ws_dgrp.q[];
	wrfull_eq_comp.datab[] = wrptr_gs[];
	int_rdempty = rdempty_eq_comp.aeb;
	q[] = fifo_altera_syncram.q_b[];
	ram_address_a[] = ( (wrptr_g[3..3].q $ wrptr_g[2..2].q), wrptr_g[1..0].q);
	ram_address_b[] = ( (rdptr_g1p.q[3..3] $ rdptr_g1p.q[2..2]), rdptr_g1p.q[1..0]);
	rdempty = int_rdempty;
	rdusedw[] = ( rdusedw_sub_result[2..0]);
	valid_rdreq = rdreq;
	valid_wrreq = wrreq;
	wrptr_gs[] = ( (! wrptr_g[3..3].q), (! wrptr_g[2..2].q), wrptr_g[1..0].q);
END;
--VALID FILE
